#!/usr/bin/env rune

# Copyright 2002 Combex, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

# NOTE from Kevin Reid: this file was created in 2004. should the above
# copyright date be changed to that, since it's a semi-new/updated thing, or
# left as is since the license states "The above copyright notice...shall be
# included..."?

# Answer from MarkM: IANAL, but as I understand it, if the contents of this
# file, as an expression of an idea, are largely derived from the original,
# then the notice should be left alone. But again, IANAL.

pragma.syntax("0.9")
pragma.enable("explicit-result-guard")

/**
 * Given a list of promises, this returns a promise for the list of
 * the resolution of these promises.
 * <p>
 * Unlike promiseAllFulfilled, if any of the promises become broken, then
 * only that entry in the result list is broken.
 *
 * @author Mark S. Miller
 * @author modified by Kevin Reid
 * @author modified by Mark S. Miller
 */
def promiseAllResolved {
    to run(promises) :any {
        var countDown := promises.size()
        if (countDown == 0) { return promises }
        def [result, resolver] := Ref.promise()
        for prom in promises {
            # using Ref.whenResolved directly because the catch/throw behavior
            # of the 'when' construct is undesirable.
            Ref.whenResolved(prom, def done(_) :void {
                if ((countDown -= 1) <= 0) {
                    resolver.resolve(promises)
                } else {
                    resolver.gettingCloser()
                }
            })
        }
        return result
    }

    /**
     * Return the original list iff all values are resolved, otherwise act as
     * run/1.
     */
    to orNow(refs) :any {
        for r in refs {
            if (!Ref.isResolved(r)) {
                return promiseAllResolved(refs)
            }
        }
        return refs
    }
}

    ? pragma.syntax("0.9")
    ? def promiseAllResolved := <elang:interp.promiseAllResolved>
    # value: <promiseAllResolved>

    ? def a := promiseAllResolved([1, 2, 3])
    # value: <Promise>

    ? interp.waitAtTop(a)
    ? a
    # value: [1, 2, 3]

    ? def a := promiseAllResolved([def x; x, def y; y, def z; z])
    # value: <Promise>

    ? bind x := 4
    # value: 4

    ? a
    # value: <Promise>

    ? bind y := Ref.broken("boom")
    # value: <ref broken by problem: boom>

    ? a
    # value: <Promise>

    ? bind z := [a]
    # value: [<Promise>]

    ? interp.waitAtTop(timer.whenPast(timer.now() + 100, fn{}))
    ? a
    # value: [4, <ref broken by problem: boom>, [<***CYCLE***>]]
