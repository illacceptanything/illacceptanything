#!/usr/bin/env rune

pragma.syntax("0.8")

# Copyright 2002 Combex, Inc. under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

/**
 * Given a list of promises, this returns a promise for the list of
 * the fulfillment of these promises.
 * <p>
 * If all the elements of the list become fulfilled, then the
 * resolution is this list. If instead any of these promises becomes
 * broken, then we break our returned promise with this problem. If
 * one of the promises is or becomes fulfilled and then broken, it may
 * be counted as either fulfilled or broken.
 *
 * @author Mark S. Miller
 */
def promiseAllFulfilled0(promises) :any {
    var countDown := promises.size()
    if (countDown == 0) { return promises }
    def [result, resolver] := Ref.promise()
    for prom in promises {
        # using Ref.whenResolvedOnly directly because the catch/throw behavior
        # of the 'when' construct is undesirable. (Thanks to Kevin Reid for
        # the suggestion)
        Ref.whenResolvedOnly(prom, def done(_) :void {
            if (Ref.isBroken(prom)) {
                resolver.resolve(prom, false)
            } else if ((countDown -= 1) <= 0) {
                resolver.resolve(promises)
            } else {
                resolver.gettingCloser()
            }
        })
    }
    return result
}
