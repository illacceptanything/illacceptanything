{
    "project": {
        "name": "Docs",
        "description": "Docs"
    },
    "files": {
        "..\\..\\polymer-dev\\src\\declaration\\styles.js": {
            "name": "..\\..\\polymer-dev\\src\\declaration\\styles.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\polymer-dev\\src\\instance\\styles.js": {
            "name": "..\\..\\polymer-dev\\src\\instance\\styles.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "..\\..\\polymer-dev\\src\\instance\\utils.js": {
            "name": "..\\..\\polymer-dev\\src\\instance\\utils.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {},
    "classitems": [
        {
            "file": "..\\..\\polymer-dev\\src\\declaration\\styles.js",
            "line": 22,
            "description": "Install external stylesheets loaded in <element> elements into the \nelement's template.",
            "params": [
                {
                    "name": "elementElement",
                    "description": "The <element> element to style."
                }
            ],
            "class": ""
        },
        {
            "file": "..\\..\\polymer-dev\\src\\declaration\\styles.js",
            "line": 33,
            "description": "Remove all sheets from element and store for later use.",
            "class": ""
        },
        {
            "file": "..\\..\\polymer-dev\\src\\declaration\\styles.js",
            "line": 52,
            "description": "Takes external stylesheets loaded in an <element> element and moves\ntheir content into a <style> element inside the <element>'s template.\nThe sheet is then removed from the <element>. This is done only so \nthat if the element is loaded in the main document, the sheet does\nnot become active.\nNote, ignores sheets with the attribute 'polymer-scope'.",
            "params": [
                {
                    "name": "elementElement",
                    "description": "The <element> element to style."
                }
            ],
            "class": ""
        },
        {
            "file": "..\\..\\polymer-dev\\src\\declaration\\styles.js",
            "line": 89,
            "description": "Promotes external stylesheets and <style> elements with the attribute \npolymer-scope='global' into global scope.\nThis is particularly useful for defining @keyframe rules which \ncurrently do not function in scoped or shadow style elements.\n(See wkb.ug/72462)",
            "params": [
                {
                    "name": "elementElement",
                    "description": "The <element> element to style."
                }
            ],
            "class": ""
        },
        {
            "file": "..\\..\\polymer-dev\\src\\instance\\styles.js",
            "line": 19,
            "description": "Installs external stylesheets and <style> elements with the attribute \npolymer-scope='controller' into the scope of element. This is intended\nto be a called during custom element construction. Note, this incurs a \nper instance cost and should be used sparingly.\n\nThe need for this type of styling should go away when the shadowDOM spec\naddresses these issues:\n\nhttps://www.w3.org/Bugs/Public/show_bug.cgi?id=21391\nhttps://www.w3.org/Bugs/Public/show_bug.cgi?id=21390\nhttps://www.w3.org/Bugs/Public/show_bug.cgi?id=21389",
            "params": [
                {
                    "name": "element",
                    "description": "The custom element instance into whose controller (parent)\nscope styles will be installed."
                },
                {
                    "name": "elementElement",
                    "description": "The <element> containing controller styles."
                }
            ],
            "class": ""
        },
        {
            "file": "..\\..\\polymer-dev\\src\\instance\\utils.js",
            "line": 9,
            "description": "Invokes a function asynchronously. The context of the callback\nfunction is bound to 'this' automatically.",
            "itemtype": "method",
            "name": "async",
            "params": [
                {
                    "name": "method",
                    "description": "",
                    "type": "Function|String"
                },
                {
                    "name": "args",
                    "description": "",
                    "type": "Any|Array"
                },
                {
                    "name": "timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": ""
        },
        {
            "file": "..\\..\\polymer-dev\\src\\instance\\utils.js",
            "line": 30,
            "description": "Fire an event.",
            "itemtype": "method",
            "name": "fire",
            "params": [
                {
                    "name": "type",
                    "description": "An event name.",
                    "type": "String"
                },
                {
                    "name": "detail",
                    "description": ""
                },
                {
                    "name": "toNode",
                    "description": "Target node.",
                    "type": "Node"
                }
            ],
            "class": ""
        },
        {
            "file": "..\\..\\polymer-dev\\src\\instance\\utils.js",
            "line": 47,
            "description": "Fire an event asynchronously.",
            "itemtype": "method",
            "name": "asyncFire",
            "params": [
                {
                    "name": "type",
                    "description": "An event name.",
                    "type": "String"
                },
                {
                    "name": "detail",
                    "description": ""
                },
                {
                    "name": "toNode",
                    "description": "Target node.",
                    "type": "Node"
                }
            ],
            "class": ""
        },
        {
            "file": "..\\..\\polymer-dev\\src\\instance\\utils.js",
            "line": 57,
            "description": "Remove class from old, add class to anew, if they exist",
            "params": [
                {
                    "name": "classFollows",
                    "description": ""
                },
                {
                    "name": "anew",
                    "description": "A node."
                },
                {
                    "name": "old",
                    "description": "A node"
                },
                {
                    "name": "className",
                    "description": ""
                }
            ],
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nInstall external stylesheets loaded in <element> elements into the \nelement's template.",
            "line": " ..\\..\\polymer-dev\\src\\declaration\\styles.js:22"
        },
        {
            "message": "Missing item type\nRemove all sheets from element and store for later use.",
            "line": " ..\\..\\polymer-dev\\src\\declaration\\styles.js:33"
        },
        {
            "message": "Missing item type\nTakes external stylesheets loaded in an <element> element and moves\ntheir content into a <style> element inside the <element>'s template.\nThe sheet is then removed from the <element>. This is done only so \nthat if the element is loaded in the main document, the sheet does\nnot become active.\nNote, ignores sheets with the attribute 'polymer-scope'.",
            "line": " ..\\..\\polymer-dev\\src\\declaration\\styles.js:52"
        },
        {
            "message": "Missing item type\nPromotes external stylesheets and <style> elements with the attribute \npolymer-scope='global' into global scope.\nThis is particularly useful for defining @keyframe rules which \ncurrently do not function in scoped or shadow style elements.\n(See wkb.ug/72462)",
            "line": " ..\\..\\polymer-dev\\src\\declaration\\styles.js:89"
        },
        {
            "message": "Missing item type\nInstalls external stylesheets and <style> elements with the attribute \npolymer-scope='controller' into the scope of element. This is intended\nto be a called during custom element construction. Note, this incurs a \nper instance cost and should be used sparingly.\n\nThe need for this type of styling should go away when the shadowDOM spec\naddresses these issues:\n\nhttps://www.w3.org/Bugs/Public/show_bug.cgi?id=21391\nhttps://www.w3.org/Bugs/Public/show_bug.cgi?id=21390\nhttps://www.w3.org/Bugs/Public/show_bug.cgi?id=21389",
            "line": " ..\\..\\polymer-dev\\src\\instance\\styles.js:19"
        },
        {
            "message": "Missing item type\nRemove class from old, add class to anew, if they exist",
            "line": " ..\\..\\polymer-dev\\src\\instance\\utils.js:57"
        }
    ]
}