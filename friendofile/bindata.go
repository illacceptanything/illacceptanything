package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _static_index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\xdd\x6f\xdb\x36\x10\x7f\xee\x80\xfd\x0f\x57\x35\x80\x93\x22\x92\xda\x62\x0f\x83\x63\x79\x48\x1c\x77\x30\x96\xd5\x81\x63\xaf\xeb\x53\x41\x49\xb4\xc4\x94\x22\x55\x92\x4a\xe2\x0d\xfb\xdf\x77\x24\xf5\xe1\x38\x09\xb0\x97\x01\x89\xc5\x8f\xbb\xdf\x7d\xdf\xf1\xc7\x1f\x26\xaf\x2f\x97\xb3\xf5\x97\xeb\x39\x94\xa6\xe2\x53\x3c\xb0\x5f\xe0\x44\x14\x49\x40\x45\x80\x27\x00\x93\x92\x92\xdc\xad\x70\x5d\x51\x43\x20\x2b\x89\xd2\xd4\x24\x41\x63\xb6\xe1\xcf\xc1\xa3\xbb\xd2\x98\x3a\xa4\xdf\x1b\x76\x97\x04\x7f\x86\x9b\xf3\x70\x26\xab\x9a\x18\x96\x72\x1a\x40\x26\x85\xa1\x02\x19\x17\xf3\x84\xe6\x05\x7d\xcc\x2a\x48\x45\x93\xe0\x8e\xd1\xfb\x5a\x2a\xb3\x47\x7d\xcf\x72\x53\x26\x39\xbd\x63\x19\x0d\xdd\xe6\x14\x98\x60\x86\x11\x1e\xea\x8c\x70\x9a\xbc\x7f\x0e\x29\xa7\x3a\x53\xac\x36\x4c\x8a\x3d\xb0\xe7\x28\x49\x63\x4a\xa9\x9e\x23\xe2\x4c\x7c\x03\x45\x79\x12\xb0\xcc\xc2\x94\x8a\x6e\x93\x20\x8a\x62\xfc\xdb\x92\x3b\x7b\x18\xe1\x8f\xa5\x6f\x39\x0c\x33\x9c\x4e\x8f\xae\x37\x17\x57\x8b\xd9\xd7\xcd\xea\x0a\x3e\x2e\xae\xe6\x37\x93\xd8\x5f\xf4\x74\xaf\xc3\x10\x2e\xa4\x34\xda\x28\x52\xa3\x64\x45\x61\x76\x73\x03\x61\x88\x24\xaf\xdc\xed\x7a\x79\xb9\x1c\x43\xdd\x70\x0e\x5b\x25\x2b\x10\x05\x13\x0f\x68\xb8\x36\x18\x90\xd7\x9e\x72\x50\xd2\x6b\x16\xa7\x1d\x64\x9c\x69\x3d\xec\xa2\x8a\x89\x08\x4f\x02\x6f\x8c\x36\x3b\x4e\x75\x49\xa9\x09\x9c\xb8\x97\x11\xb6\x8c\x53\x26\xea\xc6\x0c\x08\x15\xcd\x19\x41\xa7\x71\xfe\x14\x0d\xcc\xae\x46\x87\x1a\xfa\x60\x2c\xfb\x21\xfa\x28\x8e\xb7\xe8\x63\x1d\x15\x52\x16\x9c\x92\x9a\xe9\x28\x93\x95\x25\xfd\x65\x4b\x2a\xc6\x77\xc9\xa7\x06\x23\x2b\x47\x0e\x79\x34\x20\x8f\x3c\xf2\xa8\x43\x1e\x0d\x9e\x74\x44\xcf\x09\x06\x48\x65\xbe\x83\xbf\x71\xf9\xca\x8a\x0d\xbd\x88\x31\x78\x19\xa7\xa0\x89\xd0\xa1\xa6\x8a\x6d\xcf\x1c\xf9\x3f\xf8\xeb\x16\x11\x67\xda\x84\x85\x92\x4d\x1d\x32\x43\x2b\x8f\x11\xbf\x2d\x29\x2b\x4a\x33\x86\x9f\xa2\x0f\xb4\x3a\x7b\x1b\xf7\xc8\x9a\xfd\x45\xc7\xce\x33\x4d\x75\x80\x15\xbf\x8d\x52\x23\x3c\x98\xc7\xa9\xa5\x66\x36\x2b\xc7\x40\x52\x2d\x79\x63\xa8\x65\x79\xa5\x3c\xf6\x7b\xda\x21\x38\xfc\x49\xec\xec\x6b\xcd\x9d\xc4\x6d\x35\xba\x8d\x35\x6f\xf0\x83\x20\x77\x90\x71\xa2\x75\x12\xe0\x32\x25\x0a\xfc\x27\xcc\xe9\x96\x34\xdc\xb4\x3e\x99\xe4\xac\xa7\xb3\x09\x4f\x98\xa0\x2a\xdc\xf2\x86\xe5\x2d\x45\x97\x9d\x8a\x88\x1c\xec\xbf\x91\x05\x46\x0b\x0a\x6a\xc0\x99\x41\x73\xd8\x4a\x05\x29\x35\x86\x2a\xa8\x64\x8a\x49\x02\x39\xd3\x35\x27\xbb\x36\x83\x1d\xca\x9e\xa4\x56\x15\xab\x3d\x55\xbd\x1c\x6b\x43\x63\x8c\x14\x6d\xf8\xfc\x26\x38\x60\x6a\xc5\x67\x92\x73\x52\x6b\x9a\x07\x90\x13\x43\xda\x63\x6b\x84\x3f\xef\x8e\x89\x2a\x6c\x73\x7a\x93\xea\x90\x3e\x90\xaa\xe6\x34\x6c\x81\x3a\xca\xf0\xfd\x9e\x06\x36\x83\x6a\x22\x3a\x99\x5a\x85\x52\xf0\x5d\x30\x5d\x7b\xa9\xc8\xca\x0a\x62\xc3\x85\x91\x40\xba\x17\x19\x6d\x2f\x08\x51\x4a\x30\xfd\xff\x09\x27\xb1\xf7\xd4\xde\x09\x39\x70\x5a\x6a\xa3\xd7\x35\xac\x38\xd8\xef\x48\x93\x98\xf4\x21\x8a\x31\x46\x76\xe3\x5b\xce\x05\x33\x1a\x4c\x49\x0c\x60\x86\x62\xab\xc1\x35\xc5\xac\x16\x4d\x04\x33\xab\x57\xeb\x3f\xc0\x80\xf9\xa8\x47\x2f\x84\xbb\xa7\x3c\xf0\x7c\x00\x2c\xc7\x30\xff\xb7\xc8\x4c\x1a\xbe\x67\x54\x07\x85\x1f\x47\x83\x2a\xd7\x87\x89\x82\xd5\x8f\x96\x5e\x2e\x6e\x7e\xfb\x7a\x73\x7d\x3e\x9b\x63\x17\xa9\x30\xbf\x99\x28\x26\x71\xed\x98\xac\xc9\x0d\x7f\x6c\xbe\x33\x3d\x8e\x0e\x54\xe9\x2d\x7b\x44\x74\x50\x31\x2d\x91\xa7\x93\xbd\xba\xa9\xc2\x3c\xcf\x54\x53\xa5\xbd\x39\x47\x17\xab\xf9\xf9\xe5\x6c\xb5\xf9\xfd\xa2\x45\x95\x4e\x8d\x49\x8c\x72\x5d\x11\xfb\x10\x7c\xb4\xb5\xd4\xd4\x5c\x92\xdc\xcd\x23\x85\xa8\x43\xab\x7f\xae\x76\xbd\x4f\x3d\x0b\xe1\x52\x14\x01\xb8\x96\x81\x13\xd0\x97\xe4\x18\x84\x14\xb4\x2b\x7f\xd7\xcd\xf7\x58\x82\x76\x08\x76\x3b\x5f\x89\xb6\xef\x63\xab\xc7\xb6\xc1\x30\x4c\x89\x51\x0d\xed\x04\xdb\xab\xd0\xd2\xa2\x5b\x3b\xd0\xba\x13\xf9\xb4\x1b\x06\xd3\xc5\xd6\xe6\x91\xa2\x23\x0d\x84\x5b\xcf\xec\x80\x80\x45\x81\x7b\x66\x4a\x97\x63\x1a\x55\x70\x7a\x9c\x62\x47\x98\x7e\x59\x6e\xe0\xf3\xe2\xea\x0a\x96\x7f\xcc\x57\x9f\x57\x8b\xf5\x1c\x16\x6b\xcc\xf9\x69\xe4\xc3\xf8\x28\x73\xad\xe3\x32\x9c\xda\x54\x39\x77\xb6\xfd\xa4\x0b\x84\x11\x60\xbb\xaf\x6e\xb2\x8c\xda\xe1\x35\xd8\xdd\xf5\x1a\x29\x32\xce\xb2\x6f\x49\x70\x4b\xee\x88\x7f\x31\x8c\x8f\x8e\x47\x6f\xf6\x1c\x3a\x3a\x89\x74\x29\xef\x8f\x4f\xce\x86\x0b\xcf\x8e\x37\x25\xcb\x29\xde\x60\x91\xee\xd7\x6e\xc1\x77\x75\x69\x0b\x18\xfa\x55\x48\x94\x92\xf7\x61\x53\xf7\xf5\x0c\x1b\x07\xb5\x5f\xcd\x93\x78\xb0\xc5\x6e\xcb\x7e\x65\x93\xe3\x92\x29\x9a\x19\xa9\x76\x60\x07\x14\xfa\xbf\x7b\x2f\x3c\x9b\x17\x43\x66\x0e\x85\x34\x0c\x36\x5f\x44\x58\x2c\xab\xf9\x6c\xbd\x5c\x7d\xf9\x7a\xb5\xb8\x59\x2f\x3e\xfd\xda\x66\xa7\x2b\x92\xa7\xae\xb6\xc2\xbc\x93\x40\xab\x0c\x3b\x4b\x4c\x6e\xc9\xc3\xe1\x3c\xb7\x67\x31\x67\xa9\x8e\x6f\xbf\x37\x54\xed\xe2\x0f\xd1\xbb\xe8\x5d\xbb\x71\x2f\x89\x5b\xed\xbc\xe0\x90\xa6\x4f\x40\x87\x37\xc8\xed\xe1\x13\xe4\x05\x46\x9f\x87\x47\xc7\x41\x1b\x9e\xe0\x24\xea\xf9\x8e\xdd\xd4\xf5\xe7\x1b\xc5\xc7\x30\x3a\xda\x5c\x5f\x2d\xcf\x2f\x6d\x33\x1c\x9d\x0e\x97\xe7\x7a\x27\xb2\x31\xd8\x64\x77\xa7\x15\x79\xb0\xe5\x38\x93\x8d\xb0\x83\xf9\x9d\x1f\xcb\x27\x67\x7e\x2c\x77\x72\xfd\x5c\x6e\x67\x31\x0e\x68\xfb\x94\xfe\x37\x00\x00\xff\xff\xcd\xa9\x96\x87\x5c\x0b\x00\x00")

func static_index_html_bytes() ([]byte, error) {
	return bindata_read(
		_static_index_html,
		"static/index.html",
	)
}

func static_index_html() (*asset, error) {
	bytes, err := static_index_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "static/index.html", size: 2908, mode: os.FileMode(438), modTime: time.Unix(1428494750, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _static_path_htmlpart = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x90\x3f\x6b\x03\x21\x18\xc6\x67\x0b\xfd\x0e\x56\x32\xb4\x83\xb8\x17\x23\x84\xe6\x4a\x8f\x26\x77\x85\x66\xea\x12\x4c\xce\x78\x82\x51\xd1\x37\x09\xf7\xed\xeb\xc5\x0b\x74\xe8\xd2\x3a\xf9\xe8\xf3\xfc\xde\x3f\x08\xe7\xc3\xad\xc1\x7b\x2b\x53\x9a\x13\x6b\x12\x50\x1d\xfd\x29\x50\x03\xea\x48\xc4\xfd\x1d\x42\x88\x4b\xdc\x47\x75\x98\x93\xd9\xc7\x62\xf3\xb6\x5d\xd5\xcd\x3b\x11\x3c\x05\xe9\x6e\x39\x6d\x87\xd0\x9b\xbd\x77\xb8\x58\xea\x97\xb6\xc9\x16\x36\x7a\xc4\xf4\xd6\x2c\xd6\x15\x67\x72\x42\x3e\x50\xca\x3b\x73\xbe\x01\x76\xe0\x4a\x5d\x82\xa3\xb7\x2a\x13\xaf\xa2\x98\x11\xdf\x9d\x00\x32\x1c\x86\x90\xbf\x8a\x20\x3f\xa2\x78\x8c\x87\x68\x8e\x32\x0e\x44\x2c\xfd\xc5\x59\x2f\x3b\xce\x8a\xf3\x2f\x90\x8b\x8c\xce\x38\x4d\xc4\xda\x9f\x15\x7e\xdc\xb4\xcb\xf6\xe9\x3f\x9c\x4e\x3a\xad\x62\xee\x45\x59\x05\xbf\x83\x38\xcb\xf3\x0b\x4a\x27\x75\x5d\x67\x82\x61\x1c\xfe\x90\xdb\x87\x67\x1c\x8d\xee\x81\x88\xd9\x6b\xbd\xaa\xb6\x9f\xf5\x57\x35\x2d\x74\x0c\x70\x66\x4d\xbe\x7c\x07\x00\x00\xff\xff\x0d\xd0\xc9\xbd\xc1\x01\x00\x00")

func static_path_htmlpart_bytes() ([]byte, error) {
	return bindata_read(
		_static_path_htmlpart,
		"static/path.htmlpart",
	)
}

func static_path_htmlpart() (*asset, error) {
	bytes, err := static_path_htmlpart_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "static/path.htmlpart", size: 449, mode: os.FileMode(438), modTime: time.Unix(1428494567, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": static_index_html,
	"static/path.htmlpart": static_path_htmlpart,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"static/index.html": &_bintree_t{static_index_html, map[string]*_bintree_t{
	}},
	"static/path.htmlpart": &_bintree_t{static_path_htmlpart, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

