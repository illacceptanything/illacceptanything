{
    "project": {
        "name": "The Ember API",
        "description": "The Ember API: a framework for building ambitious web applications",
        "url": "http://emberjs.com/",
        "version": "1.11.1"
    },
    "files": {
        "bower_components/rsvp/lib/rsvp/promise/all.js": {
            "name": "bower_components/rsvp/lib/rsvp/promise/all.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "bower_components/rsvp/lib/rsvp/promise/race.js": {
            "name": "bower_components/rsvp/lib/rsvp/promise/race.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "bower_components/rsvp/lib/rsvp/promise/reject.js": {
            "name": "bower_components/rsvp/lib/rsvp/promise/reject.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "bower_components/rsvp/lib/rsvp/promise/resolve.js": {
            "name": "bower_components/rsvp/lib/rsvp/promise/resolve.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "bower_components/rsvp/lib/rsvp/all-settled.js": {
            "name": "bower_components/rsvp/lib/rsvp/all-settled.js",
            "modules": {},
            "classes": {},
            "fors": {
                "RSVP": 1
            },
            "namespaces": {}
        },
        "bower_components/rsvp/lib/rsvp/all.js": {
            "name": "bower_components/rsvp/lib/rsvp/all.js",
            "modules": {},
            "classes": {},
            "fors": {
                "RSVP": 1
            },
            "namespaces": {}
        },
        "bower_components/rsvp/lib/rsvp/defer.js": {
            "name": "bower_components/rsvp/lib/rsvp/defer.js",
            "modules": {},
            "classes": {},
            "fors": {
                "RSVP": 1
            },
            "namespaces": {}
        },
        "bower_components/rsvp/lib/rsvp/events.js": {
            "name": "bower_components/rsvp/lib/rsvp/events.js",
            "modules": {},
            "classes": {
                "RSVP.EventTarget": 1
            },
            "fors": {
                "RSVP.EventTarget": 1
            },
            "namespaces": {}
        },
        "bower_components/rsvp/lib/rsvp/filter.js": {
            "name": "bower_components/rsvp/lib/rsvp/filter.js",
            "modules": {},
            "classes": {},
            "fors": {
                "RSVP": 1
            },
            "namespaces": {}
        },
        "bower_components/rsvp/lib/rsvp/hash-settled.js": {
            "name": "bower_components/rsvp/lib/rsvp/hash-settled.js",
            "modules": {},
            "classes": {},
            "fors": {
                "RSVP": 1
            },
            "namespaces": {}
        },
        "bower_components/rsvp/lib/rsvp/hash.js": {
            "name": "bower_components/rsvp/lib/rsvp/hash.js",
            "modules": {},
            "classes": {},
            "fors": {
                "RSVP": 1
            },
            "namespaces": {}
        },
        "bower_components/rsvp/lib/rsvp/map.js": {
            "name": "bower_components/rsvp/lib/rsvp/map.js",
            "modules": {},
            "classes": {},
            "fors": {
                "RSVP": 1
            },
            "namespaces": {}
        },
        "bower_components/rsvp/lib/rsvp/node.js": {
            "name": "bower_components/rsvp/lib/rsvp/node.js",
            "modules": {},
            "classes": {},
            "fors": {
                "RSVP": 1
            },
            "namespaces": {}
        },
        "bower_components/rsvp/lib/rsvp/promise.js": {
            "name": "bower_components/rsvp/lib/rsvp/promise.js",
            "modules": {},
            "classes": {
                "RSVP.Promise": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "bower_components/rsvp/lib/rsvp/race.js": {
            "name": "bower_components/rsvp/lib/rsvp/race.js",
            "modules": {},
            "classes": {},
            "fors": {
                "RSVP": 1
            },
            "namespaces": {}
        },
        "bower_components/rsvp/lib/rsvp/reject.js": {
            "name": "bower_components/rsvp/lib/rsvp/reject.js",
            "modules": {},
            "classes": {},
            "fors": {
                "RSVP": 1
            },
            "namespaces": {}
        },
        "bower_components/rsvp/lib/rsvp/resolve.js": {
            "name": "bower_components/rsvp/lib/rsvp/resolve.js",
            "modules": {},
            "classes": {},
            "fors": {
                "RSVP": 1
            },
            "namespaces": {}
        },
        "bower_components/rsvp/lib/rsvp/rethrow.js": {
            "name": "bower_components/rsvp/lib/rsvp/rethrow.js",
            "modules": {},
            "classes": {},
            "fors": {
                "RSVP": 1
            },
            "namespaces": {}
        },
        "packages/ember-application/lib/ext/controller.js": {
            "name": "packages/ember-application/lib/ext/controller.js",
            "modules": {
                "ember-application": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-application/lib/system/application-instance.js": {
            "name": "packages/ember-application/lib/system/application-instance.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-application/lib/system/application.js": {
            "name": "packages/ember-application/lib/system/application.js",
            "modules": {},
            "classes": {
                "Ember.Application": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-application/lib/system/resolver.js": {
            "name": "packages/ember-application/lib/system/resolver.js",
            "modules": {},
            "classes": {
                "Ember.DefaultResolver": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-application/lib/main.js": {
            "name": "packages/ember-application/lib/main.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-debug/lib/main.js": {
            "name": "packages/ember-debug/lib/main.js",
            "modules": {
                "ember-debug": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-extension-support/lib/container_debug_adapter.js": {
            "name": "packages/ember-extension-support/lib/container_debug_adapter.js",
            "modules": {
                "ember-extension-support": 1
            },
            "classes": {
                "Ember.ContainerDebugAdapter": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-extension-support/lib/data_adapter.js": {
            "name": "packages/ember-extension-support/lib/data_adapter.js",
            "modules": {},
            "classes": {
                "Ember.DataAdapter": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-extension-support/lib/main.js": {
            "name": "packages/ember-extension-support/lib/main.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/compat/handlebars-get.js": {
            "name": "packages/ember-htmlbars/lib/compat/handlebars-get.js",
            "modules": {
                "ember-htmlbars": 1
            },
            "classes": {},
            "fors": {
                "Ember.Handlebars": 1
            },
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/compat/helper.js": {
            "name": "packages/ember-htmlbars/lib/compat/helper.js",
            "modules": {},
            "classes": {
                "HandlebarsCompatibleHelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/compat/make-bound-helper.js": {
            "name": "packages/ember-htmlbars/lib/compat/make-bound-helper.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Handlebars": 1
            },
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/compat/register-bound-helper.js": {
            "name": "packages/ember-htmlbars/lib/compat/register-bound-helper.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Handlebars": 1
            },
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/helpers/bind-attr.js": {
            "name": "packages/ember-htmlbars/lib/helpers/bind-attr.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Handlebars.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/helpers/collection.js": {
            "name": "packages/ember-htmlbars/lib/helpers/collection.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Handlebars.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/helpers/component.js": {
            "name": "packages/ember-htmlbars/lib/helpers/component.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Handlebars.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/helpers/debugger.js": {
            "name": "packages/ember-htmlbars/lib/helpers/debugger.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Handlebars.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/helpers/each.js": {
            "name": "packages/ember-htmlbars/lib/helpers/each.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Handlebars.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/helpers/if_unless.js": {
            "name": "packages/ember-htmlbars/lib/helpers/if_unless.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Handlebars.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/helpers/input.js": {
            "name": "packages/ember-htmlbars/lib/helpers/input.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Handlebars.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/helpers/loc.js": {
            "name": "packages/ember-htmlbars/lib/helpers/loc.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Handlebars.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/helpers/log.js": {
            "name": "packages/ember-htmlbars/lib/helpers/log.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Handlebars.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/helpers/partial.js": {
            "name": "packages/ember-htmlbars/lib/helpers/partial.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Handlebars.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/helpers/template.js": {
            "name": "packages/ember-htmlbars/lib/helpers/template.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Handlebars.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/helpers/text_area.js": {
            "name": "packages/ember-htmlbars/lib/helpers/text_area.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Handlebars.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/helpers/unbound.js": {
            "name": "packages/ember-htmlbars/lib/helpers/unbound.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Handlebars.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/helpers/view.js": {
            "name": "packages/ember-htmlbars/lib/helpers/view.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Handlebars.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/helpers/with.js": {
            "name": "packages/ember-htmlbars/lib/helpers/with.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Handlebars.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/helpers/yield.js": {
            "name": "packages/ember-htmlbars/lib/helpers/yield.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Handlebars.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/hooks/attribute.js": {
            "name": "packages/ember-htmlbars/lib/hooks/attribute.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/hooks/block.js": {
            "name": "packages/ember-htmlbars/lib/hooks/block.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/hooks/component.js": {
            "name": "packages/ember-htmlbars/lib/hooks/component.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/hooks/concat.js": {
            "name": "packages/ember-htmlbars/lib/hooks/concat.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/hooks/content.js": {
            "name": "packages/ember-htmlbars/lib/hooks/content.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/hooks/element.js": {
            "name": "packages/ember-htmlbars/lib/hooks/element.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/hooks/get.js": {
            "name": "packages/ember-htmlbars/lib/hooks/get.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/hooks/inline.js": {
            "name": "packages/ember-htmlbars/lib/hooks/inline.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/hooks/set.js": {
            "name": "packages/ember-htmlbars/lib/hooks/set.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/hooks/subexpr.js": {
            "name": "packages/ember-htmlbars/lib/hooks/subexpr.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/system/append-templated-view.js": {
            "name": "packages/ember-htmlbars/lib/system/append-templated-view.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/system/bootstrap.js": {
            "name": "packages/ember-htmlbars/lib/system/bootstrap.js",
            "modules": {
                "ember-handlebars": 1
            },
            "classes": {},
            "fors": {
                "Ember.Handlebars": 1
            },
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/system/helper.js": {
            "name": "packages/ember-htmlbars/lib/system/helper.js",
            "modules": {},
            "classes": {
                "Ember.HTMLBars.Helper": 1
            },
            "fors": {},
            "namespaces": {
                "Ember.HTMLBars": 1
            }
        },
        "packages/ember-htmlbars/lib/system/lookup-helper.js": {
            "name": "packages/ember-htmlbars/lib/system/lookup-helper.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/system/make-view-helper.js": {
            "name": "packages/ember-htmlbars/lib/system/make-view-helper.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/system/make_bound_helper.js": {
            "name": "packages/ember-htmlbars/lib/system/make_bound_helper.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.HTMLBars": 1
            },
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/utils/string.js": {
            "name": "packages/ember-htmlbars/lib/utils/string.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.String": 1,
                "String": 1
            },
            "namespaces": {}
        },
        "packages/ember-htmlbars/lib/helpers.js": {
            "name": "packages/ember-htmlbars/lib/helpers.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.HTMLBars": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/platform/create.js": {
            "name": "packages/ember-metal/lib/platform/create.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-metal/lib/platform/define_property.js": {
            "name": "packages/ember-metal/lib/platform/define_property.js",
            "modules": {},
            "classes": {
                "Ember.platform": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-metal/lib/streams/stream.js": {
            "name": "packages/ember-metal/lib/streams/stream.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-metal/lib/array.js": {
            "name": "packages/ember-metal/lib/array.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-metal/lib/binding.js": {
            "name": "packages/ember-metal/lib/binding.js",
            "modules": {},
            "classes": {
                "Ember.Binding": 1
            },
            "fors": {
                "Ember": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-metal/lib/computed.js": {
            "name": "packages/ember-metal/lib/computed.js",
            "modules": {},
            "classes": {
                "Ember.ComputedProperty": 1,
                "Ember.computed": 1
            },
            "fors": {
                "Ember": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-metal/lib/computed_macros.js": {
            "name": "packages/ember-metal/lib/computed_macros.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.computed": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/core.js": {
            "name": "packages/ember-metal/lib/core.js",
            "modules": {},
            "classes": {
                "Ember": 1,
                "Ember.FEATURES": 1
            },
            "fors": {
                "Ember.FEATURES": 1,
                "Ember": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-metal/lib/dependent_keys.js": {
            "name": "packages/ember-metal/lib/dependent_keys.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-metal/lib/deprecate_property.js": {
            "name": "packages/ember-metal/lib/deprecate_property.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-metal/lib/enumerable_utils.js": {
            "name": "packages/ember-metal/lib/enumerable_utils.js",
            "modules": {},
            "classes": {
                "Ember.EnumerableUtils": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-metal/lib/error.js": {
            "name": "packages/ember-metal/lib/error.js",
            "modules": {},
            "classes": {
                "Ember.Error": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-metal/lib/events.js": {
            "name": "packages/ember-metal/lib/events.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/expand_properties.js": {
            "name": "packages/ember-metal/lib/expand_properties.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-metal/lib/get_properties.js": {
            "name": "packages/ember-metal/lib/get_properties.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/injected_property.js": {
            "name": "packages/ember-metal/lib/injected_property.js",
            "modules": {},
            "classes": {
                "Ember.InjectedProperty": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-metal/lib/instrumentation.js": {
            "name": "packages/ember-metal/lib/instrumentation.js",
            "modules": {},
            "classes": {
                "Ember.Instrumentation": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1,
                "Ember.Instrumentation": 1
            }
        },
        "packages/ember-metal/lib/is_blank.js": {
            "name": "packages/ember-metal/lib/is_blank.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/is_empty.js": {
            "name": "packages/ember-metal/lib/is_empty.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/is_none.js": {
            "name": "packages/ember-metal/lib/is_none.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/is_present.js": {
            "name": "packages/ember-metal/lib/is_present.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/keys.js": {
            "name": "packages/ember-metal/lib/keys.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/libraries.js": {
            "name": "packages/ember-metal/lib/libraries.js",
            "modules": {},
            "classes": {
                "Libraries": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-metal/lib/logger.js": {
            "name": "packages/ember-metal/lib/logger.js",
            "modules": {},
            "classes": {
                "Ember.Logger": 1
            },
            "fors": {
                "Ember.Logger": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-metal/lib/main.js": {
            "name": "packages/ember-metal/lib/main.js",
            "modules": {},
            "classes": {
                "Backburner": 1
            },
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/map.js": {
            "name": "packages/ember-metal/lib/map.js",
            "modules": {},
            "classes": {
                "Ember.OrderedSet": 1,
                "Ember.Map": 1,
                "Ember.MapWithDefault": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-metal/lib/merge.js": {
            "name": "packages/ember-metal/lib/merge.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/mixin.js": {
            "name": "packages/ember-metal/lib/mixin.js",
            "modules": {},
            "classes": {
                "Ember.Mixin": 1
            },
            "fors": {
                "Ember": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-metal/lib/observer.js": {
            "name": "packages/ember-metal/lib/observer.js",
            "modules": {
                "ember-metal": 1
            },
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/properties.js": {
            "name": "packages/ember-metal/lib/properties.js",
            "modules": {},
            "classes": {
                "Ember.Descriptor": 1
            },
            "fors": {
                "Ember": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-metal/lib/property_events.js": {
            "name": "packages/ember-metal/lib/property_events.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/property_get.js": {
            "name": "packages/ember-metal/lib/property_get.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/property_set.js": {
            "name": "packages/ember-metal/lib/property_set.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/run_loop.js": {
            "name": "packages/ember-metal/lib/run_loop.js",
            "modules": {},
            "classes": {
                "Ember.run": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-metal/lib/set_properties.js": {
            "name": "packages/ember-metal/lib/set_properties.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-metal/lib/utils.js": {
            "name": "packages/ember-metal/lib/utils.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-metal/lib/watching.js": {
            "name": "packages/ember-metal/lib/watching.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-routing-htmlbars/lib/helpers/action.js": {
            "name": "packages/ember-routing-htmlbars/lib/helpers/action.js",
            "modules": {
                "ember-routing-htmlbars": 1
            },
            "classes": {},
            "fors": {
                "Ember.Handlebars.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-routing-htmlbars/lib/helpers/link-to.js": {
            "name": "packages/ember-routing-htmlbars/lib/helpers/link-to.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Handlebars.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-routing-htmlbars/lib/helpers/outlet.js": {
            "name": "packages/ember-routing-htmlbars/lib/helpers/outlet.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Handlebars.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-routing-htmlbars/lib/helpers/query-params.js": {
            "name": "packages/ember-routing-htmlbars/lib/helpers/query-params.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Handlebars.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-routing-htmlbars/lib/helpers/render.js": {
            "name": "packages/ember-routing-htmlbars/lib/helpers/render.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember.Handlebars.helpers": 1
            },
            "namespaces": {}
        },
        "packages/ember-routing-htmlbars/lib/main.js": {
            "name": "packages/ember-routing-htmlbars/lib/main.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-routing-views/lib/views/link.js": {
            "name": "packages/ember-routing-views/lib/views/link.js",
            "modules": {
                "ember-routing-views": 1
            },
            "classes": {
                "Ember.LinkView": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-routing-views/lib/views/outlet.js": {
            "name": "packages/ember-routing-views/lib/views/outlet.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-routing-views/lib/main.js": {
            "name": "packages/ember-routing-views/lib/main.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-routing/lib/ext/controller.js": {
            "name": "packages/ember-routing/lib/ext/controller.js",
            "modules": {
                "ember-routing": 1
            },
            "classes": {},
            "fors": {
                "Ember.ControllerMixin": 1
            },
            "namespaces": {}
        },
        "packages/ember-routing/lib/ext/run_loop.js": {
            "name": "packages/ember-routing/lib/ext/run_loop.js",
            "modules": {
                "ember-views": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-routing/lib/location/api.js": {
            "name": "packages/ember-routing/lib/location/api.js",
            "modules": {},
            "classes": {
                "Ember.Location": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-routing/lib/location/auto_location.js": {
            "name": "packages/ember-routing/lib/location/auto_location.js",
            "modules": {},
            "classes": {
                "Ember.AutoLocation": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-routing/lib/location/hash_location.js": {
            "name": "packages/ember-routing/lib/location/hash_location.js",
            "modules": {},
            "classes": {
                "Ember.HashLocation": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-routing/lib/location/history_location.js": {
            "name": "packages/ember-routing/lib/location/history_location.js",
            "modules": {},
            "classes": {
                "Ember.HistoryLocation": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-routing/lib/location/none_location.js": {
            "name": "packages/ember-routing/lib/location/none_location.js",
            "modules": {},
            "classes": {
                "Ember.NoneLocation": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-routing/lib/system/controller_for.js": {
            "name": "packages/ember-routing/lib/system/controller_for.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-routing/lib/system/dsl.js": {
            "name": "packages/ember-routing/lib/system/dsl.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-routing/lib/system/generate_controller.js": {
            "name": "packages/ember-routing/lib/system/generate_controller.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-routing/lib/system/route.js": {
            "name": "packages/ember-routing/lib/system/route.js",
            "modules": {},
            "classes": {
                "Ember.Route": 1
            },
            "fors": {
                "Ember.Route": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-routing/lib/system/router.js": {
            "name": "packages/ember-routing/lib/system/router.js",
            "modules": {},
            "classes": {
                "Ember.Router": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-routing/lib/main.js": {
            "name": "packages/ember-routing/lib/main.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-runtime/lib/computed/array_computed.js": {
            "name": "packages/ember-runtime/lib/computed/array_computed.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-runtime/lib/computed/reduce_computed.js": {
            "name": "packages/ember-runtime/lib/computed/reduce_computed.js",
            "modules": {},
            "classes": {
                "Ember.ReduceComputedProperty": 1
            },
            "fors": {
                "Ember": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/computed/reduce_computed_macros.js": {
            "name": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
            "modules": {
                "ember-runtime": 1
            },
            "classes": {},
            "fors": {
                "Ember.computed": 1
            },
            "namespaces": {}
        },
        "packages/ember-runtime/lib/controllers/array_controller.js": {
            "name": "packages/ember-runtime/lib/controllers/array_controller.js",
            "modules": {},
            "classes": {
                "Ember.ArrayController": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/controllers/controller.js": {
            "name": "packages/ember-runtime/lib/controllers/controller.js",
            "modules": {},
            "classes": {
                "Ember.Controller": 1
            },
            "fors": {
                "Ember.inject": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/controllers/object_controller.js": {
            "name": "packages/ember-runtime/lib/controllers/object_controller.js",
            "modules": {},
            "classes": {
                "Ember.ObjectController": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/ext/function.js": {
            "name": "packages/ember-runtime/lib/ext/function.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Function": 1
            },
            "namespaces": {}
        },
        "packages/ember-runtime/lib/ext/string.js": {
            "name": "packages/ember-runtime/lib/ext/string.js",
            "modules": {},
            "classes": {},
            "fors": {
                "String": 1
            },
            "namespaces": {}
        },
        "packages/ember-runtime/lib/mixins/-proxy.js": {
            "name": "packages/ember-runtime/lib/mixins/-proxy.js",
            "modules": {},
            "classes": {
                "Ember.ProxyMixin": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/mixins/action_handler.js": {
            "name": "packages/ember-runtime/lib/mixins/action_handler.js",
            "modules": {},
            "classes": {
                "Ember.ActionHandler": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/mixins/array.js": {
            "name": "packages/ember-runtime/lib/mixins/array.js",
            "modules": {},
            "classes": {
                "Ember.Array": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/mixins/comparable.js": {
            "name": "packages/ember-runtime/lib/mixins/comparable.js",
            "modules": {},
            "classes": {
                "Ember.Comparable": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/mixins/controller.js": {
            "name": "packages/ember-runtime/lib/mixins/controller.js",
            "modules": {},
            "classes": {
                "Ember.ControllerMixin": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/mixins/controller_content_model_alias_deprecation.js": {
            "name": "packages/ember-runtime/lib/mixins/controller_content_model_alias_deprecation.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-runtime/lib/mixins/copyable.js": {
            "name": "packages/ember-runtime/lib/mixins/copyable.js",
            "modules": {},
            "classes": {
                "Ember.Copyable": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/mixins/deferred.js": {
            "name": "packages/ember-runtime/lib/mixins/deferred.js",
            "modules": {},
            "classes": {
                "Ember.Deferred": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/mixins/enumerable.js": {
            "name": "packages/ember-runtime/lib/mixins/enumerable.js",
            "modules": {},
            "classes": {
                "Ember.Enumerable": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/mixins/evented.js": {
            "name": "packages/ember-runtime/lib/mixins/evented.js",
            "modules": {},
            "classes": {
                "Ember.Evented": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/mixins/freezable.js": {
            "name": "packages/ember-runtime/lib/mixins/freezable.js",
            "modules": {},
            "classes": {
                "Ember.Freezable": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/mixins/mutable_array.js": {
            "name": "packages/ember-runtime/lib/mixins/mutable_array.js",
            "modules": {},
            "classes": {
                "Ember.MutableArray": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/mixins/mutable_enumerable.js": {
            "name": "packages/ember-runtime/lib/mixins/mutable_enumerable.js",
            "modules": {},
            "classes": {
                "Ember.MutableEnumerable": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/mixins/observable.js": {
            "name": "packages/ember-runtime/lib/mixins/observable.js",
            "modules": {},
            "classes": {
                "Ember.Observable": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/mixins/promise_proxy.js": {
            "name": "packages/ember-runtime/lib/mixins/promise_proxy.js",
            "modules": {},
            "classes": {
                "Ember.PromiseProxyMixin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-runtime/lib/mixins/sortable.js": {
            "name": "packages/ember-runtime/lib/mixins/sortable.js",
            "modules": {},
            "classes": {
                "Ember.SortableMixin": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/mixins/target_action_support.js": {
            "name": "packages/ember-runtime/lib/mixins/target_action_support.js",
            "modules": {},
            "classes": {
                "Ember.TargetActionSupport": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/system/array_proxy.js": {
            "name": "packages/ember-runtime/lib/system/array_proxy.js",
            "modules": {},
            "classes": {
                "Ember.ArrayProxy": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/system/core_object.js": {
            "name": "packages/ember-runtime/lib/system/core_object.js",
            "modules": {},
            "classes": {
                "Ember.CoreObject": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/system/each_proxy.js": {
            "name": "packages/ember-runtime/lib/system/each_proxy.js",
            "modules": {},
            "classes": {
                "Ember.EachProxy": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/system/lazy_load.js": {
            "name": "packages/ember-runtime/lib/system/lazy_load.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-runtime/lib/system/namespace.js": {
            "name": "packages/ember-runtime/lib/system/namespace.js",
            "modules": {},
            "classes": {
                "Ember.Namespace": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/system/native_array.js": {
            "name": "packages/ember-runtime/lib/system/native_array.js",
            "modules": {},
            "classes": {
                "Ember.NativeArray": 1
            },
            "fors": {
                "Ember": 1,
                "Ember.NativeArray": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/system/object.js": {
            "name": "packages/ember-runtime/lib/system/object.js",
            "modules": {},
            "classes": {
                "Ember.Object": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/system/object_proxy.js": {
            "name": "packages/ember-runtime/lib/system/object_proxy.js",
            "modules": {},
            "classes": {
                "Ember.ObjectProxy": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/system/service.js": {
            "name": "packages/ember-runtime/lib/system/service.js",
            "modules": {},
            "classes": {
                "Ember.Service": 1
            },
            "fors": {
                "Ember.inject": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/system/set.js": {
            "name": "packages/ember-runtime/lib/system/set.js",
            "modules": {},
            "classes": {
                "Ember.Set": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/system/string.js": {
            "name": "packages/ember-runtime/lib/system/string.js",
            "modules": {},
            "classes": {
                "Ember.String": 1
            },
            "fors": {
                "Ember": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/system/subarray.js": {
            "name": "packages/ember-runtime/lib/system/subarray.js",
            "modules": {},
            "classes": {
                "Ember.SubArray": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/system/tracked_array.js": {
            "name": "packages/ember-runtime/lib/system/tracked_array.js",
            "modules": {},
            "classes": {
                "Ember.TrackedArray": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/compare.js": {
            "name": "packages/ember-runtime/lib/compare.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-runtime/lib/copy.js": {
            "name": "packages/ember-runtime/lib/copy.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-runtime/lib/core.js": {
            "name": "packages/ember-runtime/lib/core.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember-runtime/lib/inject.js": {
            "name": "packages/ember-runtime/lib/inject.js",
            "modules": {},
            "classes": {
                "Ember.inject": 1
            },
            "fors": {
                "Ember": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-runtime/lib/main.js": {
            "name": "packages/ember-runtime/lib/main.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-testing/lib/adapters/adapter.js": {
            "name": "packages/ember-testing/lib/adapters/adapter.js",
            "modules": {
                "ember-testing": 1
            },
            "classes": {
                "Ember.Test.Adapter": 1
            },
            "fors": {},
            "namespaces": {
                "Ember.Test": 1
            }
        },
        "packages/ember-testing/lib/adapters/qunit.js": {
            "name": "packages/ember-testing/lib/adapters/qunit.js",
            "modules": {},
            "classes": {
                "Ember.Test.QUnitAdapter": 1
            },
            "fors": {},
            "namespaces": {
                "Ember.Test": 1
            }
        },
        "packages/ember-testing/lib/helpers.js": {
            "name": "packages/ember-testing/lib/helpers.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-testing/lib/main.js": {
            "name": "packages/ember-testing/lib/main.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-testing/lib/setup_for_testing.js": {
            "name": "packages/ember-testing/lib/setup_for_testing.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-testing/lib/support.js": {
            "name": "packages/ember-testing/lib/support.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-testing/lib/test.js": {
            "name": "packages/ember-testing/lib/test.js",
            "modules": {},
            "classes": {
                "Ember.Test": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-views/lib/attr_nodes/attr_node.js": {
            "name": "packages/ember-views/lib/attr_nodes/attr_node.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/attr_nodes/legacy_bind.js": {
            "name": "packages/ember-views/lib/attr_nodes/legacy_bind.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/mixins/attribute_bindings_support.js": {
            "name": "packages/ember-views/lib/mixins/attribute_bindings_support.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/mixins/class_names_support.js": {
            "name": "packages/ember-views/lib/mixins/class_names_support.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/mixins/component_template_deprecation.js": {
            "name": "packages/ember-views/lib/mixins/component_template_deprecation.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/mixins/instrumentation_support.js": {
            "name": "packages/ember-views/lib/mixins/instrumentation_support.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/mixins/legacy_view_support.js": {
            "name": "packages/ember-views/lib/mixins/legacy_view_support.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/mixins/normalized_rerender_if_needed.js": {
            "name": "packages/ember-views/lib/mixins/normalized_rerender_if_needed.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/mixins/template_rendering_support.js": {
            "name": "packages/ember-views/lib/mixins/template_rendering_support.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/mixins/text_support.js": {
            "name": "packages/ember-views/lib/mixins/text_support.js",
            "modules": {},
            "classes": {
                "Ember.TextSupport": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-views/lib/mixins/view_child_views_support.js": {
            "name": "packages/ember-views/lib/mixins/view_child_views_support.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/mixins/view_context_support.js": {
            "name": "packages/ember-views/lib/mixins/view_context_support.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/mixins/view_target_action_support.js": {
            "name": "packages/ember-views/lib/mixins/view_target_action_support.js",
            "modules": {},
            "classes": {
                "Ember.ViewTargetActionSupport": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-views/lib/mixins/visibility_support.js": {
            "name": "packages/ember-views/lib/mixins/visibility_support.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/streams/class_name_binding.js": {
            "name": "packages/ember-views/lib/streams/class_name_binding.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/system/action_manager.js": {
            "name": "packages/ember-views/lib/system/action_manager.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/system/event_dispatcher.js": {
            "name": "packages/ember-views/lib/system/event_dispatcher.js",
            "modules": {},
            "classes": {
                "Ember.EventDispatcher": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-views/lib/system/ext.js": {
            "name": "packages/ember-views/lib/system/ext.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/system/jquery.js": {
            "name": "packages/ember-views/lib/system/jquery.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/system/render_buffer.js": {
            "name": "packages/ember-views/lib/system/render_buffer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-views/lib/system/utils.js": {
            "name": "packages/ember-views/lib/system/utils.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/views/states/default.js": {
            "name": "packages/ember-views/lib/views/states/default.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/views/states/destroying.js": {
            "name": "packages/ember-views/lib/views/states/destroying.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/views/states/has_element.js": {
            "name": "packages/ember-views/lib/views/states/has_element.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/views/states/in_buffer.js": {
            "name": "packages/ember-views/lib/views/states/in_buffer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/views/states/in_dom.js": {
            "name": "packages/ember-views/lib/views/states/in_dom.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/views/states/pre_render.js": {
            "name": "packages/ember-views/lib/views/states/pre_render.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/views/bound_component_view.js": {
            "name": "packages/ember-views/lib/views/bound_component_view.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/views/bound_partial_view.js": {
            "name": "packages/ember-views/lib/views/bound_partial_view.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/views/checkbox.js": {
            "name": "packages/ember-views/lib/views/checkbox.js",
            "modules": {},
            "classes": {
                "Ember.Checkbox": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-views/lib/views/collection_view.js": {
            "name": "packages/ember-views/lib/views/collection_view.js",
            "modules": {},
            "classes": {
                "Ember.CollectionView": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-views/lib/views/component.js": {
            "name": "packages/ember-views/lib/views/component.js",
            "modules": {},
            "classes": {
                "Ember.Component": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-views/lib/views/container_view.js": {
            "name": "packages/ember-views/lib/views/container_view.js",
            "modules": {},
            "classes": {
                "Ember.ContainerView": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-views/lib/views/core_view.js": {
            "name": "packages/ember-views/lib/views/core_view.js",
            "modules": {},
            "classes": {
                "Ember.CoreView": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-views/lib/views/metamorph_view.js": {
            "name": "packages/ember-views/lib/views/metamorph_view.js",
            "modules": {},
            "classes": {
                "Ember._Metamorph": 1,
                "Ember._MetamorphView": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-views/lib/views/select.js": {
            "name": "packages/ember-views/lib/views/select.js",
            "modules": {},
            "classes": {
                "Ember.Select": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-views/lib/views/simple_bound_view.js": {
            "name": "packages/ember-views/lib/views/simple_bound_view.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/views/text_area.js": {
            "name": "packages/ember-views/lib/views/text_area.js",
            "modules": {},
            "classes": {
                "Ember.TextArea": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-views/lib/views/text_field.js": {
            "name": "packages/ember-views/lib/views/text_field.js",
            "modules": {},
            "classes": {
                "Ember.TextField": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-views/lib/views/view.js": {
            "name": "packages/ember-views/lib/views/view.js",
            "modules": {},
            "classes": {
                "Ember.View": 1
            },
            "fors": {
                "Ember": 1
            },
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-views/lib/views/with_view.js": {
            "name": "packages/ember-views/lib/views/with_view.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-views/lib/main.js": {
            "name": "packages/ember-views/lib/main.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Ember": 1
            },
            "namespaces": {}
        },
        "packages/ember/lib/main.js": {
            "name": "packages/ember/lib/main.js",
            "modules": {
                "ember": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "ember": {
            "name": "ember",
            "submodules": {
                "ember-application": 1,
                "ember-debug": 1,
                "ember-extension-support": 1,
                "ember-htmlbars": 1,
                "ember-handlebars": 1,
                "ember-routing-htmlbars": 1,
                "ember-routing-views": 1,
                "ember-routing": 1,
                "ember-views": 1,
                "ember-runtime": 1,
                "ember-testing": 1
            },
            "classes": {
                "RSVP": 1,
                "RSVP.EventTarget": 1,
                "RSVP.Promise": 1,
                "Ember.ControllerMixin": 1,
                "Ember.Application": 1,
                "Ember.DefaultResolver": 1,
                "Ember": 1,
                "Ember.ContainerDebugAdapter": 1,
                "Ember.DataAdapter": 1,
                "Ember.Handlebars": 1,
                "HandlebarsCompatibleHelper": 1,
                "Ember.Handlebars.helpers": 1,
                "Ember.HTMLBars.Helper": 1,
                "Ember.HTMLBars": 1,
                "Ember.String": 1,
                "String": 1,
                "Ember.platform": 1,
                "Ember.FEATURES": 1,
                "Backburner": 1,
                "Ember.Mixin": 1,
                "Ember.LinkView": 1,
                "Ember.Location": 1,
                "Ember.AutoLocation": 1,
                "Ember.HashLocation": 1,
                "Ember.HistoryLocation": 1,
                "Ember.NoneLocation": 1,
                "Ember.Route": 1,
                "Ember.Router": 1,
                "Ember.ReduceComputedProperty": 1,
                "Ember.ArrayController": 1,
                "Ember.Controller": 1,
                "Ember.inject": 1,
                "Ember.ObjectController": 1,
                "Function": 1,
                "Ember.ProxyMixin": 1,
                "Ember.ActionHandler": 1,
                "Ember.Array": 1,
                "Ember.Comparable": 1,
                "Ember.Copyable": 1,
                "Ember.Deferred": 1,
                "Ember.Enumerable": 1,
                "Ember.Evented": 1,
                "Ember.Freezable": 1,
                "Ember.MutableArray": 1,
                "Ember.MutableEnumerable": 1,
                "Ember.Observable": 1,
                "Ember.PromiseProxyMixin": 1,
                "Ember.SortableMixin": 1,
                "Ember.TargetActionSupport": 1,
                "Ember.ArrayProxy": 1,
                "Ember.CoreObject": 1,
                "Ember.EachProxy": 1,
                "Ember.Namespace": 1,
                "Ember.NativeArray": 1,
                "Ember.Object": 1,
                "Ember.ObjectProxy": 1,
                "Ember.Service": 1,
                "Ember.Set": 1,
                "Ember.SubArray": 1,
                "Ember.TrackedArray": 1,
                "Ember.Test.Adapter": 1,
                "Ember.Test.QUnitAdapter": 1,
                "Ember.Test": 1,
                "Ember.TextSupport": 1,
                "Ember.ViewTargetActionSupport": 1,
                "Ember.EventDispatcher": 1,
                "Ember.Checkbox": 1,
                "Ember.CollectionView": 1,
                "Ember.Component": 1,
                "Ember.ContainerView": 1,
                "Ember.CoreView": 1,
                "Ember._Metamorph": 1,
                "Ember._MetamorphView": 1,
                "Ember.Select": 1,
                "Ember.TextArea": 1,
                "Ember.TextField": 1,
                "Ember.View": 1
            },
            "fors": {
                "Ember.Handlebars": 1,
                "Ember.Handlebars.helpers": 1,
                "Ember.HTMLBars": 1,
                "Ember.String": 1,
                "String": 1,
                "Ember": 1,
                "Ember.FEATURES": 1,
                "Ember.ControllerMixin": 1,
                "Ember.Route": 1,
                "Ember.computed": 1,
                "Ember.inject": 1,
                "Function": 1,
                "Ember.NativeArray": 1
            },
            "namespaces": {
                "Ember": 1,
                "Ember.HTMLBars": 1,
                "Ember.Test": 1
            },
            "tag": "module",
            "file": "packages/ember-views/lib/views/view.js",
            "line": 64,
            "description": "Ember"
        },
        "ember-application": {
            "name": "ember-application",
            "submodules": {},
            "classes": {
                "Ember.ControllerMixin": 1,
                "Ember.Application": 1,
                "Ember.DefaultResolver": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "Ember": 1
            },
            "module": "ember",
            "namespace": "",
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 35,
            "access": "private",
            "tagname": "",
            "description": "Ember Application",
            "requires": [
                "ember-views",
                "ember-routing"
            ]
        },
        "ember-debug": {
            "name": "ember-debug",
            "submodules": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "ember",
            "namespace": "",
            "file": "packages/ember-debug/lib/main.js",
            "line": 9,
            "description": "Ember Debug"
        },
        "ember-extension-support": {
            "name": "ember-extension-support",
            "submodules": {},
            "classes": {
                "Ember.ContainerDebugAdapter": 1,
                "Ember.DataAdapter": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "Ember": 1
            },
            "module": "ember",
            "namespace": "",
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 14,
            "description": "Ember Extension Support",
            "requires": [
                "ember-application"
            ]
        },
        "ember-htmlbars": {
            "name": "ember-htmlbars",
            "submodules": {},
            "classes": {
                "Ember.Handlebars": 1,
                "HandlebarsCompatibleHelper": 1,
                "Ember.Handlebars.helpers": 1,
                "Ember.HTMLBars.Helper": 1,
                "Ember.HTMLBars": 1,
                "String": 1
            },
            "fors": {
                "Ember.Handlebars": 1,
                "Ember.Handlebars.helpers": 1,
                "Ember.HTMLBars": 1,
                "Ember.String": 1,
                "String": 1
            },
            "is_submodule": 1,
            "namespaces": {
                "Ember.HTMLBars": 1
            },
            "module": "ember",
            "namespace": "",
            "file": "packages/ember-htmlbars/lib/system/helper.js",
            "line": 6,
            "description": "Wraps an Handlebars helper with an HTMLBars helper for backwards compatibility."
        },
        "ember-handlebars": {
            "name": "ember-handlebars",
            "submodules": {},
            "classes": {},
            "fors": {
                "Ember.Handlebars": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "ember",
            "namespace": "",
            "file": "packages/ember-htmlbars/lib/system/bootstrap.js",
            "line": 16
        },
        "ember-metal": {
            "name": "ember-metal",
            "submodules": {},
            "classes": {
                "Ember": 1,
                "Ember.Binding": 1,
                "Ember.ComputedProperty": 1,
                "Ember.computed": 1,
                "Ember.FEATURES": 1,
                "Ember.EnumerableUtils": 1,
                "Ember.Error": 1,
                "Ember.InjectedProperty": 1,
                "Ember.Instrumentation": 1,
                "Libraries": 1,
                "Ember.Logger": 1,
                "Backburner": 1,
                "Ember.OrderedSet": 1,
                "Ember.Map": 1,
                "Ember.MapWithDefault": 1,
                "Ember.Mixin": 1,
                "Ember.Descriptor": 1,
                "Ember.run": 1
            },
            "fors": {
                "Ember": 1,
                "Ember.computed": 1,
                "Ember.FEATURES": 1,
                "Ember.Logger": 1
            },
            "namespaces": {
                "Ember": 1,
                "Ember.Instrumentation": 1
            },
            "tag": "module",
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 40,
            "description": "All Ember methods and functions are defined inside of this namespace. You\ngenerally should not add new properties to this namespace as it may be\noverwritten by future versions of Ember.\n\nYou can also use the shorthand `Em` instead of `Ember`.\n\nEmber-Runtime is a framework that provides core functions for Ember including\ncross-platform functions, support for property observing and objects. Its\nfocus is on small size and performance. You can use this in place of or\nalong-side other cross-platform libraries such as jQuery.\n\nThe core Runtime framework is based on the jQuery API with a number of\nperformance optimizations.",
            "module": "ember"
        },
        "ember-routing-htmlbars": {
            "name": "ember-routing-htmlbars",
            "submodules": {},
            "classes": {},
            "fors": {
                "Ember.Handlebars.helpers": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "ember",
            "namespace": "",
            "file": "packages/ember-routing-htmlbars/lib/helpers/action.js",
            "line": 1,
            "description": "Ember Routing HTMLBars Helpers",
            "requires": [
                "ember-routing"
            ]
        },
        "ember-routing-views": {
            "name": "ember-routing-views",
            "submodules": {},
            "classes": {
                "Ember.LinkView": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "Ember": 1
            },
            "module": "ember",
            "namespace": "",
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 36,
            "description": "Ember Routing Views",
            "requires": [
                "ember-routing"
            ]
        },
        "ember-routing": {
            "name": "ember-routing",
            "submodules": {},
            "classes": {
                "Ember.Location": 1,
                "Ember.AutoLocation": 1,
                "Ember.HashLocation": 1,
                "Ember.HistoryLocation": 1,
                "Ember.NoneLocation": 1,
                "Ember.Route": 1,
                "Ember.Router": 1
            },
            "fors": {
                "Ember.ControllerMixin": 1,
                "Ember": 1,
                "Ember.Route": 1
            },
            "is_submodule": 1,
            "namespaces": {
                "Ember": 1
            },
            "module": "ember",
            "namespace": "",
            "file": "packages/ember-routing/lib/system/router.js",
            "line": 36,
            "description": "Ember Routing",
            "requires": [
                "ember-views"
            ]
        },
        "ember-views": {
            "name": "ember-views",
            "submodules": {},
            "classes": {
                "Ember.TextSupport": 1,
                "Ember.EventDispatcher": 1,
                "Ember.Checkbox": 1,
                "Ember.CollectionView": 1,
                "Ember.Component": 1,
                "Ember.ContainerView": 1,
                "Ember._Metamorph": 1,
                "Ember._MetamorphView": 1,
                "Ember.Select": 1,
                "Ember.TextArea": 1,
                "Ember.TextField": 1,
                "Ember.View": 1
            },
            "fors": {
                "Ember": 1
            },
            "is_submodule": 1,
            "namespaces": {
                "Ember": 1
            },
            "module": "ember",
            "namespace": "",
            "file": "packages/ember-views/lib/views/view.js",
            "line": 64,
            "description": "Ember Views",
            "requires": [
                "ember-runtime"
            ],
            "tag": "main",
            "itemtype": "main"
        },
        "ember-runtime": {
            "name": "ember-runtime",
            "submodules": {},
            "classes": {
                "Ember.String": 1,
                "Ember.ArrayController": 1,
                "Ember.Controller": 1,
                "Ember.inject": 1,
                "Ember.ObjectController": 1,
                "Function": 1,
                "Ember.ProxyMixin": 1,
                "Ember.ActionHandler": 1,
                "Ember.Array": 1,
                "Ember.Comparable": 1,
                "Ember.Copyable": 1,
                "Ember.Deferred": 1,
                "Ember.Enumerable": 1,
                "Ember.Evented": 1,
                "Ember.Freezable": 1,
                "Ember.MutableArray": 1,
                "Ember.MutableEnumerable": 1,
                "Ember.Observable": 1,
                "Ember.PromiseProxyMixin": 1,
                "Ember.SortableMixin": 1,
                "Ember.TargetActionSupport": 1,
                "Ember.ArrayProxy": 1,
                "Ember.CoreObject": 1,
                "Ember.EachProxy": 1,
                "Ember.Namespace": 1,
                "Ember.NativeArray": 1,
                "Ember.Object": 1,
                "Ember.Set": 1
            },
            "fors": {
                "Ember.computed": 1,
                "Ember.inject": 1,
                "Function": 1,
                "String": 1,
                "Ember": 1,
                "Ember.NativeArray": 1
            },
            "is_submodule": 1,
            "namespaces": {
                "Ember": 1
            },
            "module": "ember",
            "namespace": "",
            "file": "packages/ember-runtime/lib/system/set.js",
            "line": 28,
            "description": "Ember Runtime",
            "requires": [
                "ember-metal"
            ]
        },
        "ember-testing": {
            "name": "ember-testing",
            "submodules": {},
            "classes": {
                "Ember.Test.Adapter": 1,
                "Ember.Test": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "Ember.Test": 1,
                "Ember": 1
            },
            "module": "ember",
            "namespace": "",
            "file": "packages/ember-testing/lib/test.js",
            "line": 16,
            "description": "Ember Testing",
            "requires": [
                "ember-application"
            ]
        }
    },
    "classes": {
        "RSVP": {
            "name": "RSVP",
            "shortname": "RSVP",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember"
        },
        "RSVP.EventTarget": {
            "name": "RSVP.EventTarget",
            "shortname": "RSVP.EventTarget",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "file": "bower_components/rsvp/lib/rsvp/events.js",
            "line": 19
        },
        "RSVP.Promise": {
            "name": "RSVP.Promise",
            "shortname": "RSVP.Promise",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "file": "bower_components/rsvp/lib/rsvp/promise.js",
            "line": 34,
            "description": "Promise objects represent the eventual result of an asynchronous operation. The\nprimary way of interacting with a promise is through its `then` method, which\nregisters callbacks to receive either a promise’s eventual value or the reason\nwhy the promise cannot be fulfilled.\n\nTerminology\n-----------\n\n- `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n- `thenable` is an object or function that defines a `then` method.\n- `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n- `exception` is a value that is thrown using the throw statement.\n- `reason` is a value that indicates why a promise was rejected.\n- `settled` the final resting state of a promise, fulfilled or rejected.\n\nA promise can be in one of three states: pending, fulfilled, or rejected.\n\nPromises that are fulfilled have a fulfillment value and are in the fulfilled\nstate.  Promises that are rejected have a rejection reason and are in the\nrejected state.  A fulfillment value is never a thenable.\n\nPromises can also be said to *resolve* a value.  If this value is also a\npromise, then the original promise's settled state will match the value's\nsettled state.  So a promise that *resolves* a promise that rejects will\nitself reject, and a promise that *resolves* a promise that fulfills will\nitself fulfill.\n\n\nBasic Usage:\n------------\n\n```js\nvar promise = new Promise(function(resolve, reject) {\n  // on success\n  resolve(value);\n\n  // on failure\n  reject(reason);\n});\n\npromise.then(function(value) {\n  // on fulfillment\n}, function(reason) {\n  // on rejection\n});\n```\n\nAdvanced Usage:\n---------------\n\nPromises shine when abstracting away asynchronous interactions such as\n`XMLHttpRequest`s.\n\n```js\nfunction getJSON(url) {\n  return new Promise(function(resolve, reject){\n    var xhr = new XMLHttpRequest();\n\n    xhr.open('GET', url);\n    xhr.onreadystatechange = handler;\n    xhr.responseType = 'json';\n    xhr.setRequestHeader('Accept', 'application/json');\n    xhr.send();\n\n    function handler() {\n      if (this.readyState === this.DONE) {\n        if (this.status === 200) {\n          resolve(this.response);\n        } else {\n          reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n        }\n      }\n    };\n  });\n}\n\ngetJSON('/posts.json').then(function(json) {\n  // on fulfillment\n}, function(reason) {\n  // on rejection\n});\n```\n\nUnlike callbacks, promises are great composable primitives.\n\n```js\nPromise.all([\n  getJSON('/posts'),\n  getJSON('/comments')\n]).then(function(values){\n  values[0] // => postsJSON\n  values[1] // => commentsJSON\n\n  return values;\n});\n```",
            "params": [
                {
                    "name": "resolver",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "label",
                    "description": "optional string for labeling the promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "is_constructor": 1
        },
        "Ember.ControllerMixin": {
            "name": "Ember.ControllerMixin",
            "shortname": "Ember.ControllerMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.ArrayController",
                "Ember.Controller",
                "Ember.ObjectController"
            ],
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/controller.js",
            "line": 6,
            "description": "`Ember.ControllerMixin` provides a standard interface for all classes that\ncompose Ember's controller layer: `Ember.Controller`,\n`Ember.ArrayController`, and `Ember.ObjectController`.",
            "uses": [
                "Ember.ActionHandler"
            ]
        },
        "Ember.Application": {
            "name": "Ember.Application",
            "shortname": "Ember.Application",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember",
            "file": "packages/ember-application/lib/system/application.js",
            "line": 55,
            "description": "An instance of `Ember.Application` is the starting point for every Ember\napplication. It helps to instantiate, initialize and coordinate the many\nobjects that make up your app.\n\nEach Ember app has one and only one `Ember.Application` object. In fact, the\nvery first thing you should do in your application is create the instance:\n\n```javascript\nwindow.App = Ember.Application.create();\n```\n\nTypically, the application object is the only global variable. All other\nclasses in your app should be properties on the `Ember.Application` instance,\nwhich highlights its first role: a global namespace.\n\nFor example, if you define a view class, it might look like this:\n\n```javascript\nApp.MyView = Ember.View.extend();\n```\n\nBy default, calling `Ember.Application.create()` will automatically initialize\nyour application by calling the `Ember.Application.initialize()` method. If\nyou need to delay initialization, you can call your app's `deferReadiness()`\nmethod. When you are ready for your app to be initialized, call its\n`advanceReadiness()` method.\n\nYou can define a `ready` method on the `Ember.Application` instance, which\nwill be run by Ember when the application is initialized.\n\nBecause `Ember.Application` inherits from `Ember.Namespace`, any classes\nyou create will have useful string representations when calling `toString()`.\nSee the `Ember.Namespace` documentation for more information.\n\nWhile you can think of your `Ember.Application` as a container that holds the\nother classes in your application, there are several other responsibilities\ngoing on under-the-hood that you may want to understand.\n\n### Event Delegation\n\nEmber uses a technique called _event delegation_. This allows the framework\nto set up a global, shared event listener instead of requiring each view to\ndo it manually. For example, instead of each view registering its own\n`mousedown` listener on its associated element, Ember sets up a `mousedown`\nlistener on the `body`.\n\nIf a `mousedown` event occurs, Ember will look at the target of the event and\nstart walking up the DOM node tree, finding corresponding views and invoking\ntheir `mouseDown` method as it goes.\n\n`Ember.Application` has a number of default events that it listens for, as\nwell as a mapping from lowercase events to camel-cased view method names. For\nexample, the `keypress` event causes the `keyPress` method on the view to be\ncalled, the `dblclick` event causes `doubleClick` to be called, and so on.\n\nIf there is a bubbling browser event that Ember does not listen for by\ndefault, you can specify custom events and their corresponding view method\nnames by setting the application's `customEvents` property:\n\n```javascript\nvar App = Ember.Application.create({\n  customEvents: {\n    // add support for the paste event\n    paste: 'paste'\n  }\n});\n```\n\nBy default, the application sets up these event listeners on the document\nbody. However, in cases where you are embedding an Ember application inside\nan existing page, you may want it to set up the listeners on an element\ninside the body.\n\nFor example, if only events inside a DOM element with the ID of `ember-app`\nshould be delegated, set your application's `rootElement` property:\n\n```javascript\nvar App = Ember.Application.create({\n  rootElement: '#ember-app'\n});\n```\n\nThe `rootElement` can be either a DOM element or a jQuery-compatible selector\nstring. Note that *views appended to the DOM outside the root element will\nnot receive events.* If you specify a custom root element, make sure you only\nappend views inside it!\n\nTo learn more about the advantages of event delegation and the Ember view\nlayer, and a list of the event listeners that are setup by default, visit the\n[Ember View Layer guide](http://emberjs.com/guides/understanding-ember/the-view-layer/#toc_event-delegation).\n\n### Initializers\n\nLibraries on top of Ember can add initializers, like so:\n\n```javascript\nEmber.Application.initializer({\n  name: 'api-adapter',\n\n  initialize: function(container, application) {\n    application.register('api-adapter:main', ApiAdapter);\n  }\n});\n```\n\nInitializers provide an opportunity to access the container, which\norganizes the different components of an Ember application. Additionally\nthey provide a chance to access the instantiated application. Beyond\nbeing used for libraries, initializers are also a great way to organize\ndependency injection or setup in your own application.\n\n### Routing\n\nIn addition to creating your application's router, `Ember.Application` is\nalso responsible for telling the router when to start routing. Transitions\nbetween routes can be logged with the `LOG_TRANSITIONS` flag, and more\ndetailed intra-transition logging can be logged with\nthe `LOG_TRANSITIONS_INTERNAL` flag:\n\n```javascript\nvar App = Ember.Application.create({\n  LOG_TRANSITIONS: true, // basic logging of successful transitions\n  LOG_TRANSITIONS_INTERNAL: true // detailed logging of all routing steps\n});\n```\n\nBy default, the router will begin trying to translate the current URL into\napplication state once the browser emits the `DOMContentReady` event. If you\nneed to defer routing, you can call the application's `deferReadiness()`\nmethod. Once routing can begin, call the `advanceReadiness()` method.\n\nIf there is any setup required before routing begins, you can implement a\n`ready()` method on your app that will be invoked immediately before routing\nbegins.",
            "extends": "Ember.Namespace"
        },
        "Ember.DefaultResolver": {
            "name": "Ember.DefaultResolver",
            "shortname": "Ember.DefaultResolver",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember",
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 35,
            "description": "The DefaultResolver defines the default lookup rules to resolve\ncontainer lookups before consulting the container for registered\nitems:\n\n* templates are looked up on `Ember.TEMPLATES`\n* other names are looked up on the application after converting\n  the name. For example, `controller:post` looks up\n  `App.PostController` by default.\n* there are some nuances (see examples below)\n\n### How Resolving Works\n\nThe container calls this object's `resolve` method with the\n`fullName` argument.\n\nIt first parses the fullName into an object using `parseName`.\n\nThen it checks for the presence of a type-specific instance\nmethod of the form `resolve[Type]` and calls it if it exists.\nFor example if it was resolving 'template:post', it would call\nthe `resolveTemplate` method.\n\nIts last resort is to call the `resolveOther` method.\n\nThe methods of this object are designed to be easy to override\nin a subclass. For example, you could enhance how a template\nis resolved like so:\n\n```javascript\nApp = Ember.Application.create({\n  Resolver: Ember.DefaultResolver.extend({\n    resolveTemplate: function(parsedName) {\n      var resolvedTemplate = this._super(parsedName);\n      if (resolvedTemplate) { return resolvedTemplate; }\n      return Ember.TEMPLATES['not_found'];\n    }\n  })\n});\n```\n\nSome examples of how names are resolved:\n\n```\n'template:post'           //=> Ember.TEMPLATES['post']\n'template:posts/byline'   //=> Ember.TEMPLATES['posts/byline']\n'template:posts.byline'   //=> Ember.TEMPLATES['posts/byline']\n'template:blogPost'       //=> Ember.TEMPLATES['blogPost']\n                          //   OR\n                          //   Ember.TEMPLATES['blog_post']\n'controller:post'         //=> App.PostController\n'controller:posts.index'  //=> App.PostsIndexController\n'controller:blog/post'    //=> Blog.PostController\n'controller:basic'        //=> Ember.Controller\n'route:post'              //=> App.PostRoute\n'route:posts.index'       //=> App.PostsIndexRoute\n'route:blog/post'         //=> Blog.PostRoute\n'route:basic'             //=> Ember.Route\n'view:post'               //=> App.PostView\n'view:posts.index'        //=> App.PostsIndexView\n'view:blog/post'          //=> Blog.PostView\n'view:basic'              //=> Ember.View\n'foo:post'                //=> App.PostFoo\n'model:post'              //=> App.Post\n```",
            "extends": "Ember.Object"
        },
        "Ember": {
            "name": "Ember",
            "shortname": "Ember",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "",
            "file": "packages/ember-metal/lib/core.js",
            "line": 8,
            "description": "All Ember methods and functions are defined inside of this namespace. You\ngenerally should not add new properties to this namespace as it may be\noverwritten by future versions of Ember.\n\nYou can also use the shorthand `Em` instead of `Ember`.\n\nEmber-Runtime is a framework that provides core functions for Ember including\ncross-platform functions, support for property observing and objects. Its\nfocus is on small size and performance. You can use this in place of or\nalong-side other cross-platform libraries such as jQuery.\n\nThe core Runtime framework is based on the jQuery API with a number of\nperformance optimizations.",
            "static": 1,
            "version": "VERSION_STRING_PLACEHOLDER"
        },
        "Ember.ContainerDebugAdapter": {
            "name": "Ember.ContainerDebugAdapter",
            "shortname": "Ember.ContainerDebugAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember",
            "file": "packages/ember-extension-support/lib/container_debug_adapter.js",
            "line": 16,
            "description": "The `ContainerDebugAdapter` helps the container and resolver interface\nwith tools that debug Ember such as the\n[Ember Extension](https://github.com/tildeio/ember-extension)\nfor Chrome and Firefox.\n\nThis class can be extended by a custom resolver implementer\nto override some of the methods with library-specific code.\n\nThe methods likely to be overridden are:\n\n* `canCatalogEntriesByType`\n* `catalogEntriesByType`\n\nThe adapter will need to be registered\nin the application's container as `container-debug-adapter:main`\n\nExample:\n\n```javascript\nApplication.initializer({\n  name: \"containerDebugAdapter\",\n\n  initialize: function(container, application) {\n    application.register('container-debug-adapter:main', require('app/container-debug-adapter'));\n  }\n});\n```",
            "extends": "Ember.Object",
            "since": "1.5.0"
        },
        "Ember.DataAdapter": {
            "name": "Ember.DataAdapter",
            "shortname": "Ember.DataAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember",
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 14,
            "description": "The `DataAdapter` helps a data persistence library\ninterface with tools that debug Ember such\nas the [Ember Extension](https://github.com/tildeio/ember-extension)\nfor Chrome and Firefox.\n\nThis class will be extended by a persistence library\nwhich will override some of the methods with\nlibrary-specific code.\n\nThe methods likely to be overridden are:\n\n* `getFilters`\n* `detect`\n* `columnsForType`\n* `getRecords`\n* `getRecordColumnValues`\n* `getRecordKeywords`\n* `getRecordFilterValues`\n* `getRecordColor`\n* `observeRecord`\n\nThe adapter will need to be registered\nin the application's container as `dataAdapter:main`\n\nExample:\n\n```javascript\nApplication.initializer({\n  name: \"data-adapter\",\n\n  initialize: function(container, application) {\n    application.register('data-adapter:main', DS.DataAdapter);\n  }\n});\n```",
            "extends": "EmberObject"
        },
        "Ember.Handlebars": {
            "name": "Ember.Handlebars",
            "shortname": "Ember.Handlebars",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-htmlbars",
            "namespace": ""
        },
        "HandlebarsCompatibleHelper": {
            "name": "HandlebarsCompatibleHelper",
            "shortname": "HandlebarsCompatibleHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-htmlbars",
            "namespace": "",
            "file": "packages/ember-htmlbars/lib/compat/helper.js",
            "line": 26,
            "description": "Wraps an Handlebars helper with an HTMLBars helper for backwards compatibility.",
            "is_constructor": 1,
            "access": "private",
            "tagname": ""
        },
        "Ember.Handlebars.helpers": {
            "name": "Ember.Handlebars.helpers",
            "shortname": "Ember.Handlebars.helpers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-htmlbars",
            "namespace": ""
        },
        "Ember.HTMLBars.Helper": {
            "name": "Ember.HTMLBars.Helper",
            "shortname": "Ember.HTMLBars.Helper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-htmlbars",
            "namespace": "Ember.HTMLBars",
            "file": "packages/ember-htmlbars/lib/system/helper.js",
            "line": 6
        },
        "Ember.HTMLBars": {
            "name": "Ember.HTMLBars",
            "shortname": "Ember.HTMLBars",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-htmlbars",
            "namespace": ""
        },
        "Ember.String": {
            "name": "Ember.String",
            "shortname": "Ember.String",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/system/string.js",
            "line": 125,
            "description": "Defines string helper methods including string formatting and localization.\nUnless `Ember.EXTEND_PROTOTYPES.String` is `false` these methods will also be\nadded to the `String.prototype` as well.",
            "static": 1
        },
        "String": {
            "name": "String",
            "shortname": "String",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-htmlbars",
            "namespace": ""
        },
        "Ember.platform": {
            "name": "Ember.platform",
            "shortname": "Ember.platform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "Ember",
            "file": "packages/ember-metal/lib/platform/define_property.js",
            "line": 3,
            "static": 1
        },
        "Ember.Binding": {
            "name": "Ember.Binding",
            "shortname": "Ember.Binding",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "Ember",
            "file": "packages/ember-metal/lib/binding.js",
            "line": 330,
            "description": "An `Ember.Binding` connects the properties of two objects so that whenever\nthe value of one property changes, the other property will be changed also.\n\n## Automatic Creation of Bindings with `/^*Binding/`-named Properties\n\nYou do not usually create Binding objects directly but instead describe\nbindings in your class or object definition using automatic binding\ndetection.\n\nProperties ending in a `Binding` suffix will be converted to `Ember.Binding`\ninstances. The value of this property should be a string representing a path\nto another object or a custom binding instance created using Binding helpers\n(see \"One Way Bindings\"):\n\n```\nvalueBinding: \"MyApp.someController.title\"\n```\n\nThis will create a binding from `MyApp.someController.title` to the `value`\nproperty of your object instance automatically. Now the two values will be\nkept in sync.\n\n## One Way Bindings\n\nOne especially useful binding customization you can use is the `oneWay()`\nhelper. This helper tells Ember that you are only interested in\nreceiving changes on the object you are binding from. For example, if you\nare binding to a preference and you want to be notified if the preference\nhas changed, but your object will not be changing the preference itself, you\ncould do:\n\n```\nbigTitlesBinding: Ember.Binding.oneWay(\"MyApp.preferencesController.bigTitles\")\n```\n\nThis way if the value of `MyApp.preferencesController.bigTitles` changes the\n`bigTitles` property of your object will change also. However, if you\nchange the value of your `bigTitles` property, it will not update the\n`preferencesController`.\n\nOne way bindings are almost twice as fast to setup and twice as fast to\nexecute because the binding only has to worry about changes to one side.\n\nYou should consider using one way bindings anytime you have an object that\nmay be created frequently and you do not intend to change a property; only\nto monitor it for changes (such as in the example above).\n\n## Adding Bindings Manually\n\nAll of the examples above show you how to configure a custom binding, but the\nresult of these customizations will be a binding template, not a fully active\nBinding instance. The binding will actually become active only when you\ninstantiate the object the binding belongs to. It is useful however, to\nunderstand what actually happens when the binding is activated.\n\nFor a binding to function it must have at least a `from` property and a `to`\nproperty. The `from` property path points to the object/key that you want to\nbind from while the `to` path points to the object/key you want to bind to.\n\nWhen you define a custom binding, you are usually describing the property\nyou want to bind from (such as `MyApp.someController.value` in the examples\nabove). When your object is created, it will automatically assign the value\nyou want to bind `to` based on the name of your binding key. In the\nexamples above, during init, Ember objects will effectively call\nsomething like this on your binding:\n\n```javascript\nbinding = Ember.Binding.from(\"valueBinding\").to(\"value\");\n```\n\nThis creates a new binding instance based on the template you provide, and\nsets the to path to the `value` property of the new object. Now that the\nbinding is fully configured with a `from` and a `to`, it simply needs to be\nconnected to become active. This is done through the `connect()` method:\n\n```javascript\nbinding.connect(this);\n```\n\nNote that when you connect a binding you pass the object you want it to be\nconnected to. This object will be used as the root for both the from and\nto side of the binding when inspecting relative paths. This allows the\nbinding to be automatically inherited by subclassed objects as well.\n\nThis also allows you to bind between objects using the paths you declare in\n`from` and `to`:\n\n```javascript\n// Example 1\nbinding = Ember.Binding.from(\"App.someObject.value\").to(\"value\");\nbinding.connect(this);\n\n// Example 2\nbinding = Ember.Binding.from(\"parentView.value\").to(\"App.someObject.value\");\nbinding.connect(this);\n```\n\nNow that the binding is connected, it will observe both the from and to side\nand relay changes.\n\nIf you ever needed to do so (you almost never will, but it is useful to\nunderstand this anyway), you could manually create an active binding by\nusing the `Ember.bind()` helper method. (This is the same method used by\nto setup your bindings on objects):\n\n```javascript\nEmber.bind(MyApp.anotherObject, \"value\", \"MyApp.someController.value\");\n```\n\nBoth of these code fragments have the same effect as doing the most friendly\nform of binding creation like so:\n\n```javascript\nMyApp.anotherObject = Ember.Object.create({\n  valueBinding: \"MyApp.someController.value\",\n\n  // OTHER CODE FOR THIS OBJECT...\n});\n```\n\nEmber's built in binding creation method makes it easy to automatically\ncreate bindings for you. You should always use the highest-level APIs\navailable, even if you understand how it works underneath.",
            "since": "Ember 0.9"
        },
        "Ember.ComputedProperty": {
            "name": "Ember.ComputedProperty",
            "shortname": "Ember.ComputedProperty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "Ember",
            "file": "packages/ember-metal/lib/computed.js",
            "line": 34,
            "description": "A computed property transforms an object's function into a property.\n\nBy default the function backing the computed property will only be called\nonce and the result will be cached. You can specify various properties\nthat your computed property depends on. This will force the cached\nresult to be recomputed if the dependencies are modified.\n\nIn the following example we declare a computed property (by calling\n`.property()` on the fullName function) and setup the property\ndependencies (depending on firstName and lastName). The fullName function\nwill be called once (regardless of how many times it is accessed) as long\nas its dependencies have not changed. Once firstName or lastName are updated\nany future calls (or anything bound) to fullName will incorporate the new\nvalues.\n\n```javascript\nvar Person = Ember.Object.extend({\n  // these will be supplied by `create`\n  firstName: null,\n  lastName: null,\n\n  fullName: function() {\n    var firstName = this.get('firstName');\n    var lastName = this.get('lastName');\n\n   return firstName + ' ' + lastName;\n  }.property('firstName', 'lastName')\n});\n\nvar tom = Person.create({\n  firstName: 'Tom',\n  lastName: 'Dale'\n});\n\ntom.get('fullName') // 'Tom Dale'\n```\n\nYou can also define what Ember should do when setting a computed property.\nIf you try to set a computed property, it will be invoked with the key and\nvalue you want to set it to. You can also accept the previous value as the\nthird parameter.\n\n```javascript\nvar Person = Ember.Object.extend({\n  // these will be supplied by `create`\n  firstName: null,\n  lastName: null,\n\n  fullName: function(key, value, oldValue) {\n    // getter\n    if (arguments.length === 1) {\n      var firstName = this.get('firstName');\n      var lastName = this.get('lastName');\n\n      return firstName + ' ' + lastName;\n\n    // setter\n    } else {\n      var name = value.split(' ');\n\n      this.set('firstName', name[0]);\n      this.set('lastName', name[1]);\n\n      return value;\n    }\n  }.property('firstName', 'lastName')\n});\n\nvar person = Person.create();\n\nperson.set('fullName', 'Peter Wagenet');\nperson.get('firstName'); // 'Peter'\nperson.get('lastName');  // 'Wagenet'\n```",
            "extends": "Ember.Descriptor",
            "is_constructor": 1
        },
        "Ember.computed": {
            "name": "Ember.computed",
            "shortname": "Ember.computed",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "Ember",
            "file": "packages/ember-metal/lib/computed.js",
            "line": 522,
            "description": "This helper returns a new property descriptor that wraps the passed\ncomputed property function. You can use this helper to define properties\nwith mixins or via `Ember.defineProperty()`.\n\nThe function you pass will be used to both get and set property values.\nThe function should accept two parameters, key and value. If value is not\nundefined you should set the value first. In either case return the\ncurrent value of the property.\n\nA computed property defined in this way might look like this:\n\n```js\nvar Person = Ember.Object.extend({\n  firstName: 'Betty',\n  lastName: 'Jones',\n\n  fullName: Ember.computed('firstName', 'lastName', function(key, value) {\n    return this.get('firstName') + ' ' + this.get('lastName');\n  })\n});\n\nvar client = Person.create();\n\nclient.get('fullName'); // 'Betty Jones'\n\nclient.set('lastName', 'Fuller');\nclient.get('fullName'); // 'Betty Fuller'\n```\n\n_Note: This is the preferred way to define computed properties when writing third-party\nlibraries that depend on or use Ember, since there is no guarantee that the user\nwill have prototype extensions enabled._\n\nYou might use this method if you disabled\n[Prototype Extensions](http://emberjs.com/guides/configuring-ember/disabling-prototype-extensions/).\nThe alternative syntax might look like this\n(if prototype extensions are enabled, which is the default behavior):\n\n```js\nfullName: function () {\n  return this.get('firstName') + ' ' + this.get('lastName');\n}.property('firstName', 'lastName')\n```",
            "is_constructor": 1,
            "static": 1,
            "params": [
                {
                    "name": "dependentKeys*",
                    "description": "Optional dependent keys that trigger this computed property.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "func",
                    "description": "The computed property function.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "property descriptor instance",
                "type": "Ember.ComputedProperty"
            }
        },
        "Ember.FEATURES": {
            "name": "Ember.FEATURES",
            "shortname": "Ember.FEATURES",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember",
            "file": "packages/ember-metal/lib/core.js",
            "line": 87,
            "description": "Hash of enabled Canary features. Add to this before creating your application.\n\nYou can also define `EmberENV.FEATURES` if you need to enable features flagged at runtime.",
            "static": 1,
            "since": "1.1.0"
        },
        "Ember.EnumerableUtils": {
            "name": "Ember.EnumerableUtils",
            "shortname": "Ember.EnumerableUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "Ember",
            "file": "packages/ember-metal/lib/enumerable_utils.js",
            "line": 10,
            "description": "Defines some convenience methods for working with Enumerables.\n`Ember.EnumerableUtils` uses `Ember.ArrayPolyfills` when necessary.",
            "static": 1
        },
        "Ember.Error": {
            "name": "Ember.Error",
            "shortname": "Ember.Error",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "Ember",
            "file": "packages/ember-metal/lib/error.js",
            "line": 13,
            "description": "A subclass of the JavaScript Error object for use in Ember.",
            "extends": "Error",
            "is_constructor": 1
        },
        "Ember.InjectedProperty": {
            "name": "Ember.InjectedProperty",
            "shortname": "Ember.InjectedProperty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "Ember",
            "file": "packages/ember-metal/lib/injected_property.js",
            "line": 7,
            "description": "Read-only property that returns the result of a container lookup.",
            "extends": "Ember.Descriptor",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "The container type the property will lookup",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "(optional) The name the property will lookup, defaults\n       to the property's name",
                    "type": "String"
                }
            ]
        },
        "Ember.Instrumentation": {
            "name": "Ember.Instrumentation",
            "shortname": "Ember.Instrumentation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "Ember.Instrumentation",
            "file": "packages/ember-metal/lib/instrumentation.js",
            "line": 4,
            "description": "The purpose of the Ember Instrumentation module is\nto provide efficient, general-purpose instrumentation\nfor Ember.\n\nSubscribe to a listener by using `Ember.subscribe`:\n\n```javascript\nEmber.subscribe(\"render\", {\n  before: function(name, timestamp, payload) {\n\n  },\n\n  after: function(name, timestamp, payload) {\n\n  }\n});\n```\n\nIf you return a value from the `before` callback, that same\nvalue will be passed as a fourth parameter to the `after`\ncallback.\n\nInstrument a block of code by using `Ember.instrument`:\n\n```javascript\nEmber.instrument(\"render.handlebars\", payload, function() {\n  // rendering logic\n}, binding);\n```\n\nEvent names passed to `Ember.instrument` are namespaced\nby periods, from more general to more specific. Subscribers\ncan listen for events by whatever level of granularity they\nare interested in.\n\nIn the above example, the event is `render.handlebars`,\nand the subscriber listened for all events beginning with\n`render`. It would receive callbacks for events named\n`render`, `render.handlebars`, `render.container`, or\neven `render.handlebars.layout`.",
            "static": 1
        },
        "Libraries": {
            "name": "Libraries",
            "shortname": "Libraries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "",
            "file": "packages/ember-metal/lib/libraries.js",
            "line": 7,
            "description": "Helper class that allows you to register your library with Ember.\n\nSingleton created at `Ember.libraries`.",
            "is_constructor": 1,
            "access": "private",
            "tagname": ""
        },
        "Ember.Logger": {
            "name": "Ember.Logger",
            "shortname": "Ember.Logger",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "Ember",
            "file": "packages/ember-metal/lib/logger.js",
            "line": 50,
            "description": "Inside Ember-Metal, simply uses the methods from `imports.console`.\nOverride this to provide more robust logging functionality."
        },
        "Backburner": {
            "name": "Backburner",
            "shortname": "Backburner",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "",
            "file": "packages/ember-metal/lib/main.js",
            "line": 369,
            "access": "private",
            "tagname": ""
        },
        "Ember.OrderedSet": {
            "name": "Ember.OrderedSet",
            "shortname": "Ember.OrderedSet",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "Ember",
            "file": "packages/ember-metal/lib/map.js",
            "line": 58,
            "description": "This class is used internally by Ember and Ember Data.\nPlease do not use it at this time. We plan to clean it up\nand add many tests soon.",
            "is_constructor": 1,
            "access": "private",
            "tagname": ""
        },
        "Ember.Map": {
            "name": "Ember.Map",
            "shortname": "Ember.Map",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "Ember",
            "file": "packages/ember-metal/lib/map.js",
            "line": 237,
            "description": "A Map stores values indexed by keys. Unlike JavaScript's\ndefault Objects, the keys of a Map can be any JavaScript\nobject.\n\nInternally, a Map has two data structures:\n\n1. `keys`: an OrderedSet of all of the existing keys\n2. `values`: a JavaScript Object indexed by the `Ember.guidFor(key)`\n\nWhen a key/value pair is added for the first time, we\nadd the key to the `keys` OrderedSet, and create or\nreplace an entry in `values`. When an entry is deleted,\nwe delete its entry in `keys` and `values`.",
            "access": "private",
            "tagname": "",
            "is_constructor": 1
        },
        "Ember.MapWithDefault": {
            "name": "Ember.MapWithDefault",
            "shortname": "Ember.MapWithDefault",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "Ember",
            "file": "packages/ember-metal/lib/map.js",
            "line": 441,
            "extends": "Ember.Map",
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "optional": true,
                    "props": [
                        {
                            "name": "defaultValue",
                            "description": "",
                            "type": "*",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Ember.Mixin": {
            "name": "Ember.Mixin",
            "shortname": "Ember.Mixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember",
            "file": "packages/ember-metal/lib/mixin.js",
            "line": 497,
            "description": "The `Ember.Mixin` class allows you to create mixins, whose properties can be\nadded to other classes. For instance,\n\n```javascript\nApp.Editable = Ember.Mixin.create({\n  edit: function() {\n    console.log('starting to edit');\n    this.set('isEditing', true);\n  },\n  isEditing: false\n});\n\n// Mix mixins into classes by passing them as the first arguments to\n// .extend.\nApp.CommentView = Ember.View.extend(App.Editable, {\n  template: Ember.Handlebars.compile('{{#if view.isEditing}}...{{else}}...{{/if}}')\n});\n\ncommentView = App.CommentView.create();\ncommentView.edit(); // outputs 'starting to edit'\n```\n\nNote that Mixins are created with `Ember.Mixin.create`, not\n`Ember.Mixin.extend`.\n\nNote that mixins extend a constructor's prototype so arrays and object literals\ndefined as properties will be shared amongst objects that implement the mixin.\nIf you want to define a property in a mixin that is not shared, you can define\nit either as a computed property or have it be created on initialization of the object.\n\n```javascript\n//filters array will be shared amongst any object implementing mixin\nApp.Filterable = Ember.Mixin.create({\n  filters: Ember.A()\n});\n\n//filters will be a separate  array for every object implementing the mixin\nApp.Filterable = Ember.Mixin.create({\n  filters: Ember.computed(function() {return Ember.A();})\n});\n\n//filters will be created as a separate array during the object's initialization\nApp.Filterable = Ember.Mixin.create({\n  init: function() {\n    this._super.apply(this, arguments);\n    this.set(\"filters\", Ember.A());\n  }\n});\n```"
        },
        "Ember.Descriptor": {
            "name": "Ember.Descriptor",
            "shortname": "Ember.Descriptor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "Ember",
            "file": "packages/ember-metal/lib/properties.js",
            "line": 16,
            "description": "Objects of this type can implement an interface to respond to requests to\nget and set. The default implementation handles simple properties.\n\nYou generally won't need to create or subclass this directly.",
            "access": "private",
            "tagname": "",
            "is_constructor": 1
        },
        "Ember.run": {
            "name": "Ember.run",
            "shortname": "Ember.run",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-metal",
            "namespace": "Ember",
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 40,
            "description": "Runs the passed target and method inside of a RunLoop, ensuring any\ndeferred actions including bindings and views updates are flushed at the\nend.\n\nNormally you should not need to invoke this method yourself. However if\nyou are implementing raw event handlers when interfacing with other\nlibraries or plugins, you should probably wrap all of your code inside this\ncall.\n\n```javascript\nrun(function() {\n  // code to be executed within a RunLoop\n});\n```",
            "static": 1,
            "is_constructor": 1,
            "params": [
                {
                    "name": "target",
                    "description": "target of method to call",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "method",
                    "description": "Method to invoke.\n  May be a function or a string. If you pass a string\n  then it will be looked up on the passed target.",
                    "type": "Function|String"
                },
                {
                    "name": "args*",
                    "description": "Any additional arguments you wish to pass to the method.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "return value from invoking the passed function.",
                "type": "Object"
            }
        },
        "Ember.LinkView": {
            "name": "Ember.LinkView",
            "shortname": "Ember.LinkView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember",
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 36,
            "description": "`Ember.LinkView` renders an element whose `click` event triggers a\ntransition of the application's instance of `Ember.Router` to\na supplied route by name.\n\nInstances of `LinkView` will most likely be created through\nthe `link-to` Handlebars helper, but properties of this class\ncan be overridden to customize application-wide behavior.",
            "extends": "Ember.View",
            "see": [
                "{Handlebars.helpers.link-to}"
            ]
        },
        "Ember.Location": {
            "name": "Ember.Location",
            "shortname": "Ember.Location",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember",
            "file": "packages/ember-routing/lib/location/api.js",
            "line": 9,
            "description": "Ember.Location returns an instance of the correct implementation of\nthe `location` API.\n\n## Implementations\n\nYou can pass an implementation name (`hash`, `history`, `none`) to force a\nparticular implementation to be used in your application.\n\n### HashLocation\n\nUsing `HashLocation` results in URLs with a `#` (hash sign) separating the\nserver side URL portion of the URL from the portion that is used by Ember.\nThis relies upon the `hashchange` event existing in the browser.\n\nExample:\n\n```javascript\nApp.Router.map(function() {\n  this.resource('posts', function() {\n    this.route('new');\n  });\n});\n\nApp.Router.reopen({\n  location: 'hash'\n});\n```\n\nThis will result in a posts.new url of `/#/posts/new`.\n\n### HistoryLocation\n\nUsing `HistoryLocation` results in URLs that are indistinguishable from a\nstandard URL. This relies upon the browser's `history` API.\n\nExample:\n\n```javascript\nApp.Router.map(function() {\n  this.resource('posts', function() {\n    this.route('new');\n  });\n});\n\nApp.Router.reopen({\n  location: 'history'\n});\n```\n\nThis will result in a posts.new url of `/posts/new`.\n\nKeep in mind that your server must serve the Ember app at all the routes you\ndefine.\n\n### AutoLocation\n\nUsing `AutoLocation`, the router will use the best Location class supported by\nthe browser it is running in.\n\nBrowsers that support the `history` API will use `HistoryLocation`, those that\ndo not, but still support the `hashchange` event will use `HashLocation`, and\nin the rare case neither is supported will use `NoneLocation`.\n\nExample:\n\n```javascript\nApp.Router.map(function() {\n  this.resource('posts', function() {\n    this.route('new');\n  });\n});\n\nApp.Router.reopen({\n  location: 'auto'\n});\n```\n\nThis will result in a posts.new url of `/posts/new` for modern browsers that\nsupport the `history` api or `/#/posts/new` for older ones, like Internet\nExplorer 9 and below.\n\nWhen a user visits a link to your application, they will be automatically\nupgraded or downgraded to the appropriate `Location` class, with the URL\ntransformed accordingly, if needed.\n\nKeep in mind that since some of your users will use `HistoryLocation`, your\nserver must serve the Ember app at all the routes you define.\n\n### NoneLocation\n\nUsing `NoneLocation` causes Ember to not store the applications URL state\nin the actual URL. This is generally used for testing purposes, and is one\nof the changes made when calling `App.setupForTesting()`.\n\n## Location API\n\nEach location implementation must provide the following methods:\n\n* implementation: returns the string name used to reference the implementation.\n* getURL: returns the current URL.\n* setURL(path): sets the current URL.\n* replaceURL(path): replace the current URL (optional).\n* onUpdateURL(callback): triggers the callback when the URL changes.\n* formatURL(url): formats `url` to be placed into `href` attribute.\n\nCalling setURL or replaceURL will not trigger onUpdateURL callbacks.",
            "static": 1
        },
        "Ember.AutoLocation": {
            "name": "Ember.AutoLocation",
            "shortname": "Ember.AutoLocation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember",
            "file": "packages/ember-routing/lib/location/auto_location.js",
            "line": 17,
            "description": "Ember.AutoLocation will select the best location option based off browser\nsupport with the priority order: history, hash, none.\n\nClean pushState paths accessed by hashchange-only browsers will be redirected\nto the hash-equivalent and vice versa so future transitions are consistent.\n\nKeep in mind that since some of your users will use `HistoryLocation`, your\nserver must serve the Ember app at all the routes you define.",
            "static": 1
        },
        "Ember.HashLocation": {
            "name": "Ember.HashLocation",
            "shortname": "Ember.HashLocation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember",
            "file": "packages/ember-routing/lib/location/hash_location.js",
            "line": 15,
            "description": "`Ember.HashLocation` implements the location API using the browser's\nhash. At present, it relies on a `hashchange` event existing in the\nbrowser.",
            "extends": "Ember.Object"
        },
        "Ember.HistoryLocation": {
            "name": "Ember.HistoryLocation",
            "shortname": "Ember.HistoryLocation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember",
            "file": "packages/ember-routing/lib/location/history_location.js",
            "line": 16,
            "description": "Ember.HistoryLocation implements the location API using the browser's\nhistory.pushState API.",
            "extends": "Ember.Object"
        },
        "Ember.NoneLocation": {
            "name": "Ember.NoneLocation",
            "shortname": "Ember.NoneLocation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember",
            "file": "packages/ember-routing/lib/location/none_location.js",
            "line": 10,
            "description": "Ember.NoneLocation does not interact with the browser. It is useful for\ntesting, or when you need to manage state with your Router, but temporarily\ndon't want it to muck with the URL (for example when you embed your\napplication in a larger page).",
            "extends": "Ember.Object"
        },
        "Ember.Route": {
            "name": "Ember.Route",
            "shortname": "Ember.Route",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember",
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 35,
            "description": "The `Ember.Route` class is used to define individual routes. Refer to\nthe [routing guide](http://emberjs.com/guides/routing/) for documentation.",
            "extends": "Ember.Object",
            "uses": [
                "Ember.ActionHandler",
                "Ember.Evented"
            ]
        },
        "Ember.Router": {
            "name": "Ember.Router",
            "shortname": "Ember.Router",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember",
            "file": "packages/ember-routing/lib/system/router.js",
            "line": 36,
            "description": "The `Ember.Router` class manages the application state and URLs. Refer to\nthe [routing guide](http://emberjs.com/guides/routing/) for documentation.",
            "extends": "Ember.Object",
            "uses": [
                "Ember.Evented"
            ]
        },
        "Ember.ReduceComputedProperty": {
            "name": "Ember.ReduceComputedProperty",
            "shortname": "Ember.ReduceComputedProperty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/computed/reduce_computed.js",
            "line": 465,
            "description": "A computed property whose dependent keys are arrays and which is updated with\n\"one at a time\" semantics.",
            "extends": "Ember.ComputedProperty",
            "is_constructor": 1
        },
        "Ember.ArrayController": {
            "name": "Ember.ArrayController",
            "shortname": "Ember.ArrayController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/controllers/array_controller.js",
            "line": 20,
            "description": "`Ember.ArrayController` provides a way for you to publish a collection of\nobjects so that you can easily bind to the collection from a Handlebars\n`#each` helper, an `Ember.CollectionView`, or other controllers.\n\nThe advantage of using an `ArrayController` is that you only have to set up\nyour view bindings once; to change what's displayed, simply swap out the\n`model` property on the controller.\n\nFor example, imagine you wanted to display a list of items fetched via an XHR\nrequest. Create an `Ember.ArrayController` and set its `model` property:\n\n```javascript\nMyApp.listController = Ember.ArrayController.create();\n\n$.get('people.json', function(data) {\n  MyApp.listController.set('model', data);\n});\n```\n\nThen, create a view that binds to your new controller:\n\n```handlebars\n{{#each person in MyApp.listController}}\n  {{person.firstName}} {{person.lastName}}\n{{/each}}\n```\n\nAlthough you are binding to the controller, the behavior of this controller\nis to pass through any methods or properties to the underlying array. This\ncapability comes from `Ember.ArrayProxy`, which this class inherits from.\n\nSometimes you want to display computed properties within the body of an\n`#each` helper that depend on the underlying items in `model`, but are not\npresent on those items.   To do this, set `itemController` to the name of a\ncontroller (probably an `ObjectController`) that will wrap each individual item.\n\nFor example:\n\n```handlebars\n{{#each post in controller}}\n  <li>{{post.title}} ({{post.titleLength}} characters)</li>\n{{/each}}\n```\n\n```javascript\nApp.PostsController = Ember.ArrayController.extend({\n  itemController: 'post'\n});\n\nApp.PostController = Ember.ObjectController.extend({\n  // the `title` property will be proxied to the underlying post.\n  titleLength: function() {\n    return this.get('title').length;\n  }.property('title')\n});\n```\n\nIn some cases it is helpful to return a different `itemController` depending\non the particular item.  Subclasses can do this by overriding\n`lookupItemController`.\n\nFor example:\n\n```javascript\nApp.MyArrayController = Ember.ArrayController.extend({\n  lookupItemController: function( object ) {\n    if (object.get('isSpecial')) {\n      return \"special\"; // use App.SpecialController\n    } else {\n      return \"regular\"; // use App.RegularController\n    }\n  }\n});\n```\n\nThe itemController instances will have a `parentController` property set to\nthe `ArrayController` instance.",
            "extends": "Ember.ArrayProxy",
            "uses": [
                "Ember.SortableMixin",
                "Ember.ControllerMixin"
            ]
        },
        "Ember.Controller": {
            "name": "Ember.Controller",
            "shortname": "Ember.Controller",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/controllers/controller.js",
            "line": 11,
            "extends": "Ember.Object",
            "uses": [
                "Ember.ControllerMixin"
            ]
        },
        "Ember.inject": {
            "name": "Ember.inject",
            "shortname": "Ember.inject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/inject.js",
            "line": 6,
            "description": "Namespace for injection helper methods.",
            "static": 1
        },
        "Ember.ObjectController": {
            "name": "Ember.ObjectController",
            "shortname": "Ember.ObjectController",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/controllers/object_controller.js",
            "line": 13,
            "description": "`Ember.ObjectController` is part of Ember's Controller layer. It is intended\nto wrap a single object, proxying unhandled attempts to `get` and `set` to the underlying\nmodel object, and to forward unhandled action attempts to its `target`.\n\n`Ember.ObjectController` derives this functionality from its superclass\n`Ember.ObjectProxy` and the `Ember.ControllerMixin` mixin.",
            "extends": "Ember.ObjectProxy",
            "uses": [
                "Ember.ControllerMixin"
            ],
            "deprecated": true
        },
        "Function": {
            "name": "Function",
            "shortname": "Function",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": ""
        },
        "Ember.ProxyMixin": {
            "name": "Ember.ProxyMixin",
            "shortname": "Ember.ProxyMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/-proxy.js",
            "line": 37,
            "description": "`Ember.ProxyMixin` forwards all properties not defined by the proxy itself\nto a proxied `content` object.  See Ember.ObjectProxy for more details."
        },
        "Ember.ActionHandler": {
            "name": "Ember.ActionHandler",
            "shortname": "Ember.ActionHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.ControllerMixin",
                "Ember.Route",
                "Ember.CoreView"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/action_handler.js",
            "line": 10,
            "description": "The `Ember.ActionHandler` mixin implements support for moving an `actions`\nproperty to an `_actions` property at extend time, and adding `_actions`\nto the object's mergedProperties list.\n\n`Ember.ActionHandler` is available on some familiar classes including\n`Ember.Route`, `Ember.View`, `Ember.Component`, and controllers such as\n`Ember.Controller` and `Ember.ObjectController`.\n(Internally the mixin is used by `Ember.CoreView`, `Ember.ControllerMixin`,\nand `Ember.Route` and available to the above classes through\ninheritance.)"
        },
        "Ember.Array": {
            "name": "Ember.Array",
            "shortname": "Ember.Array",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.MutableArray"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/array.js",
            "line": 57,
            "description": "This mixin implements Observer-friendly Array-like behavior. It is not a\nconcrete implementation, but it can be used up by other classes that want\nto appear like arrays.\n\nFor example, ArrayProxy and ArrayController are both concrete classes that can\nbe instantiated to implement array-like behavior. Both of these classes use\nthe Array Mixin by way of the MutableArray mixin, which allows observable\nchanges to be made to the underlying array.\n\nUnlike `Ember.Enumerable,` this mixin defines methods specifically for\ncollections that provide index-ordered access to their contents. When you\nare designing code that needs to accept any kind of Array-like object, you\nshould use these methods instead of Array primitives because these will\nproperly notify observers of changes to the array.\n\nAlthough these methods are efficient, they do add a layer of indirection to\nyour application so it is a good idea to use them only when you need the\nflexibility of using both true JavaScript arrays and \"virtual\" arrays such\nas controllers and collections.\n\nYou can use the methods defined in this module to access and modify array\ncontents in a KVO-friendly way. You can also be notified whenever the\nmembership of an array changes by using `.observes('myArray.[]')`.\n\nTo support `Ember.Array` in your own class, you must override two\nprimitives to use it: `replace()` and `objectAt()`.\n\nNote that the Ember.Array mixin also incorporates the `Ember.Enumerable`\nmixin. All `Ember.Array`-like objects are also enumerable.",
            "uses": [
                "Ember.Enumerable"
            ],
            "since": "Ember 0.9.0"
        },
        "Ember.Comparable": {
            "name": "Ember.Comparable",
            "shortname": "Ember.Comparable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/comparable.js",
            "line": 11,
            "description": "Implements some standard methods for comparing objects. Add this mixin to\nany class you create that can compare its instances.\n\nYou should implement the `compare()` method.",
            "since": "Ember 0.9"
        },
        "Ember.Copyable": {
            "name": "Ember.Copyable",
            "shortname": "Ember.Copyable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.NativeArray",
                "Ember.Set"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/copyable.js",
            "line": 14,
            "description": "Implements some standard methods for copying an object. Add this mixin to\nany object you create that can create a copy of itself. This mixin is\nadded automatically to the built-in array.\n\nYou should generally implement the `copy()` method to return a copy of the\nreceiver.\n\nNote that `frozenCopy()` will only work if you also implement\n`Ember.Freezable`.",
            "since": "Ember 0.9"
        },
        "Ember.Deferred": {
            "name": "Ember.Deferred",
            "shortname": "Ember.Deferred",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/deferred.js",
            "line": 13
        },
        "Ember.Enumerable": {
            "name": "Ember.Enumerable",
            "shortname": "Ember.Enumerable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.Array",
                "Ember.MutableEnumerable"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 57,
            "description": "This mixin defines the common interface implemented by enumerable objects\nin Ember. Most of these methods follow the standard Array iteration\nAPI defined up to JavaScript 1.8 (excluding language-specific features that\ncannot be emulated in older versions of JavaScript).\n\nThis mixin is applied automatically to the Array class on page load, so you\ncan use any of these methods on simple arrays. If Array already implements\none of these methods, the mixin will not override them.\n\n## Writing Your Own Enumerable\n\nTo make your own custom class enumerable, you need two items:\n\n1. You must have a length property. This property should change whenever\n   the number of items in your enumerable object changes. If you use this\n   with an `Ember.Object` subclass, you should be sure to change the length\n   property using `set().`\n\n2. You must implement `nextObject().` See documentation.\n\nOnce you have these two methods implemented, apply the `Ember.Enumerable` mixin\nto your class and you will be able to enumerate the contents of your object\nlike any other collection.\n\n## Using Ember Enumeration with Other Libraries\n\nMany other libraries provide some kind of iterator or enumeration like\nfacility. This is often where the most common API conflicts occur.\nEmber's API is designed to be as friendly as possible with other\nlibraries by implementing only methods that mostly correspond to the\nJavaScript 1.8 API.",
            "since": "Ember 0.9"
        },
        "Ember.Evented": {
            "name": "Ember.Evented",
            "shortname": "Ember.Evented",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.Route",
                "Ember.Router",
                "Ember.CoreView"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/evented.js",
            "line": 14,
            "description": "This mixin allows for Ember objects to subscribe to and emit events.\n\n```javascript\nApp.Person = Ember.Object.extend(Ember.Evented, {\n  greet: function() {\n    // ...\n    this.trigger('greet');\n  }\n});\n\nvar person = App.Person.create();\n\nperson.on('greet', function() {\n  console.log('Our person has greeted');\n});\n\nperson.greet();\n\n// outputs: 'Our person has greeted'\n```\n\nYou can also chain multiple event subscriptions:\n\n```javascript\nperson.on('greet', function() {\n  console.log('Our person has greeted');\n}).one('greet', function() {\n  console.log('Offer one-time special');\n}).off('event', this, forgetThis);\n```"
        },
        "Ember.Freezable": {
            "name": "Ember.Freezable",
            "shortname": "Ember.Freezable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.Set"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/freezable.js",
            "line": 10,
            "description": "The `Ember.Freezable` mixin implements some basic methods for marking an\nobject as frozen. Once an object is frozen it should be read only. No changes\nmay be made the internal state of the object.\n\n## Enforcement\n\nTo fully support freezing in your subclass, you must include this mixin and\noverride any method that might alter any property on the object to instead\nraise an exception. You can check the state of an object by checking the\n`isFrozen` property.\n\nAlthough future versions of JavaScript may support language-level freezing\nobject objects, that is not the case today. Even if an object is freezable,\nit is still technically possible to modify the object, even though it could\nbreak other parts of your application that do not expect a frozen object to\nchange. It is, therefore, very important that you always respect the\n`isFrozen` property on all freezable objects.\n\n## Example Usage\n\nThe example below shows a simple object that implement the `Ember.Freezable`\nprotocol.\n\n```javascript\nContact = Ember.Object.extend(Ember.Freezable, {\n  firstName: null,\n  lastName: null,\n\n  // swaps the names\n  swapNames: function() {\n    if (this.get('isFrozen')) throw Ember.FROZEN_ERROR;\n    var tmp = this.get('firstName');\n    this.set('firstName', this.get('lastName'));\n    this.set('lastName', tmp);\n    return this;\n  }\n\n});\n\nc = Contact.create({ firstName: \"John\", lastName: \"Doe\" });\nc.swapNames();  // returns c\nc.freeze();\nc.swapNames();  // EXCEPTION\n```\n\n## Copying\n\nUsually the `Ember.Freezable` protocol is implemented in cooperation with the\n`Ember.Copyable` protocol, which defines a `frozenCopy()` method that will\nreturn a frozen object, if the object implements this method as well.",
            "since": "Ember 0.9"
        },
        "Ember.MutableArray": {
            "name": "Ember.MutableArray",
            "shortname": "Ember.MutableArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.ArrayProxy",
                "Ember.NativeArray"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
            "line": 31,
            "description": "This mixin defines the API for modifying array-like objects. These methods\ncan be applied only to a collection that keeps its items in an ordered set.\nIt builds upon the Array mixin and adds methods to modify the array.\nConcrete implementations of this class include ArrayProxy and ArrayController.\n\nIt is important to use the methods in this class to modify arrays so that\nchanges are observable. This allows the binding system in Ember to function\ncorrectly.\n\n\nNote that an Array can change even if it does not implement this mixin.\nFor example, one might implement a SparseArray that cannot be directly\nmodified, but if its underlying enumerable changes, it will change also.",
            "uses": [
                "Ember.Array",
                "Ember.MutableEnumerable"
            ]
        },
        "Ember.MutableEnumerable": {
            "name": "Ember.MutableEnumerable",
            "shortname": "Ember.MutableEnumerable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.MutableArray",
                "Ember.SortableMixin",
                "Ember.Set"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/mutable_enumerable.js",
            "line": 11,
            "description": "This mixin defines the API for modifying generic enumerables. These methods\ncan be applied to an object regardless of whether it is ordered or\nunordered.\n\nNote that an Enumerable can change even if it does not implement this mixin.\nFor example, a MappedEnumerable cannot be directly modified but if its\nunderlying enumerable changes, it will change also.\n\n## Adding Objects\n\nTo add an object to an enumerable, use the `addObject()` method. This\nmethod will only add the object to the enumerable if the object is not\nalready present and is of a type supported by the enumerable.\n\n```javascript\nset.addObject(contact);\n```\n\n## Removing Objects\n\nTo remove an object from an enumerable, use the `removeObject()` method. This\nwill only remove the object if it is present in the enumerable, otherwise\nthis method has no effect.\n\n```javascript\nset.removeObject(contact);\n```\n\n## Implementing In Your Own Code\n\nIf you are implementing an object and want to support this API, just include\nthis mixin in your class and implement the required methods. In your unit\ntests, be sure to apply the Ember.MutableEnumerableTests to your object.",
            "uses": [
                "Ember.Enumerable"
            ]
        },
        "Ember.Observable": {
            "name": "Ember.Observable",
            "shortname": "Ember.Observable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.NativeArray",
                "Ember.Object"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/observable.js",
            "line": 34,
            "description": "## Overview\n\nThis mixin provides properties and property observing functionality, core\nfeatures of the Ember object model.\n\nProperties and observers allow one object to observe changes to a\nproperty on another object. This is one of the fundamental ways that\nmodels, controllers and views communicate with each other in an Ember\napplication.\n\nAny object that has this mixin applied can be used in observer\noperations. That includes `Ember.Object` and most objects you will\ninteract with as you write your Ember application.\n\nNote that you will not generally apply this mixin to classes yourself,\nbut you will use the features provided by this module frequently, so it\nis important to understand how to use it.\n\n## Using `get()` and `set()`\n\nBecause of Ember's support for bindings and observers, you will always\naccess properties using the get method, and set properties using the\nset method. This allows the observing objects to be notified and\ncomputed properties to be handled properly.\n\nMore documentation about `get` and `set` are below.\n\n## Observing Property Changes\n\nYou typically observe property changes simply by adding the `observes`\ncall to the end of your method declarations in classes that you write.\nFor example:\n\n```javascript\nEmber.Object.extend({\n  valueObserver: function() {\n    // Executes whenever the \"value\" property changes\n  }.observes('value')\n});\n```\n\nAlthough this is the most common way to add an observer, this capability\nis actually built into the `Ember.Object` class on top of two methods\ndefined in this mixin: `addObserver` and `removeObserver`. You can use\nthese two methods to add and remove observers yourself if you need to\ndo so at runtime.\n\nTo add an observer for a property, call:\n\n```javascript\nobject.addObserver('propertyKey', targetObject, targetAction)\n```\n\nThis will call the `targetAction` method on the `targetObject` whenever\nthe value of the `propertyKey` changes.\n\nNote that if `propertyKey` is a computed property, the observer will be\ncalled when any of the property dependencies are changed, even if the\nresulting value of the computed property is unchanged. This is necessary\nbecause computed properties are not computed until `get` is called."
        },
        "Ember.PromiseProxyMixin": {
            "name": "Ember.PromiseProxyMixin",
            "shortname": "Ember.PromiseProxyMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "",
            "file": "packages/ember-runtime/lib/mixins/promise_proxy.js",
            "line": 36,
            "description": "A low level mixin making ObjectProxy, ObjectController or ArrayController's promise aware.\n\n```javascript\nvar ObjectPromiseController = Ember.ObjectController.extend(Ember.PromiseProxyMixin);\n\nvar controller = ObjectPromiseController.create({\n  promise: $.getJSON('/some/remote/data.json')\n});\n\ncontroller.then(function(json){\n   // the json\n}, function(reason) {\n   // the reason why you have no json\n});\n```\n\nthe controller has bindable attributes which\ntrack the promises life cycle\n\n```javascript\ncontroller.get('isPending')   //=> true\ncontroller.get('isSettled')  //=> false\ncontroller.get('isRejected')  //=> false\ncontroller.get('isFulfilled') //=> false\n```\n\nWhen the the $.getJSON completes, and the promise is fulfilled\nwith json, the life cycle attributes will update accordingly.\n\n```javascript\ncontroller.get('isPending')   //=> false\ncontroller.get('isSettled')   //=> true\ncontroller.get('isRejected')  //=> false\ncontroller.get('isFulfilled') //=> true\n```\n\nAs the controller is an ObjectController, and the json now its content,\nall the json properties will be available directly from the controller.\n\n```javascript\n// Assuming the following json:\n{\n  firstName: 'Stefan',\n  lastName: 'Penner'\n}\n\n// both properties will accessible on the controller\ncontroller.get('firstName') //=> 'Stefan'\ncontroller.get('lastName')  //=> 'Penner'\n```\n\nIf the controller is backing a template, the attributes are\nbindable from within that template\n\n```handlebars\n{{#if isPending}}\n  loading...\n{{else}}\n  firstName: {{firstName}}\n  lastName: {{lastName}}\n{{/if}}\n```"
        },
        "Ember.SortableMixin": {
            "name": "Ember.SortableMixin",
            "shortname": "Ember.SortableMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.ArrayController"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/sortable.js",
            "line": 24,
            "description": "`Ember.SortableMixin` provides a standard interface for array proxies\nto specify a sort order and maintain this sorting when objects are added,\nremoved, or updated without changing the implicit order of their underlying\nmodel array:\n\n```javascript\nsongs = [\n  {trackNumber: 4, title: 'Ob-La-Di, Ob-La-Da'},\n  {trackNumber: 2, title: 'Back in the U.S.S.R.'},\n  {trackNumber: 3, title: 'Glass Onion'},\n];\n\nsongsController = Ember.ArrayController.create({\n  model: songs,\n  sortProperties: ['trackNumber'],\n  sortAscending: true\n});\n\nsongsController.get('firstObject');  // {trackNumber: 2, title: 'Back in the U.S.S.R.'}\n\nsongsController.addObject({trackNumber: 1, title: 'Dear Prudence'});\nsongsController.get('firstObject');  // {trackNumber: 1, title: 'Dear Prudence'}\n```\n\nIf you add or remove the properties to sort by or change the sort direction the model\nsort order will be automatically updated.\n\n```javascript\nsongsController.set('sortProperties', ['title']);\nsongsController.get('firstObject'); // {trackNumber: 2, title: 'Back in the U.S.S.R.'}\n\nsongsController.toggleProperty('sortAscending');\nsongsController.get('firstObject'); // {trackNumber: 4, title: 'Ob-La-Di, Ob-La-Da'}\n```\n\n`SortableMixin` works by sorting the `arrangedContent` array, which is the array that\n`ArrayProxy` displays. Due to the fact that the underlying 'content' array is not changed, that\narray will not display the sorted list:\n\n ```javascript\nsongsController.get('content').get('firstObject'); // Returns the unsorted original content\nsongsController.get('firstObject'); // Returns the sorted content.\n```\n\nAlthough the sorted content can also be accessed through the `arrangedContent` property,\nit is preferable to use the proxied class and not the `arrangedContent` array directly.",
            "uses": [
                "Ember.MutableEnumerable"
            ]
        },
        "Ember.TargetActionSupport": {
            "name": "Ember.TargetActionSupport",
            "shortname": "Ember.TargetActionSupport",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.TextSupport"
            ],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/mixins/target_action_support.js",
            "line": 12,
            "description": "`Ember.TargetActionSupport` is a mixin that can be included in a class\nto add a `triggerAction` method with semantics similar to the Handlebars\n`{{action}}` helper. In normal Ember usage, the `{{action}}` helper is\nusually the best choice. This mixin is most often useful when you are\ndoing more complex event handling in View objects.\n\nSee also `Ember.ViewTargetActionSupport`, which has\nview-aware defaults for target and actionContext.",
            "extends": "Ember.Mixin"
        },
        "Ember.ArrayProxy": {
            "name": "Ember.ArrayProxy",
            "shortname": "Ember.ArrayProxy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/system/array_proxy.js",
            "line": 33,
            "description": "An ArrayProxy wraps any other object that implements `Ember.Array` and/or\n`Ember.MutableArray,` forwarding all requests. This makes it very useful for\na number of binding use cases or other cases where being able to swap\nout the underlying array is useful.\n\nA simple example of usage:\n\n```javascript\nvar pets = ['dog', 'cat', 'fish'];\nvar ap = Ember.ArrayProxy.create({ content: Ember.A(pets) });\n\nap.get('firstObject');                        // 'dog'\nap.set('content', ['amoeba', 'paramecium']);\nap.get('firstObject');                        // 'amoeba'\n```\n\nThis class can also be useful as a layer to transform the contents of\nan array, as they are accessed. This can be done by overriding\n`objectAtContent`:\n\n```javascript\nvar pets = ['dog', 'cat', 'fish'];\nvar ap = Ember.ArrayProxy.create({\n    content: Ember.A(pets),\n    objectAtContent: function(idx) {\n        return this.get('content').objectAt(idx).toUpperCase();\n    }\n});\n\nap.get('firstObject'); // . 'DOG'\n```",
            "extends": "Ember.Object",
            "uses": [
                "Ember.MutableArray"
            ]
        },
        "Ember.CoreObject": {
            "name": "Ember.CoreObject",
            "shortname": "Ember.CoreObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/system/core_object.js",
            "line": 225
        },
        "Ember.EachProxy": {
            "name": "Ember.EachProxy",
            "shortname": "Ember.EachProxy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/system/each_proxy.js",
            "line": 104,
            "description": "This is the object instance returned when you get the `@each` property on an\narray. It uses the unknownProperty handler to automatically create\nEachArray instances for property names.",
            "access": "private",
            "tagname": "",
            "extends": "Ember.Object"
        },
        "Ember.Namespace": {
            "name": "Ember.Namespace",
            "shortname": "Ember.Namespace",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/system/namespace.js",
            "line": 18,
            "description": "A Namespace is an object usually used to contain other objects or methods\nsuch as an application or framework. Create a namespace anytime you want\nto define one of these new containers.\n\n# Example Usage\n\n```javascript\nMyFramework = Ember.Namespace.create({\n  VERSION: '1.0.0'\n});\n```",
            "extends": "Ember.Object"
        },
        "Ember.NativeArray": {
            "name": "Ember.NativeArray",
            "shortname": "Ember.NativeArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/system/native_array.js",
            "line": 26,
            "description": "The NativeArray mixin contains the properties needed to make the native\nArray support Ember.MutableArray and all of its dependent APIs. Unless you\nhave `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Array` set to\nfalse, this will be applied automatically. Otherwise you can apply the mixin\nat anytime by calling `Ember.NativeArray.activate`.",
            "uses": [
                "Ember.MutableArray",
                "Ember.Observable",
                "Ember.Copyable"
            ]
        },
        "Ember.Object": {
            "name": "Ember.Object",
            "shortname": "Ember.Object",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/system/object.js",
            "line": 9,
            "description": "`Ember.Object` is the main base class for all Ember objects. It is a subclass\nof `Ember.CoreObject` with the `Ember.Observable` mixin applied. For details,\nsee the documentation for each of these.",
            "extends": "Ember.CoreObject",
            "uses": [
                "Ember.Observable"
            ]
        },
        "Ember.ObjectProxy": {
            "name": "Ember.ObjectProxy",
            "shortname": "Ember.ObjectProxy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/system/object_proxy.js",
            "line": 4,
            "description": "`Ember.ObjectProxy` forwards all properties not defined by the proxy itself\nto a proxied `content` object.\n\n```javascript\nobject = Ember.Object.create({\n  name: 'Foo'\n});\n\nproxy = Ember.ObjectProxy.create({\n  content: object\n});\n\n// Access and change existing properties\nproxy.get('name')          // 'Foo'\nproxy.set('name', 'Bar');\nobject.get('name')         // 'Bar'\n\n// Create new 'description' property on `object`\nproxy.set('description', 'Foo is a whizboo baz');\nobject.get('description')  // 'Foo is a whizboo baz'\n```\n\nWhile `content` is unset, setting a property to be delegated will throw an\nError.\n\n```javascript\nproxy = Ember.ObjectProxy.create({\n  content: null,\n  flag: null\n});\nproxy.set('flag', true);\nproxy.get('flag');         // true\nproxy.get('foo');          // undefined\nproxy.set('foo', 'data');  // throws Error\n```\n\nDelegated properties can be bound to and will change when content is updated.\n\nComputed properties on the proxy itself can depend on delegated properties.\n\n```javascript\nProxyWithComputedProperty = Ember.ObjectProxy.extend({\n  fullName: function () {\n    var firstName = this.get('firstName'),\n        lastName = this.get('lastName');\n    if (firstName && lastName) {\n      return firstName + ' ' + lastName;\n    }\n    return firstName || lastName;\n  }.property('firstName', 'lastName')\n});\n\nproxy = ProxyWithComputedProperty.create();\n\nproxy.get('fullName');  // undefined\nproxy.set('content', {\n  firstName: 'Tom', lastName: 'Dale'\n}); // triggers property change for fullName on proxy\n\nproxy.get('fullName');  // 'Tom Dale'\n```",
            "extends": "Ember._ProxyMixin"
        },
        "Ember.Service": {
            "name": "Ember.Service",
            "shortname": "Ember.Service",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/system/service.js",
            "line": 34,
            "extends": "Ember.Object",
            "since": "1.10.0"
        },
        "Ember.Set": {
            "name": "Ember.Set",
            "shortname": "Ember.Set",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/system/set.js",
            "line": 28,
            "description": "An unordered collection of objects.\n\nA Set works a bit like an array except that its items are not ordered. You\ncan create a set to efficiently test for membership for an object. You can\nalso iterate through a set just like an array, even accessing objects by\nindex, however there is no guarantee as to their order.\n\nAll Sets are observable via the Enumerable Observer API - which works\non any enumerable object including both Sets and Arrays.\n\n## Creating a Set\n\nYou can create a set like you would most objects using\n`new Ember.Set()`. Most new sets you create will be empty, but you can\nalso initialize the set with some content by passing an array or other\nenumerable of objects to the constructor.\n\nFinally, you can pass in an existing set and the set will be copied. You\ncan also create a copy of a set by calling `Ember.Set#copy()`.\n\n```javascript\n// creates a new empty set\nvar foundNames = new Ember.Set();\n\n// creates a set with four names in it.\nvar names = new Ember.Set([\"Charles\", \"Tom\", \"Juan\", \"Alex\"]); // :P\n\n// creates a copy of the names set.\nvar namesCopy = new Ember.Set(names);\n\n// same as above.\nvar anotherNamesCopy = names.copy();\n```\n\n## Adding/Removing Objects\n\nYou generally add or remove objects from a set using `add()` or\n`remove()`. You can add any type of object including primitives such as\nnumbers, strings, and booleans.\n\nUnlike arrays, objects can only exist one time in a set. If you call `add()`\non a set with the same object multiple times, the object will only be added\nonce. Likewise, calling `remove()` with the same object multiple times will\nremove the object the first time and have no effect on future calls until\nyou add the object to the set again.\n\nNOTE: You cannot add/remove `null` or `undefined` to a set. Any attempt to do\nso will be ignored.\n\nIn addition to add/remove you can also call `push()`/`pop()`. Push behaves\njust like `add()` but `pop()`, unlike `remove()` will pick an arbitrary\nobject, remove it and return it. This is a good way to use a set as a job\nqueue when you don't care which order the jobs are executed in.\n\n## Testing for an Object\n\nTo test for an object's presence in a set you simply call\n`Ember.Set#contains()`.\n\n## Observing changes\n\nWhen using `Ember.Set`, you can observe the `\"[]\"` property to be\nalerted whenever the content changes. You can also add an enumerable\nobserver to the set to be notified of specific objects that are added and\nremoved from the set. See [Ember.Enumerable](/api/classes/Ember.Enumerable.html)\nfor more information on enumerables.\n\nThis is often unhelpful. If you are filtering sets of objects, for instance,\nit is very inefficient to re-filter all of the items each time the set\nchanges. It would be better if you could just adjust the filtered set based\non what was changed on the original set. The same issue applies to merging\nsets, as well.\n\n## Other Methods\n\n`Ember.Set` primary implements other mixin APIs. For a complete reference\non the methods you will use with `Ember.Set`, please consult these mixins.\nThe most useful ones will be `Ember.Enumerable` and\n`Ember.MutableEnumerable` which implement most of the common iterator\nmethods you are used to on Array.\n\nNote that you can also use the `Ember.Copyable` and `Ember.Freezable`\nAPIs on `Ember.Set` as well. Once a set is frozen it can no longer be\nmodified. The benefit of this is that when you call `frozenCopy()` on it,\nEmber will avoid making copies of the set. This allows you to write\ncode that can know with certainty when the underlying set data will or\nwill not be modified.",
            "extends": "Ember.CoreObject",
            "uses": [
                "Ember.MutableEnumerable",
                "Ember.Copyable",
                "Ember.Freezable"
            ],
            "since": "Ember 0.9",
            "deprecated": true
        },
        "Ember.SubArray": {
            "name": "Ember.SubArray",
            "shortname": "Ember.SubArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/system/subarray.js",
            "line": 14,
            "description": "An `Ember.SubArray` tracks an array in a way similar to, but more specialized\nthan, `Ember.TrackedArray`.  It is useful for keeping track of the indexes of\nitems within a filtered array."
        },
        "Ember.TrackedArray": {
            "name": "Ember.TrackedArray",
            "shortname": "Ember.TrackedArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "Ember",
            "file": "packages/ember-runtime/lib/system/tracked_array.js",
            "line": 10,
            "description": "An `Ember.TrackedArray` tracks array operations.  It's useful when you want to\nlazily compute the indexes of items in an array after they've been shifted by\nsubsequent operations.",
            "params": [
                {
                    "name": "items",
                    "description": "The array to be tracked.  This is used just to get\nthe initial items for the starting state of retain:n.",
                    "type": "Array",
                    "optional": true,
                    "optdefault": "[]"
                }
            ]
        },
        "Ember.Test.Adapter": {
            "name": "Ember.Test.Adapter",
            "shortname": "Ember.Test.Adapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember.Test",
            "file": "packages/ember-testing/lib/adapters/adapter.js",
            "line": 10,
            "description": "The primary purpose of this class is to create hooks that can be implemented\nby an adapter for various test frameworks."
        },
        "Ember.Test.QUnitAdapter": {
            "name": "Ember.Test.QUnitAdapter",
            "shortname": "Ember.Test.QUnitAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "Ember.Test",
            "file": "packages/ember-testing/lib/adapters/qunit.js",
            "line": 4,
            "description": "This class implements the methods defined by Ember.Test.Adapter for the\nQUnit testing framework.",
            "extends": "Ember.Test.Adapter"
        },
        "Ember.Test": {
            "name": "Ember.Test",
            "shortname": "Ember.Test",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember",
            "file": "packages/ember-testing/lib/test.js",
            "line": 16,
            "description": "This is a container for an assortment of testing related functionality:\n\n* Choose your default test adapter (for your framework of choice).\n* Register/Unregister additional test helpers.\n* Setup callbacks to be fired when the test helpers are injected into\n  your application."
        },
        "Ember.TextSupport": {
            "name": "Ember.TextSupport",
            "shortname": "Ember.TextSupport",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember.TextArea",
                "Ember.TextField"
            ],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "packages/ember-views/lib/mixins/text_support.js",
            "line": 11,
            "description": "`TextSupport` is a shared mixin used by both `Ember.TextField` and\n`Ember.TextArea`. `TextSupport` adds a number of methods that allow you to\nspecify a controller action to invoke when a certain event is fired on your\ntext field or textarea. The specifed controller action would get the current\nvalue of the field passed in as the only argument unless the value of\nthe field is empty. In that case, the instance of the field itself is passed\nin as the only argument.\n\nLet's use the pressing of the escape key as an example. If you wanted to\ninvoke a controller action when a user presses the escape key while on your\nfield, you would use the `escape-press` attribute on your field like so:\n\n```handlebars\n  {{! application.hbs}}\n\n  {{input escape-press='alertUser'}}\n```\n\n```javascript\n    App = Ember.Application.create();\n\n    App.ApplicationController = Ember.Controller.extend({\n      actions: {\n        alertUser: function ( currentValue ) {\n          alert( 'escape pressed, current value: ' + currentValue );\n        }\n      }\n    });\n```\n\nThe following chart is a visual representation of what takes place when the\nescape key is pressed in this scenario:\n\nThe Template\n+---------------------------+\n|                           |\n| escape-press='alertUser'  |\n|                           |          TextSupport Mixin\n+----+----------------------+          +-------------------------------+\n     |                                 | cancel method                 |\n     |      escape button pressed      |                               |\n     +-------------------------------> | checks for the `escape-press` |\n                                       | attribute and pulls out the   |\n     +-------------------------------+ | `alertUser` value             |\n     |     action name 'alertUser'     +-------------------------------+\n     |     sent to controller\n     v\nController\n+------------------------------------------ +\n|                                           |\n|  actions: {                               |\n|     alertUser: function( currentValue ){  |\n|       alert( 'the esc key was pressed!' ) |\n|     }                                     |\n|  }                                        |\n|                                           |\n+-------------------------------------------+\n\nHere are the events that we currently support along with the name of the\nattribute you would need to use on your field. To reiterate, you would use the\nattribute name like so:\n\n```handlebars\n  {{input attribute-name='controllerAction'}}\n```\n\n+--------------------+----------------+\n|                    |                |\n| event              | attribute name |\n+--------------------+----------------+\n| new line inserted  | insert-newline |\n|                    |                |\n| enter key pressed  | insert-newline |\n|                    |                |\n| cancel key pressed | escape-press   |\n|                    |                |\n| focusin            | focus-in       |\n|                    |                |\n| focusout           | focus-out      |\n|                    |                |\n| keypress           | key-press      |\n|                    |                |\n| keyup              | key-up         |\n|                    |                |\n| keydown            | key-down       |\n+--------------------+----------------+",
            "uses": [
                "Ember.TargetActionSupport"
            ],
            "extends": "Ember.Mixin",
            "access": "private",
            "tagname": ""
        },
        "Ember.ViewTargetActionSupport": {
            "name": "Ember.ViewTargetActionSupport",
            "shortname": "Ember.ViewTargetActionSupport",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "Ember",
            "file": "packages/ember-views/lib/mixins/view_target_action_support.js",
            "line": 5,
            "description": "`Ember.ViewTargetActionSupport` is a mixin that can be included in a\nview class to add a `triggerAction` method with semantics similar to\nthe Handlebars `{{action}}` helper. It provides intelligent defaults\nfor the action's target: the view's controller; and the context that is\nsent with the action: the view's context.\n\nNote: In normal Ember usage, the `{{action}}` helper is usually the best\nchoice. This mixin is most often useful when you are doing more complex\nevent handling in custom View subclasses.\n\nFor example:\n\n```javascript\nApp.SaveButtonView = Ember.View.extend(Ember.ViewTargetActionSupport, {\n  action: 'save',\n  click: function() {\n    this.triggerAction(); // Sends the `save` action, along with the current context\n                          // to the current controller\n  }\n});\n```\n\nThe `action` can be provided as properties of an optional object argument\nto `triggerAction` as well.\n\n```javascript\nApp.SaveButtonView = Ember.View.extend(Ember.ViewTargetActionSupport, {\n  click: function() {\n    this.triggerAction({\n      action: 'save'\n    }); // Sends the `save` action, along with the current context\n        // to the current controller\n  }\n});\n```",
            "extends": "Ember.TargetActionSupport"
        },
        "Ember.EventDispatcher": {
            "name": "Ember.EventDispatcher",
            "shortname": "Ember.EventDispatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "packages/ember-views/lib/system/event_dispatcher.js",
            "line": 22,
            "description": "`Ember.EventDispatcher` handles delegating browser events to their\ncorresponding `Ember.Views.` For example, when you click on a view,\n`Ember.EventDispatcher` ensures that that view's `mouseDown` method gets\ncalled.",
            "access": "private",
            "tagname": "",
            "extends": "Ember.Object"
        },
        "Ember.Checkbox": {
            "name": "Ember.Checkbox",
            "shortname": "Ember.Checkbox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "packages/ember-views/lib/views/checkbox.js",
            "line": 10,
            "description": "The internal class used to create text inputs when the `{{input}}`\nhelper is used with `type` of `checkbox`.\n\nSee [handlebars.helpers.input](/api/classes/Ember.Handlebars.helpers.html#method_input)  for usage details.\n\n## Direct manipulation of `checked`\n\nThe `checked` attribute of an `Ember.Checkbox` object should always be set\nthrough the Ember object or by interacting with its rendered element\nrepresentation via the mouse, keyboard, or touch. Updating the value of the\ncheckbox via jQuery will result in the checked value of the object and its\nelement losing synchronization.\n\n## Layout and LayoutName properties\n\nBecause HTML `input` elements are self closing `layout` and `layoutName`\nproperties will not be applied. See [Ember.View](/api/classes/Ember.View.html)'s\nlayout section for more information.",
            "extends": "Ember.View"
        },
        "Ember.CollectionView": {
            "name": "Ember.CollectionView",
            "shortname": "Ember.CollectionView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "packages/ember-views/lib/views/collection_view.js",
            "line": 22,
            "description": "`Ember.CollectionView` is an `Ember.View` descendent responsible for managing\na collection (an array or array-like object) by maintaining a child view object\nand associated DOM representation for each item in the array and ensuring\nthat child views and their associated rendered HTML are updated when items in\nthe array are added, removed, or replaced.\n\n## Setting content\n\nThe managed collection of objects is referenced as the `Ember.CollectionView`\ninstance's `content` property.\n\n```javascript\nsomeItemsView = Ember.CollectionView.create({\n  content: ['A', 'B','C']\n})\n```\n\nThe view for each item in the collection will have its `content` property set\nto the item.\n\n## Specifying `itemViewClass`\n\nBy default the view class for each item in the managed collection will be an\ninstance of `Ember.View`. You can supply a different class by setting the\n`CollectionView`'s `itemViewClass` property.\n\nGiven the following application code:\n\n```javascript\nvar App = Ember.Application.create();\nApp.ItemListView = Ember.CollectionView.extend({\n  classNames: ['a-collection'],\n  content: ['A','B','C'],\n  itemViewClass: Ember.View.extend({\n    template: Ember.Handlebars.compile(\"the letter: {{view.content}}\")\n  })\n});\n```\n\nAnd a simple application template:\n\n```handlebars\n{{view 'item-list'}}\n```\n\nThe following HTML will result:\n\n```html\n<div class=\"ember-view a-collection\">\n  <div class=\"ember-view\">the letter: A</div>\n  <div class=\"ember-view\">the letter: B</div>\n  <div class=\"ember-view\">the letter: C</div>\n</div>\n```\n\n## Automatic matching of parent/child tagNames\n\nSetting the `tagName` property of a `CollectionView` to any of\n\"ul\", \"ol\", \"table\", \"thead\", \"tbody\", \"tfoot\", \"tr\", or \"select\" will result\nin the item views receiving an appropriately matched `tagName` property.\n\nGiven the following application code:\n\n```javascript\nvar App = Ember.Application.create();\nApp.UnorderedListView = Ember.CollectionView.create({\n  tagName: 'ul',\n  content: ['A','B','C'],\n  itemViewClass: Ember.View.extend({\n    template: Ember.Handlebars.compile(\"the letter: {{view.content}}\")\n  })\n});\n```\n\nAnd a simple application template:\n\n```handlebars\n{{view 'unordered-list-view'}}\n```\n\nThe following HTML will result:\n\n```html\n<ul class=\"ember-view a-collection\">\n  <li class=\"ember-view\">the letter: A</li>\n  <li class=\"ember-view\">the letter: B</li>\n  <li class=\"ember-view\">the letter: C</li>\n</ul>\n```\n\nAdditional `tagName` pairs can be provided by adding to\n`Ember.CollectionView.CONTAINER_MAP`. For example:\n\n```javascript\nEmber.CollectionView.CONTAINER_MAP['article'] = 'section'\n```\n\n## Programmatic creation of child views\n\nFor cases where additional customization beyond the use of a single\n`itemViewClass` or `tagName` matching is required CollectionView's\n`createChildView` method can be overridden:\n\n```javascript\nApp.CustomCollectionView = Ember.CollectionView.extend({\n  createChildView: function(viewClass, attrs) {\n    if (attrs.content.kind == 'album') {\n      viewClass = App.AlbumView;\n    } else {\n      viewClass = App.SongView;\n    }\n    return this._super(viewClass, attrs);\n  }\n});\n```\n\n## Empty View\n\nYou can provide an `Ember.View` subclass to the `Ember.CollectionView`\ninstance as its `emptyView` property. If the `content` property of a\n`CollectionView` is set to `null` or an empty array, an instance of this view\nwill be the `CollectionView`s only child.\n\n```javascript\nvar App = Ember.Application.create();\nApp.ListWithNothing = Ember.CollectionView.create({\n  classNames: ['nothing'],\n  content: null,\n  emptyView: Ember.View.extend({\n    template: Ember.Handlebars.compile(\"The collection is empty\")\n  })\n});\n```\n\nAnd a simple application template:\n\n```handlebars\n{{view 'list-with-nothing'}}\n```\n\nThe following HTML will result:\n\n```html\n<div class=\"ember-view nothing\">\n  <div class=\"ember-view\">\n    The collection is empty\n  </div>\n</div>\n```\n\n## Adding and Removing items\n\nThe `childViews` property of a `CollectionView` should not be directly\nmanipulated. Instead, add, remove, replace items from its `content` property.\nThis will trigger appropriate changes to its rendered HTML.",
            "extends": "Ember.ContainerView",
            "since": "Ember 0.9"
        },
        "Ember.Component": {
            "name": "Ember.Component",
            "shortname": "Ember.Component",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "packages/ember-views/lib/views/component.js",
            "line": 21,
            "description": "An `Ember.Component` is a view that is completely\nisolated. Properties accessed in its templates go\nto the view object and actions are targeted at\nthe view object. There is no access to the\nsurrounding context or outer controller; all\ncontextual information must be passed in.\n\nThe easiest way to create an `Ember.Component` is via\na template. If you name a template\n`components/my-foo`, you will be able to use\n`{{my-foo}}` in other templates, which will make\nan instance of the isolated component.\n\n```handlebars\n{{app-profile person=currentUser}}\n```\n\n```handlebars\n<!-- app-profile template -->\n<h1>{{person.title}}</h1>\n<img {{bind-attr src=person.avatar}}>\n<p class='signature'>{{person.signature}}</p>\n```\n\nYou can use `yield` inside a template to\ninclude the **contents** of any block attached to\nthe component. The block will be executed in the\ncontext of the surrounding context or outer controller:\n\n```handlebars\n{{#app-profile person=currentUser}}\n  <p>Admin mode</p>\n  {{! Executed in the controller's context. }}\n{{/app-profile}}\n```\n\n```handlebars\n<!-- app-profile template -->\n<h1>{{person.title}}</h1>\n{{! Executed in the components context. }}\n{{yield}} {{! block contents }}\n```\n\nIf you want to customize the component, in order to\nhandle events or actions, you implement a subclass\nof `Ember.Component` named after the name of the\ncomponent. Note that `Component` needs to be appended to the name of\nyour subclass like `AppProfileComponent`.\n\nFor example, you could implement the action\n`hello` for the `app-profile` component:\n\n```javascript\nApp.AppProfileComponent = Ember.Component.extend({\n  actions: {\n    hello: function(name) {\n      console.log(\"Hello\", name);\n    }\n  }\n});\n```\n\nAnd then use it in the component's template:\n\n```handlebars\n<!-- app-profile template -->\n\n<h1>{{person.title}}</h1>\n{{yield}} <!-- block contents -->\n\n<button {{action 'hello' person.name}}>\n  Say Hello to {{person.name}}\n</button>\n```\n\nComponents must have a `-` in their name to avoid\nconflicts with built-in controls that wrap HTML\nelements. This is consistent with the same\nrequirement in web components.",
            "extends": "Ember.View"
        },
        "Ember.ContainerView": {
            "name": "Ember.ContainerView",
            "shortname": "Ember.ContainerView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "packages/ember-views/lib/views/container_view.js",
            "line": 37,
            "description": "A `ContainerView` is an `Ember.View` subclass that implements `Ember.MutableArray`\nallowing programmatic management of its child views.\n\n## Setting Initial Child Views\n\nThe initial array of child views can be set in one of two ways. You can\nprovide a `childViews` property at creation time that contains instance of\n`Ember.View`:\n\n```javascript\naContainer = Ember.ContainerView.create({\n  childViews: [Ember.View.create(), Ember.View.create()]\n});\n```\n\nYou can also provide a list of property names whose values are instances of\n`Ember.View`:\n\n```javascript\naContainer = Ember.ContainerView.create({\n  childViews: ['aView', 'bView', 'cView'],\n  aView: Ember.View.create(),\n  bView: Ember.View.create(),\n  cView: Ember.View.create()\n});\n```\n\nThe two strategies can be combined:\n\n```javascript\naContainer = Ember.ContainerView.create({\n  childViews: ['aView', Ember.View.create()],\n  aView: Ember.View.create()\n});\n```\n\nEach child view's rendering will be inserted into the container's rendered\nHTML in the same order as its position in the `childViews` property.\n\n## Adding and Removing Child Views\n\nThe container view implements `Ember.MutableArray` allowing programmatic management of its child views.\n\nTo remove a view, pass that view into a `removeObject` call on the container view.\n\nGiven an empty `<body>` the following code\n\n```javascript\naContainer = Ember.ContainerView.create({\n  classNames: ['the-container'],\n  childViews: ['aView', 'bView'],\n  aView: Ember.View.create({\n    template: Ember.Handlebars.compile(\"A\")\n  }),\n  bView: Ember.View.create({\n    template: Ember.Handlebars.compile(\"B\")\n  })\n});\n\naContainer.appendTo('body');\n```\n\nResults in the HTML\n\n```html\n<div class=\"ember-view the-container\">\n  <div class=\"ember-view\">A</div>\n  <div class=\"ember-view\">B</div>\n</div>\n```\n\nRemoving a view\n\n```javascript\naContainer.toArray();  // [aContainer.aView, aContainer.bView]\naContainer.removeObject(aContainer.get('bView'));\naContainer.toArray();  // [aContainer.aView]\n```\n\nWill result in the following HTML\n\n```html\n<div class=\"ember-view the-container\">\n  <div class=\"ember-view\">A</div>\n</div>\n```\n\nSimilarly, adding a child view is accomplished by adding `Ember.View` instances to the\ncontainer view.\n\nGiven an empty `<body>` the following code\n\n```javascript\naContainer = Ember.ContainerView.create({\n  classNames: ['the-container'],\n  childViews: ['aView', 'bView'],\n  aView: Ember.View.create({\n    template: Ember.Handlebars.compile(\"A\")\n  }),\n  bView: Ember.View.create({\n    template: Ember.Handlebars.compile(\"B\")\n  })\n});\n\naContainer.appendTo('body');\n```\n\nResults in the HTML\n\n```html\n<div class=\"ember-view the-container\">\n  <div class=\"ember-view\">A</div>\n  <div class=\"ember-view\">B</div>\n</div>\n```\n\nAdding a view\n\n```javascript\nAnotherViewClass = Ember.View.extend({\n  template: Ember.Handlebars.compile(\"Another view\")\n});\n\naContainer.toArray();  // [aContainer.aView, aContainer.bView]\naContainer.pushObject(AnotherViewClass.create());\naContainer.toArray(); // [aContainer.aView, aContainer.bView, <AnotherViewClass instance>]\n```\n\nWill result in the following HTML\n\n```html\n<div class=\"ember-view the-container\">\n  <div class=\"ember-view\">A</div>\n  <div class=\"ember-view\">B</div>\n  <div class=\"ember-view\">Another view</div>\n</div>\n```\n\n## Templates and Layout\n\nA `template`, `templateName`, `defaultTemplate`, `layout`, `layoutName` or\n`defaultLayout` property on a container view will not result in the template\nor layout being rendered. The HTML contents of a `Ember.ContainerView`'s DOM\nrepresentation will only be the rendered HTML of its child views.",
            "extends": "Ember.View"
        },
        "Ember.CoreView": {
            "name": "Ember.CoreView",
            "shortname": "Ember.CoreView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "namespace": "Ember",
            "file": "packages/ember-views/lib/views/core_view.js",
            "line": 26,
            "description": "`Ember.CoreView` is an abstract class that exists to give view-like behavior\nto both Ember's main view class `Ember.View` and other classes that don't need\nthe fully functionaltiy of `Ember.View`.\n\nUnless you have specific needs for `CoreView`, you will use `Ember.View`\nin your applications.",
            "extends": "Ember.Object",
            "uses": [
                "Ember.Evented",
                "Ember.ActionHandler"
            ]
        },
        "Ember._Metamorph": {
            "name": "Ember._Metamorph",
            "shortname": "Ember._Metamorph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Ember._MetamorphView"
            ],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "packages/ember-views/lib/views/metamorph_view.js",
            "line": 15,
            "access": "private",
            "tagname": ""
        },
        "Ember._MetamorphView": {
            "name": "Ember._MetamorphView",
            "shortname": "Ember._MetamorphView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "packages/ember-views/lib/views/metamorph_view.js",
            "line": 36,
            "extends": "Ember.View",
            "uses": [
                "Ember._Metamorph"
            ],
            "access": "private",
            "tagname": ""
        },
        "Ember.Select": {
            "name": "Ember.Select",
            "shortname": "Ember.Select",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "packages/ember-views/lib/views/select.js",
            "line": 96,
            "description": "The `Ember.Select` view class renders a\n[select](https://developer.mozilla.org/en/HTML/Element/select) HTML element,\nallowing the user to choose from a list of options.\n\nThe text and `value` property of each `<option>` element within the\n`<select>` element are populated from the objects in the `Element.Select`'s\n`content` property. The underlying data object of the selected `<option>` is\nstored in the `Element.Select`'s `value` property.\n\n## The Content Property (array of strings)\n\nThe simplest version of an `Ember.Select` takes an array of strings as its\n`content` property. The string will be used as both the `value` property and\nthe inner text of each `<option>` element inside the rendered `<select>`.\n\nExample:\n\n```javascript\nApp.ApplicationController = Ember.ObjectController.extend({\n  names: [\"Yehuda\", \"Tom\"]\n});\n```\n\n```handlebars\n{{view \"select\" content=names}}\n```\n\nWould result in the following HTML:\n\n```html\n<select class=\"ember-select\">\n  <option value=\"Yehuda\">Yehuda</option>\n  <option value=\"Tom\">Tom</option>\n</select>\n```\n\nYou can control which `<option>` is selected through the `Ember.Select`'s\n`value` property:\n\n```javascript\nApp.ApplicationController = Ember.ObjectController.extend({\n  selectedName: 'Tom',\n  names: [\"Yehuda\", \"Tom\"]\n});\n```\n\n```handlebars\n{{view \"select\" content=names value=selectedName}}\n```\n\nWould result in the following HTML with the `<option>` for 'Tom' selected:\n\n```html\n<select class=\"ember-select\">\n  <option value=\"Yehuda\">Yehuda</option>\n  <option value=\"Tom\" selected=\"selected\">Tom</option>\n</select>\n```\n\nA user interacting with the rendered `<select>` to choose \"Yehuda\" would\nupdate the value of `selectedName` to \"Yehuda\".\n\n## The Content Property (array of Objects)\n\nAn `Ember.Select` can also take an array of JavaScript or Ember objects as\nits `content` property.\n\nWhen using objects you need to tell the `Ember.Select` which property should\nbe accessed on each object to supply the `value` attribute of the `<option>`\nand which property should be used to supply the element text.\n\nThe `optionValuePath` option is used to specify the path on each object to\nthe desired property for the `value` attribute. The `optionLabelPath`\nspecifies the path on each object to the desired property for the\nelement's text. Both paths must reference each object itself as `content`:\n\n```javascript\nApp.ApplicationController = Ember.ObjectController.extend({\n  programmers: [\n    {firstName: \"Yehuda\", id: 1},\n    {firstName: \"Tom\",    id: 2}\n  ]\n});\n```\n\n```handlebars\n{{view \"select\"\n       content=programmers\n       optionValuePath=\"content.id\"\n       optionLabelPath=\"content.firstName\"}}\n```\n\nWould result in the following HTML:\n\n```html\n<select class=\"ember-select\">\n  <option value=\"1\">Yehuda</option>\n  <option value=\"2\">Tom</option>\n</select>\n```\n\nThe `value` attribute of the selected `<option>` within an `Ember.Select`\ncan be bound to a property on another object:\n\n```javascript\nApp.ApplicationController = Ember.ObjectController.extend({\n  programmers: [\n    {firstName: \"Yehuda\", id: 1},\n    {firstName: \"Tom\",    id: 2}\n  ],\n  currentProgrammer: {\n    id: 2\n  }\n});\n```\n\n```handlebars\n{{view \"select\"\n       content=programmers\n       optionValuePath=\"content.id\"\n       optionLabelPath=\"content.firstName\"\n       value=currentProgrammer.id}}\n```\n\nWould result in the following HTML with a selected option:\n\n```html\n<select class=\"ember-select\">\n  <option value=\"1\">Yehuda</option>\n  <option value=\"2\" selected=\"selected\">Tom</option>\n</select>\n```\n\nInteracting with the rendered element by selecting the first option\n('Yehuda') will update the `id` of `currentProgrammer`\nto match the `value` property of the newly selected `<option>`.\n\nAlternatively, you can control selection through the underlying objects\nused to render each object by binding the `selection` option. When the selected\n`<option>` is changed, the property path provided to `selection`\nwill be updated to match the content object of the rendered `<option>`\nelement:\n\n```javascript\n\nvar yehuda = {firstName: \"Yehuda\", id: 1, bff4eva: 'tom'}\nvar tom = {firstName: \"Tom\", id: 2, bff4eva: 'yehuda'};\n\nApp.ApplicationController = Ember.ObjectController.extend({\n  selectedPerson: tom,\n  programmers: [ yehuda, tom ]\n});\n```\n\n```handlebars\n{{view \"select\"\n       content=programmers\n       optionValuePath=\"content.id\"\n       optionLabelPath=\"content.firstName\"\n       selection=selectedPerson}}\n```\n\nWould result in the following HTML with a selected option:\n\n```html\n<select class=\"ember-select\">\n  <option value=\"1\">Yehuda</option>\n  <option value=\"2\" selected=\"selected\">Tom</option>\n</select>\n```\n\nInteracting with the rendered element by selecting the first option\n('Yehuda') will update the `selectedPerson` to match the object of\nthe newly selected `<option>`. In this case it is the first object\nin the `programmers`\n\n## Supplying a Prompt\n\nA `null` value for the `Ember.Select`'s `value` or `selection` property\nresults in there being no `<option>` with a `selected` attribute:\n\n```javascript\nApp.ApplicationController = Ember.ObjectController.extend({\n  selectedProgrammer: null,\n  programmers: [\"Yehuda\", \"Tom\"]\n});\n```\n\n``` handlebars\n{{view \"select\"\n       content=programmers\n       value=selectedProgrammer\n}}\n```\n\nWould result in the following HTML:\n\n```html\n<select class=\"ember-select\">\n  <option value=\"Yehuda\">Yehuda</option>\n  <option value=\"Tom\">Tom</option>\n</select>\n```\n\nAlthough `selectedProgrammer` is `null` and no `<option>`\nhas a `selected` attribute the rendered HTML will display the\nfirst item as though it were selected. You can supply a string\nvalue for the `Ember.Select` to display when there is no selection\nwith the `prompt` option:\n\n```javascript\nApp.ApplicationController = Ember.ObjectController.extend({\n  selectedProgrammer: null,\n  programmers: [ \"Yehuda\", \"Tom\" ]\n});\n```\n\n```handlebars\n{{view \"select\"\n       content=programmers\n       value=selectedProgrammer\n       prompt=\"Please select a name\"\n}}\n```\n\nWould result in the following HTML:\n\n```html\n<select class=\"ember-select\">\n  <option>Please select a name</option>\n  <option value=\"Yehuda\">Yehuda</option>\n  <option value=\"Tom\">Tom</option>\n</select>\n```",
            "extends": "Ember.View"
        },
        "Ember.TextArea": {
            "name": "Ember.TextArea",
            "shortname": "Ember.TextArea",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "packages/ember-views/lib/views/text_area.js",
            "line": 11,
            "description": "The internal class used to create textarea element when the `{{textarea}}`\nhelper is used.\n\nSee [handlebars.helpers.textarea](/api/classes/Ember.Handlebars.helpers.html#method_textarea)  for usage details.\n\n## Layout and LayoutName properties\n\nBecause HTML `textarea` elements do not contain inner HTML the `layout` and\n`layoutName` properties will not be applied. See [Ember.View](/api/classes/Ember.View.html)'s\nlayout section for more information.",
            "extends": "Ember.Component",
            "uses": [
                "Ember.TextSupport"
            ]
        },
        "Ember.TextField": {
            "name": "Ember.TextField",
            "shortname": "Ember.TextField",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "packages/ember-views/lib/views/text_field.js",
            "line": 8,
            "description": "The internal class used to create text inputs when the `{{input}}`\n  helper is used with `type` of `text`.\nSee [Handlebars.helpers.input](/api/classes/Ember.Handlebars.helpers.html#method_input)  for usage details.\n## Layout and LayoutName properties\nBecause HTML `input` elements are self closing `layout` and `layoutName`\n  properties will not be applied. See [Ember.View](/api/classes/Ember.View.html)'s\n  layout section for more information.",
            "extends": "Ember.Component",
            "uses": [
                "Ember.TextSupport"
            ]
        },
        "Ember.View": {
            "name": "Ember.View",
            "shortname": "Ember.View",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember",
            "file": "packages/ember-views/lib/views/view.js",
            "line": 64,
            "description": "`Ember.View` is the class in Ember responsible for encapsulating templates of\nHTML content, combining templates with data to render as sections of a page's\nDOM, and registering and responding to user-initiated events.\n\n## HTML Tag\n\nThe default HTML tag name used for a view's DOM representation is `div`. This\ncan be customized by setting the `tagName` property. The following view\nclass:\n\n```javascript\nParagraphView = Ember.View.extend({\n  tagName: 'em'\n});\n```\n\nWould result in instances with the following HTML:\n\n```html\n<em id=\"ember1\" class=\"ember-view\"></em>\n```\n\n## HTML `class` Attribute\n\nThe HTML `class` attribute of a view's tag can be set by providing a\n`classNames` property that is set to an array of strings:\n\n```javascript\nMyView = Ember.View.extend({\n  classNames: ['my-class', 'my-other-class']\n});\n```\n\nWill result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view my-class my-other-class\"></div>\n```\n\n`class` attribute values can also be set by providing a `classNameBindings`\nproperty set to an array of properties names for the view. The return value\nof these properties will be added as part of the value for the view's `class`\nattribute. These properties can be computed properties:\n\n```javascript\nMyView = Ember.View.extend({\n  classNameBindings: ['propertyA', 'propertyB'],\n  propertyA: 'from-a',\n  propertyB: function() {\n    if (someLogic) { return 'from-b'; }\n  }.property()\n});\n```\n\nWill result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view from-a from-b\"></div>\n```\n\nIf the value of a class name binding returns a boolean the property name\nitself will be used as the class name if the property is true. The class name\nwill not be added if the value is `false` or `undefined`.\n\n```javascript\nMyView = Ember.View.extend({\n  classNameBindings: ['hovered'],\n  hovered: true\n});\n```\n\nWill result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view hovered\"></div>\n```\n\nWhen using boolean class name bindings you can supply a string value other\nthan the property name for use as the `class` HTML attribute by appending the\npreferred value after a \":\" character when defining the binding:\n\n```javascript\nMyView = Ember.View.extend({\n  classNameBindings: ['awesome:so-very-cool'],\n  awesome: true\n});\n```\n\nWill result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view so-very-cool\"></div>\n```\n\nBoolean value class name bindings whose property names are in a\ncamelCase-style format will be converted to a dasherized format:\n\n```javascript\nMyView = Ember.View.extend({\n  classNameBindings: ['isUrgent'],\n  isUrgent: true\n});\n```\n\nWill result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view is-urgent\"></div>\n```\n\nClass name bindings can also refer to object values that are found by\ntraversing a path relative to the view itself:\n\n```javascript\nMyView = Ember.View.extend({\n  classNameBindings: ['messages.empty']\n  messages: Ember.Object.create({\n    empty: true\n  })\n});\n```\n\nWill result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view empty\"></div>\n```\n\nIf you want to add a class name for a property which evaluates to true and\nand a different class name if it evaluates to false, you can pass a binding\nlike this:\n\n```javascript\n// Applies 'enabled' class when isEnabled is true and 'disabled' when isEnabled is false\nEmber.View.extend({\n  classNameBindings: ['isEnabled:enabled:disabled']\n  isEnabled: true\n});\n```\n\nWill result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view enabled\"></div>\n```\n\nWhen isEnabled is `false`, the resulting HTML representation looks like\nthis:\n\n```html\n<div id=\"ember1\" class=\"ember-view disabled\"></div>\n```\n\nThis syntax offers the convenience to add a class if a property is `false`:\n\n```javascript\n// Applies no class when isEnabled is true and class 'disabled' when isEnabled is false\nEmber.View.extend({\n  classNameBindings: ['isEnabled::disabled']\n  isEnabled: true\n});\n```\n\nWill result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view\"></div>\n```\n\nWhen the `isEnabled` property on the view is set to `false`, it will result\nin view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view disabled\"></div>\n```\n\nUpdates to the the value of a class name binding will result in automatic\nupdate of the  HTML `class` attribute in the view's rendered HTML\nrepresentation. If the value becomes `false` or `undefined` the class name\nwill be removed.\n\nBoth `classNames` and `classNameBindings` are concatenated properties. See\n[Ember.Object](/api/classes/Ember.Object.html) documentation for more\ninformation about concatenated properties.\n\n## HTML Attributes\n\nThe HTML attribute section of a view's tag can be set by providing an\n`attributeBindings` property set to an array of property names on the view.\nThe return value of these properties will be used as the value of the view's\nHTML associated attribute:\n\n```javascript\nAnchorView = Ember.View.extend({\n  tagName: 'a',\n  attributeBindings: ['href'],\n  href: 'http://google.com'\n});\n```\n\nWill result in view instances with an HTML representation of:\n\n```html\n<a id=\"ember1\" class=\"ember-view\" href=\"http://google.com\"></a>\n```\n\nOne property can be mapped on to another by placing a \":\" between\nthe source property and the destination property:\n\n```javascript\nAnchorView = Ember.View.extend({\n  tagName: 'a',\n  attributeBindings: ['url:href'],\n  url: 'http://google.com'\n});\n```\n\nWill result in view instances with an HTML representation of:\n\n```html\n<a id=\"ember1\" class=\"ember-view\" href=\"http://google.com\"></a>\n```\n\nNamespaced attributes (e.g. `xlink:href`) are supported, but have to be\nmapped, since `:` is not a valid character for properties in Javascript:\n\n```javascript\nUseView = Ember.View.extend({\n  tagName: 'use',\n  attributeBindings: ['xlinkHref:xlink:href'],\n  xlinkHref: '#triangle'\n});\n```\nWill result in view instances with an HTML representation of:\n\n```html\n<use xlink:href=\"#triangle\"></use>\n```\n\nIf the return value of an `attributeBindings` monitored property is a boolean\nthe property will follow HTML's pattern of repeating the attribute's name as\nits value:\n\n```javascript\nMyTextInput = Ember.View.extend({\n  tagName: 'input',\n  attributeBindings: ['disabled'],\n  disabled: true\n});\n```\n\nWill result in view instances with an HTML representation of:\n\n```html\n<input id=\"ember1\" class=\"ember-view\" disabled=\"disabled\" />\n```\n\n`attributeBindings` can refer to computed properties:\n\n```javascript\nMyTextInput = Ember.View.extend({\n  tagName: 'input',\n  attributeBindings: ['disabled'],\n  disabled: function() {\n    if (someLogic) {\n      return true;\n    } else {\n      return false;\n    }\n  }.property()\n});\n```\n\nUpdates to the the property of an attribute binding will result in automatic\nupdate of the  HTML attribute in the view's rendered HTML representation.\n\n`attributeBindings` is a concatenated property. See [Ember.Object](/api/classes/Ember.Object.html)\ndocumentation for more information about concatenated properties.\n\n## Templates\n\nThe HTML contents of a view's rendered representation are determined by its\ntemplate. Templates can be any function that accepts an optional context\nparameter and returns a string of HTML that will be inserted within the\nview's tag. Most typically in Ember this function will be a compiled\n`Ember.Handlebars` template.\n\n```javascript\nAView = Ember.View.extend({\n  template: Ember.Handlebars.compile('I am the template')\n});\n```\n\nWill result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view\">I am the template</div>\n```\n\nWithin an Ember application is more common to define a Handlebars templates as\npart of a page:\n\n```html\n<script type='text/x-handlebars' data-template-name='some-template'>\n  Hello\n</script>\n```\n\nAnd associate it by name using a view's `templateName` property:\n\n```javascript\nAView = Ember.View.extend({\n  templateName: 'some-template'\n});\n```\n\nIf you have nested resources, your Handlebars template will look like this:\n\n```html\n<script type='text/x-handlebars' data-template-name='posts/new'>\n  <h1>New Post</h1>\n</script>\n```\n\nAnd `templateName` property:\n\n```javascript\nAView = Ember.View.extend({\n  templateName: 'posts/new'\n});\n```\n\nUsing a value for `templateName` that does not have a Handlebars template\nwith a matching `data-template-name` attribute will throw an error.\n\nFor views classes that may have a template later defined (e.g. as the block\nportion of a `{{view}}` Handlebars helper call in another template or in\na subclass), you can provide a `defaultTemplate` property set to compiled\ntemplate function. If a template is not later provided for the view instance\nthe `defaultTemplate` value will be used:\n\n```javascript\nAView = Ember.View.extend({\n  defaultTemplate: Ember.Handlebars.compile('I was the default'),\n  template: null,\n  templateName: null\n});\n```\n\nWill result in instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view\">I was the default</div>\n```\n\nIf a `template` or `templateName` is provided it will take precedence over\n`defaultTemplate`:\n\n```javascript\nAView = Ember.View.extend({\n  defaultTemplate: Ember.Handlebars.compile('I was the default')\n});\n\naView = AView.create({\n  template: Ember.Handlebars.compile('I was the template, not default')\n});\n```\n\nWill result in the following HTML representation when rendered:\n\n```html\n<div id=\"ember1\" class=\"ember-view\">I was the template, not default</div>\n```\n\n## View Context\n\nThe default context of the compiled template is the view's controller:\n\n```javascript\nAView = Ember.View.extend({\n  template: Ember.Handlebars.compile('Hello {{excitedGreeting}}')\n});\n\naController = Ember.Object.create({\n  firstName: 'Barry',\n  excitedGreeting: function() {\n    return this.get(\"content.firstName\") + \"!!!\"\n  }.property()\n});\n\naView = AView.create({\n  controller: aController\n});\n```\n\nWill result in an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view\">Hello Barry!!!</div>\n```\n\nA context can also be explicitly supplied through the view's `context`\nproperty. If the view has neither `context` nor `controller` properties, the\n`parentView`'s context will be used.\n\n## Layouts\n\nViews can have a secondary template that wraps their main template. Like\nprimary templates, layouts can be any function that  accepts an optional\ncontext parameter and returns a string of HTML that will be inserted inside\nview's tag. Views whose HTML element is self closing (e.g. `<input />`)\ncannot have a layout and this property will be ignored.\n\nMost typically in Ember a layout will be a compiled `Ember.Handlebars`\ntemplate.\n\nA view's layout can be set directly with the `layout` property or reference\nan existing Handlebars template by name with the `layoutName` property.\n\nA template used as a layout must contain a single use of the Handlebars\n`{{yield}}` helper. The HTML contents of a view's rendered `template` will be\ninserted at this location:\n\n```javascript\nAViewWithLayout = Ember.View.extend({\n  layout: Ember.Handlebars.compile(\"<div class='my-decorative-class'>{{yield}}</div>\"),\n  template: Ember.Handlebars.compile(\"I got wrapped\")\n});\n```\n\nWill result in view instances with an HTML representation of:\n\n```html\n<div id=\"ember1\" class=\"ember-view\">\n  <div class=\"my-decorative-class\">\n    I got wrapped\n  </div>\n</div>\n```\n\nSee [Ember.Handlebars.helpers.yield](/api/classes/Ember.Handlebars.helpers.html#method_yield)\nfor more information.\n\n## Responding to Browser Events\n\nViews can respond to user-initiated events in one of three ways: method\nimplementation, through an event manager, and through `{{action}}` helper use\nin their template or layout.\n\n### Method Implementation\n\nViews can respond to user-initiated events by implementing a method that\nmatches the event name. A `jQuery.Event` object will be passed as the\nargument to this method.\n\n```javascript\nAView = Ember.View.extend({\n  click: function(event) {\n    // will be called when when an instance's\n    // rendered element is clicked\n  }\n});\n```\n\n### Event Managers\n\nViews can define an object as their `eventManager` property. This object can\nthen implement methods that match the desired event names. Matching events\nthat occur on the view's rendered HTML or the rendered HTML of any of its DOM\ndescendants will trigger this method. A `jQuery.Event` object will be passed\nas the first argument to the method and an  `Ember.View` object as the\nsecond. The `Ember.View` will be the view whose rendered HTML was interacted\nwith. This may be the view with the `eventManager` property or one of its\ndescendant views.\n\n```javascript\nAView = Ember.View.extend({\n  eventManager: Ember.Object.create({\n    doubleClick: function(event, view) {\n      // will be called when when an instance's\n      // rendered element or any rendering\n      // of this view's descendant\n      // elements is clicked\n    }\n  })\n});\n```\n\nAn event defined for an event manager takes precedence over events of the\nsame name handled through methods on the view.\n\n```javascript\nAView = Ember.View.extend({\n  mouseEnter: function(event) {\n    // will never trigger.\n  },\n  eventManager: Ember.Object.create({\n    mouseEnter: function(event, view) {\n      // takes precedence over AView#mouseEnter\n    }\n  })\n});\n```\n\nSimilarly a view's event manager will take precedence for events of any views\nrendered as a descendant. A method name that matches an event name will not\nbe called if the view instance was rendered inside the HTML representation of\na view that has an `eventManager` property defined that handles events of the\nname. Events not handled by the event manager will still trigger method calls\non the descendant.\n\n```javascript\nvar App = Ember.Application.create();\nApp.OuterView = Ember.View.extend({\n  template: Ember.Handlebars.compile(\"outer {{#view 'inner'}}inner{{/view}} outer\"),\n  eventManager: Ember.Object.create({\n    mouseEnter: function(event, view) {\n      // view might be instance of either\n      // OuterView or InnerView depending on\n      // where on the page the user interaction occurred\n    }\n  })\n});\n\nApp.InnerView = Ember.View.extend({\n  click: function(event) {\n    // will be called if rendered inside\n    // an OuterView because OuterView's\n    // eventManager doesn't handle click events\n  },\n  mouseEnter: function(event) {\n    // will never be called if rendered inside\n    // an OuterView.\n  }\n});\n```\n\n### Handlebars `{{action}}` Helper\n\nSee [Handlebars.helpers.action](/api/classes/Ember.Handlebars.helpers.html#method_action).\n\n### Event Names\n\nAll of the event handling approaches described above respond to the same set\nof events. The names of the built-in events are listed below. (The hash of\nbuilt-in events exists in `Ember.EventDispatcher`.) Additional, custom events\ncan be registered by using `Ember.Application.customEvents`.\n\nTouch events:\n\n* `touchStart`\n* `touchMove`\n* `touchEnd`\n* `touchCancel`\n\nKeyboard events\n\n* `keyDown`\n* `keyUp`\n* `keyPress`\n\nMouse events\n\n* `mouseDown`\n* `mouseUp`\n* `contextMenu`\n* `click`\n* `doubleClick`\n* `mouseMove`\n* `focusIn`\n* `focusOut`\n* `mouseEnter`\n* `mouseLeave`\n\nForm events:\n\n* `submit`\n* `change`\n* `focusIn`\n* `focusOut`\n* `input`\n\nHTML5 drag and drop events:\n\n* `dragStart`\n* `drag`\n* `dragEnter`\n* `dragLeave`\n* `dragOver`\n* `dragEnd`\n* `drop`\n\n## Handlebars `{{view}}` Helper\n\nOther `Ember.View` instances can be included as part of a view's template by\nusing the `{{view}}` Handlebars helper. See [Ember.Handlebars.helpers.view](/api/classes/Ember.Handlebars.helpers.html#method_view)\nfor additional information.",
            "extends": "Ember.CoreView"
        }
    },
    "classitems": [
        {
            "file": "bower_components/rsvp/lib/rsvp/promise/all.js",
            "line": 3,
            "description": "`RSVP.Promise.all` accepts an array of promises, and returns a new promise which\nis fulfilled with an array of fulfillment values for the passed promises, or\nrejected with the reason of the first passed promise to be rejected. It casts all\nelements of the passed iterable to promises as it runs this algorithm.\n\nExample:\n\n```javascript\nvar promise1 = RSVP.resolve(1);\nvar promise2 = RSVP.resolve(2);\nvar promise3 = RSVP.resolve(3);\nvar promises = [ promise1, promise2, promise3 ];\n\nRSVP.Promise.all(promises).then(function(array){\n  // The array here would be [ 1, 2, 3 ];\n});\n```\n\nIf any of the `promises` given to `RSVP.all` are rejected, the first promise\nthat is rejected will be given as an argument to the returned promises's\nrejection handler. For example:\n\nExample:\n\n```javascript\nvar promise1 = RSVP.resolve(1);\nvar promise2 = RSVP.reject(new Error(\"2\"));\nvar promise3 = RSVP.reject(new Error(\"3\"));\nvar promises = [ promise1, promise2, promise3 ];\n\nRSVP.Promise.all(promises).then(function(array){\n  // Code here never runs because there are rejected promises!\n}, function(error) {\n  // error.message === \"2\"\n});\n```",
            "itemtype": "method",
            "name": "all",
            "static": 1,
            "params": [
                {
                    "name": "entries",
                    "description": "array of promises",
                    "type": "Array"
                },
                {
                    "name": "label",
                    "description": "optional string for labeling the promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise that is fulfilled when all `promises` have been\nfulfilled, or rejected if any of them become rejected.",
                "type": "Promise"
            },
            "class": "RSVP"
        },
        {
            "file": "bower_components/rsvp/lib/rsvp/promise/race.js",
            "line": 13,
            "description": "`RSVP.Promise.race` returns a new promise which is settled in the same way as the\nfirst passed promise to settle.\n\nExample:\n\n```javascript\nvar promise1 = new RSVP.Promise(function(resolve, reject){\n  setTimeout(function(){\n    resolve('promise 1');\n  }, 200);\n});\n\nvar promise2 = new RSVP.Promise(function(resolve, reject){\n  setTimeout(function(){\n    resolve('promise 2');\n  }, 100);\n});\n\nRSVP.Promise.race([promise1, promise2]).then(function(result){\n  // result === 'promise 2' because it was resolved before promise1\n  // was resolved.\n});\n```\n\n`RSVP.Promise.race` is deterministic in that only the state of the first\nsettled promise matters. For example, even if other promises given to the\n`promises` array argument are resolved, but the first settled promise has\nbecome rejected before the other promises became fulfilled, the returned\npromise will become rejected:\n\n```javascript\nvar promise1 = new RSVP.Promise(function(resolve, reject){\n  setTimeout(function(){\n    resolve('promise 1');\n  }, 200);\n});\n\nvar promise2 = new RSVP.Promise(function(resolve, reject){\n  setTimeout(function(){\n    reject(new Error('promise 2'));\n  }, 100);\n});\n\nRSVP.Promise.race([promise1, promise2]).then(function(result){\n  // Code here never runs\n}, function(reason){\n  // reason.message === 'promise 2' because promise 2 became rejected before\n  // promise 1 became fulfilled\n});\n```\n\nAn example real-world use case is implementing timeouts:\n\n```javascript\nRSVP.Promise.race([ajax('foo.json'), timeout(5000)])\n```",
            "itemtype": "method",
            "name": "race",
            "static": 1,
            "params": [
                {
                    "name": "promises",
                    "description": "array of promises to observe",
                    "type": "Array"
                },
                {
                    "name": "label",
                    "description": "optional string for describing the promise returned.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a promise which settles in the same way as the first passed\npromise to settle.",
                "type": "Promise"
            },
            "class": "RSVP"
        },
        {
            "file": "bower_components/rsvp/lib/rsvp/promise/reject.js",
            "line": 6,
            "description": "`RSVP.Promise.reject` returns a promise rejected with the passed `reason`.\nIt is shorthand for the following:\n\n```javascript\nvar promise = new RSVP.Promise(function(resolve, reject){\n  reject(new Error('WHOOPS'));\n});\n\npromise.then(function(value){\n  // Code here doesn't run because the promise is rejected!\n}, function(reason){\n  // reason.message === 'WHOOPS'\n});\n```\n\nInstead of writing the above, your code now simply becomes the following:\n\n```javascript\nvar promise = RSVP.Promise.reject(new Error('WHOOPS'));\n\npromise.then(function(value){\n  // Code here doesn't run because the promise is rejected!\n}, function(reason){\n  // reason.message === 'WHOOPS'\n});\n```",
            "itemtype": "method",
            "name": "reject",
            "static": 1,
            "params": [
                {
                    "name": "reason",
                    "description": "value that the returned promise will be rejected with.",
                    "type": "Any"
                },
                {
                    "name": "label",
                    "description": "optional string for identifying the returned promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a promise rejected with the given `reason`.",
                "type": "Promise"
            },
            "class": "RSVP"
        },
        {
            "file": "bower_components/rsvp/lib/rsvp/promise/resolve.js",
            "line": 6,
            "description": "`RSVP.Promise.resolve` returns a promise that will become resolved with the\npassed `value`. It is shorthand for the following:\n\n```javascript\nvar promise = new RSVP.Promise(function(resolve, reject){\n  resolve(1);\n});\n\npromise.then(function(value){\n  // value === 1\n});\n```\n\nInstead of writing the above, your code now simply becomes the following:\n\n```javascript\nvar promise = RSVP.Promise.resolve(1);\n\npromise.then(function(value){\n  // value === 1\n});\n```",
            "itemtype": "method",
            "name": "resolve",
            "static": 1,
            "params": [
                {
                    "name": "value",
                    "description": "value that the returned promise will be resolved with",
                    "type": "Any"
                },
                {
                    "name": "label",
                    "description": "optional string for identifying the returned promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a promise that will become fulfilled with the given\n`value`",
                "type": "Promise"
            },
            "class": "RSVP"
        },
        {
            "file": "bower_components/rsvp/lib/rsvp/all-settled.js",
            "line": 17,
            "description": "`RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing\na fail-fast method, it waits until all the promises have returned and\nshows you all the results. This is useful if you want to handle multiple\npromises' failure states together as a set.\n\nReturns a promise that is fulfilled when all the given promises have been\nsettled. The return promise is fulfilled with an array of the states of\nthe promises passed into the `promises` array argument.\n\nEach state object will either indicate fulfillment or rejection, and\nprovide the corresponding value or reason. The states will take one of\nthe following formats:\n\n```javascript\n{ state: 'fulfilled', value: value }\n  or\n{ state: 'rejected', reason: reason }\n```\n\nExample:\n\n```javascript\nvar promise1 = RSVP.Promise.resolve(1);\nvar promise2 = RSVP.Promise.reject(new Error('2'));\nvar promise3 = RSVP.Promise.reject(new Error('3'));\nvar promises = [ promise1, promise2, promise3 ];\n\nRSVP.allSettled(promises).then(function(array){\n  // array == [\n  //   { state: 'fulfilled', value: 1 },\n  //   { state: 'rejected', reason: Error },\n  //   { state: 'rejected', reason: Error }\n  // ]\n  // Note that for the second item, reason.message will be '2', and for the\n  // third item, reason.message will be '3'.\n}, function(error) {\n  // Not run. (This block would only be called if allSettled had failed,\n  // for instance if passed an incorrect argument type.)\n});\n```",
            "itemtype": "method",
            "name": "allSettled",
            "static": 1,
            "params": [
                {
                    "name": "promises",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "label",
                    "description": "- optional string that describes the promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise that is fulfilled with an array of the settled\nstates of the constituent promises.",
                "type": "Promise"
            },
            "class": "RSVP"
        },
        {
            "file": "bower_components/rsvp/lib/rsvp/all.js",
            "line": 3,
            "description": "This is a convenient alias for `RSVP.Promise.all`.",
            "itemtype": "method",
            "name": "all",
            "static": 1,
            "params": [
                {
                    "name": "array",
                    "description": "Array of promises.",
                    "type": "Array"
                },
                {
                    "name": "label",
                    "description": "An optional label. This is useful\nfor tooling.",
                    "type": "String"
                }
            ],
            "class": "RSVP"
        },
        {
            "file": "bower_components/rsvp/lib/rsvp/defer.js",
            "line": 3,
            "description": "`RSVP.defer` returns an object similar to jQuery's `$.Deferred`.\n`RSVP.defer` should be used when porting over code reliant on `$.Deferred`'s\ninterface. New code should use the `RSVP.Promise` constructor instead.\n\nThe object returned from `RSVP.defer` is a plain object with three properties:\n\n* promise - an `RSVP.Promise`.\n* reject - a function that causes the `promise` property on this object to\n  become rejected\n* resolve - a function that causes the `promise` property on this object to\n  become fulfilled.\n\nExample:\n\n ```javascript\n var deferred = RSVP.defer();\n\n deferred.resolve(\"Success!\");\n\n defered.promise.then(function(value){\n   // value here is \"Success!\"\n });\n ```",
            "itemtype": "method",
            "name": "defer",
            "static": 1,
            "params": [
                {
                    "name": "label",
                    "description": "optional string for labeling the promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "RSVP"
        },
        {
            "file": "bower_components/rsvp/lib/rsvp/events.js",
            "line": 24,
            "description": "`RSVP.EventTarget.mixin` extends an object with EventTarget methods. For\nExample:\n\n```javascript\nvar object = {};\n\nRSVP.EventTarget.mixin(object);\n\nobject.on('finished', function(event) {\n  // handle event\n});\n\nobject.trigger('finished', { detail: value });\n```\n\n`EventTarget.mixin` also works with prototypes:\n\n```javascript\nvar Person = function() {};\nRSVP.EventTarget.mixin(Person.prototype);\n\nvar yehuda = new Person();\nvar tom = new Person();\n\nyehuda.on('poke', function(event) {\n  console.log('Yehuda says OW');\n});\n\ntom.on('poke', function(event) {\n  console.log('Tom says OW');\n});\n\nyehuda.trigger('poke');\ntom.trigger('poke');\n```",
            "itemtype": "method",
            "name": "mixin",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "object",
                    "description": "object to extend with EventTarget methods",
                    "type": "Object"
                }
            ],
            "class": "RSVP.EventTarget"
        },
        {
            "file": "bower_components/rsvp/lib/rsvp/events.js",
            "line": 74,
            "description": "Registers a callback to be executed when `eventName` is triggered\n\n```javascript\nobject.on('event', function(eventInfo){\n  // handle the event\n});\n\nobject.trigger('event');\n```",
            "itemtype": "method",
            "name": "on",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "eventName",
                    "description": "name of the event to listen for",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function to be called when the event is triggered.",
                    "type": "Function"
                }
            ],
            "class": "RSVP.EventTarget"
        },
        {
            "file": "bower_components/rsvp/lib/rsvp/events.js",
            "line": 105,
            "description": "You can use `off` to stop firing a particular callback for an event:\n\n```javascript\nfunction doStuff() { // do stuff! }\nobject.on('stuff', doStuff);\n\nobject.trigger('stuff'); // doStuff will be called\n\n// Unregister ONLY the doStuff callback\nobject.off('stuff', doStuff);\nobject.trigger('stuff'); // doStuff will NOT be called\n```\n\nIf you don't pass a `callback` argument to `off`, ALL callbacks for the\nevent will not be executed when the event fires. For example:\n\n```javascript\nvar callback1 = function(){};\nvar callback2 = function(){};\n\nobject.on('stuff', callback1);\nobject.on('stuff', callback2);\n\nobject.trigger('stuff'); // callback1 and callback2 will be executed.\n\nobject.off('stuff');\nobject.trigger('stuff'); // callback1 and callback2 will not be executed!\n```",
            "itemtype": "method",
            "name": "off",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "eventName",
                    "description": "event to stop listening to",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "optional argument. If given, only the function\ngiven will be removed from the event's callback queue. If no `callback`\nargument is given, all callbacks will be removed from the event's callback\nqueue.",
                    "type": "Function"
                }
            ],
            "class": "RSVP.EventTarget"
        },
        {
            "file": "bower_components/rsvp/lib/rsvp/events.js",
            "line": 159,
            "description": "Use `trigger` to fire custom events. For example:\n\n```javascript\nobject.on('foo', function(){\n  console.log('foo event happened!');\n});\nobject.trigger('foo');\n// 'foo event happened!' logged to the console\n```\n\nYou can also pass a value as a second argument to `trigger` that will be\npassed as an argument to all event listeners for the event:\n\n```javascript\nobject.on('foo', function(value){\n  console.log(value.name);\n});\n\nobject.trigger('foo', { name: 'bar' });\n// 'bar' logged to the console\n```",
            "itemtype": "method",
            "name": "trigger",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "eventName",
                    "description": "name of the event to be triggered",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "optional value to be passed to any event handlers for\nthe given `eventName`",
                    "type": "Any"
                }
            ],
            "class": "RSVP.EventTarget"
        },
        {
            "file": "bower_components/rsvp/lib/rsvp/filter.js",
            "line": 6,
            "description": "`RSVP.filter` is similar to JavaScript's native `filter` method, except that it\n waits for all promises to become fulfilled before running the `filterFn` on\n each item in given to `promises`. `RSVP.filter` returns a promise that will\n become fulfilled with the result of running `filterFn` on the values the\n promises become fulfilled with.\n\n For example:\n\n ```javascript\n\n var promise1 = RSVP.resolve(1);\n var promise2 = RSVP.resolve(2);\n var promise3 = RSVP.resolve(3);\n\n var promises = [promise1, promise2, promise3];\n\n var filterFn = function(item){\n   return item > 1;\n };\n\n RSVP.filter(promises, filterFn).then(function(result){\n   // result is [ 2, 3 ]\n });\n ```\n\n If any of the `promises` given to `RSVP.filter` are rejected, the first promise\n that is rejected will be given as an argument to the returned promise's\n rejection handler. For example:\n\n ```javascript\n var promise1 = RSVP.resolve(1);\n var promise2 = RSVP.reject(new Error('2'));\n var promise3 = RSVP.reject(new Error('3'));\n var promises = [ promise1, promise2, promise3 ];\n\n var filterFn = function(item){\n   return item > 1;\n };\n\n RSVP.filter(promises, filterFn).then(function(array){\n   // Code here never runs because there are rejected promises!\n }, function(reason) {\n   // reason.message === '2'\n });\n ```\n\n `RSVP.filter` will also wait for any promises returned from `filterFn`.\n For instance, you may want to fetch a list of users then return a subset\n of those users based on some asynchronous operation:\n\n ```javascript\n\n var alice = { name: 'alice' };\n var bob   = { name: 'bob' };\n var users = [ alice, bob ];\n\n var promises = users.map(function(user){\n   return RSVP.resolve(user);\n });\n\n var filterFn = function(user){\n   // Here, Alice has permissions to create a blog post, but Bob does not.\n   return getPrivilegesForUser(user).then(function(privs){\n     return privs.can_create_blog_post === true;\n   });\n };\n RSVP.filter(promises, filterFn).then(function(users){\n   // true, because the server told us only Alice can create a blog post.\n   users.length === 1;\n   // false, because Alice is the only user present in `users`\n   users[0] === bob;\n });\n ```",
            "itemtype": "method",
            "name": "filter",
            "static": 1,
            "params": [
                {
                    "name": "promises",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "filterFn",
                    "description": "- function to be called on each resolved value to\n filter the final results.",
                    "type": "Function"
                },
                {
                    "name": "label",
                    "description": "optional string describing the promise. Useful for\n tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "RSVP"
        },
        {
            "file": "bower_components/rsvp/lib/rsvp/hash-settled.js",
            "line": 21,
            "description": "`RSVP.hashSettled` is similar to `RSVP.allSettled`, but takes an object\ninstead of an array for its `promises` argument.\n\nUnlike `RSVP.all` or `RSVP.hash`, which implement a fail-fast method,\nbut like `RSVP.allSettled`, `hashSettled` waits until all the\nconstituent promises have returned and then shows you all the results\nwith their states and values/reasons. This is useful if you want to\nhandle multiple promises' failure states together as a set.\n\nReturns a promise that is fulfilled when all the given promises have been\nsettled, or rejected if the passed parameters are invalid.\n\nThe returned promise is fulfilled with a hash that has the same key names as\nthe `promises` object argument. If any of the values in the object are not\npromises, they will be copied over to the fulfilled object and marked with state\n'fulfilled'.\n\nExample:\n\n```javascript\nvar promises = {\n  myPromise: RSVP.Promise.resolve(1),\n  yourPromise: RSVP.Promise.resolve(2),\n  theirPromise: RSVP.Promise.resolve(3),\n  notAPromise: 4\n};\n\nRSVP.hashSettled(promises).then(function(hash){\n  // hash here is an object that looks like:\n  // {\n  //   myPromise: { state: 'fulfilled', value: 1 },\n  //   yourPromise: { state: 'fulfilled', value: 2 },\n  //   theirPromise: { state: 'fulfilled', value: 3 },\n  //   notAPromise: { state: 'fulfilled', value: 4 }\n  // }\n});\n```\n\nIf any of the `promises` given to `RSVP.hash` are rejected, the state will\nbe set to 'rejected' and the reason for rejection provided.\n\nExample:\n\n```javascript\nvar promises = {\n  myPromise: RSVP.Promise.resolve(1),\n  rejectedPromise: RSVP.Promise.reject(new Error('rejection')),\n  anotherRejectedPromise: RSVP.Promise.reject(new Error('more rejection')),\n};\n\nRSVP.hashSettled(promises).then(function(hash){\n  // hash here is an object that looks like:\n  // {\n  //   myPromise:              { state: 'fulfilled', value: 1 },\n  //   rejectedPromise:        { state: 'rejected', reason: Error },\n  //   anotherRejectedPromise: { state: 'rejected', reason: Error },\n  // }\n  // Note that for rejectedPromise, reason.message == 'rejection',\n  // and for anotherRejectedPromise, reason.message == 'more rejection'.\n});\n```\n\nAn important note: `RSVP.hashSettled` is intended for plain JavaScript objects that\nare just a set of keys and values. `RSVP.hashSettled` will NOT preserve prototype\nchains.\n\nExample:\n\n```javascript\nfunction MyConstructor(){\n  this.example = RSVP.Promise.resolve('Example');\n}\n\nMyConstructor.prototype = {\n  protoProperty: RSVP.Promise.resolve('Proto Property')\n};\n\nvar myObject = new MyConstructor();\n\nRSVP.hashSettled(myObject).then(function(hash){\n  // protoProperty will not be present, instead you will just have an\n  // object that looks like:\n  // {\n  //   example: { state: 'fulfilled', value: 'Example' }\n  // }\n  //\n  // hash.hasOwnProperty('protoProperty'); // false\n  // 'undefined' === typeof hash.protoProperty\n});\n```",
            "itemtype": "method",
            "name": "hashSettled",
            "params": [
                {
                    "name": "promises",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "label",
                    "description": "optional string that describes the promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise that is fulfilled when when all properties of `promises`\nhave been settled.",
                "type": "Promise"
            },
            "static": 1,
            "class": "RSVP"
        },
        {
            "file": "bower_components/rsvp/lib/rsvp/hash.js",
            "line": 4,
            "description": "`RSVP.hash` is similar to `RSVP.all`, but takes an object instead of an array\nfor its `promises` argument.\n\nReturns a promise that is fulfilled when all the given promises have been\nfulfilled, or rejected if any of them become rejected. The returned promise\nis fulfilled with a hash that has the same key names as the `promises` object\nargument. If any of the values in the object are not promises, they will\nsimply be copied over to the fulfilled object.\n\nExample:\n\n```javascript\nvar promises = {\n  myPromise: RSVP.resolve(1),\n  yourPromise: RSVP.resolve(2),\n  theirPromise: RSVP.resolve(3),\n  notAPromise: 4\n};\n\nRSVP.hash(promises).then(function(hash){\n  // hash here is an object that looks like:\n  // {\n  //   myPromise: 1,\n  //   yourPromise: 2,\n  //   theirPromise: 3,\n  //   notAPromise: 4\n  // }\n});\n````\n\nIf any of the `promises` given to `RSVP.hash` are rejected, the first promise\nthat is rejected will be given as the reason to the rejection handler.\n\nExample:\n\n```javascript\nvar promises = {\n  myPromise: RSVP.resolve(1),\n  rejectedPromise: RSVP.reject(new Error('rejectedPromise')),\n  anotherRejectedPromise: RSVP.reject(new Error('anotherRejectedPromise')),\n};\n\nRSVP.hash(promises).then(function(hash){\n  // Code here never runs because there are rejected promises!\n}, function(reason) {\n  // reason.message === 'rejectedPromise'\n});\n```\n\nAn important note: `RSVP.hash` is intended for plain JavaScript objects that\nare just a set of keys and values. `RSVP.hash` will NOT preserve prototype\nchains.\n\nExample:\n\n```javascript\nfunction MyConstructor(){\n  this.example = RSVP.resolve('Example');\n}\n\nMyConstructor.prototype = {\n  protoProperty: RSVP.resolve('Proto Property')\n};\n\nvar myObject = new MyConstructor();\n\nRSVP.hash(myObject).then(function(hash){\n  // protoProperty will not be present, instead you will just have an\n  // object that looks like:\n  // {\n  //   example: 'Example'\n  // }\n  //\n  // hash.hasOwnProperty('protoProperty'); // false\n  // 'undefined' === typeof hash.protoProperty\n});\n```",
            "itemtype": "method",
            "name": "hash",
            "static": 1,
            "params": [
                {
                    "name": "promises",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "label",
                    "description": "optional string that describes the promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise that is fulfilled when all properties of `promises`\nhave been fulfilled, or rejected if any of them become rejected.",
                "type": "Promise"
            },
            "class": "RSVP"
        },
        {
            "file": "bower_components/rsvp/lib/rsvp/map.js",
            "line": 6,
            "description": "`RSVP.map` is similar to JavaScript's native `map` method, except that it\n waits for all promises to become fulfilled before running the `mapFn` on\n each item in given to `promises`. `RSVP.map` returns a promise that will\n become fulfilled with the result of running `mapFn` on the values the promises\n become fulfilled with.\n\n For example:\n\n ```javascript\n\n var promise1 = RSVP.resolve(1);\n var promise2 = RSVP.resolve(2);\n var promise3 = RSVP.resolve(3);\n var promises = [ promise1, promise2, promise3 ];\n\n var mapFn = function(item){\n   return item + 1;\n };\n\n RSVP.map(promises, mapFn).then(function(result){\n   // result is [ 2, 3, 4 ]\n });\n ```\n\n If any of the `promises` given to `RSVP.map` are rejected, the first promise\n that is rejected will be given as an argument to the returned promise's\n rejection handler. For example:\n\n ```javascript\n var promise1 = RSVP.resolve(1);\n var promise2 = RSVP.reject(new Error('2'));\n var promise3 = RSVP.reject(new Error('3'));\n var promises = [ promise1, promise2, promise3 ];\n\n var mapFn = function(item){\n   return item + 1;\n };\n\n RSVP.map(promises, mapFn).then(function(array){\n   // Code here never runs because there are rejected promises!\n }, function(reason) {\n   // reason.message === '2'\n });\n ```\n\n `RSVP.map` will also wait if a promise is returned from `mapFn`. For example,\n say you want to get all comments from a set of blog posts, but you need\n the blog posts first because they contain a url to those comments.\n\n ```javscript\n\n var mapFn = function(blogPost){\n   // getComments does some ajax and returns an RSVP.Promise that is fulfilled\n   // with some comments data\n   return getComments(blogPost.comments_url);\n };\n\n // getBlogPosts does some ajax and returns an RSVP.Promise that is fulfilled\n // with some blog post data\n RSVP.map(getBlogPosts(), mapFn).then(function(comments){\n   // comments is the result of asking the server for the comments\n   // of all blog posts returned from getBlogPosts()\n });\n ```",
            "itemtype": "method",
            "name": "map",
            "static": 1,
            "params": [
                {
                    "name": "promises",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "mapFn",
                    "description": "function to be called on each fulfilled promise.",
                    "type": "Function"
                },
                {
                    "name": "label",
                    "description": "optional string for labeling the promise.\n Useful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise that is fulfilled with the result of calling\n `mapFn` on each fulfilled promise or value when they become fulfilled.\n  The promise will be rejected if any of the given `promises` become rejected.",
                "type": "Promise"
            },
            "class": "RSVP"
        },
        {
            "file": "bower_components/rsvp/lib/rsvp/node.js",
            "line": 73,
            "description": "`RSVP.denodeify` takes a 'node-style' function and returns a function that\nwill return an `RSVP.Promise`. You can use `denodeify` in Node.js or the\nbrowser when you'd prefer to use promises over using callbacks. For example,\n`denodeify` transforms the following:\n\n```javascript\nvar fs = require('fs');\n\nfs.readFile('myfile.txt', function(err, data){\n  if (err) return handleError(err);\n  handleData(data);\n});\n```\n\ninto:\n\n```javascript\nvar fs = require('fs');\nvar readFile = RSVP.denodeify(fs.readFile);\n\nreadFile('myfile.txt').then(handleData, handleError);\n```\n\nIf the node function has multiple success parameters, then `denodeify`\njust returns the first one:\n\n```javascript\nvar request = RSVP.denodeify(require('request'));\n\nrequest('http://example.com').then(function(res) {\n  // ...\n});\n```\n\nHowever, if you need all success parameters, setting `denodeify`'s\nsecond parameter to `true` causes it to return all success parameters\nas an array:\n\n```javascript\nvar request = RSVP.denodeify(require('request'), true);\n\nrequest('http://example.com').then(function(result) {\n  // result[0] -> res\n  // result[1] -> body\n});\n```\n\nOr if you pass it an array with names it returns the parameters as a hash:\n\n```javascript\nvar request = RSVP.denodeify(require('request'), ['res', 'body']);\n\nrequest('http://example.com').then(function(result) {\n  // result.res\n  // result.body\n});\n```\n\nSometimes you need to retain the `this`:\n\n```javascript\nvar app = require('express')();\nvar render = RSVP.denodeify(app.render.bind(app));\n```\n\nThe denodified function inherits from the original function. It works in all\nenvironments, except IE 10 and below. Consequently all properties of the original\nfunction are available to you. However, any properties you change on the\ndenodeified function won't be changed on the original function. Example:\n\n```javascript\nvar request = RSVP.denodeify(require('request')),\n    cookieJar = request.jar(); // <- Inheritance is used here\n\nrequest('http://example.com', {jar: cookieJar}).then(function(res) {\n  // cookieJar.cookies holds now the cookies returned by example.com\n});\n```\n\nUsing `denodeify` makes it easier to compose asynchronous operations instead\nof using callbacks. For example, instead of:\n\n```javascript\nvar fs = require('fs');\n\nfs.readFile('myfile.txt', function(err, data){\n  if (err) { ... } // Handle error\n  fs.writeFile('myfile2.txt', data, function(err){\n    if (err) { ... } // Handle error\n    console.log('done')\n  });\n});\n```\n\nyou can chain the operations together using `then` from the returned promise:\n\n```javascript\nvar fs = require('fs');\nvar readFile = RSVP.denodeify(fs.readFile);\nvar writeFile = RSVP.denodeify(fs.writeFile);\n\nreadFile('myfile.txt').then(function(data){\n  return writeFile('myfile2.txt', data);\n}).then(function(){\n  console.log('done')\n}).catch(function(error){\n  // Handle error\n});\n```",
            "itemtype": "method",
            "name": "denodeify",
            "static": 1,
            "params": [
                {
                    "name": "nodeFunc",
                    "description": "a 'node-style' function that takes a callback as\nits last argument. The callback expects an error to be passed as its first\nargument (if an error occurred, otherwise null), and the value from the\noperation as its second argument ('function(err, value){ }').",
                    "type": "Function"
                },
                {
                    "name": "argumentNames",
                    "description": "An optional paramter that if set\nto `true` causes the promise to fulfill with the callback's success arguments\nas an array. This is useful if the node function has multiple success\nparamters. If you set this paramter to an array with names, the promise will\nfulfill with a hash with these names as keys and the success parameters as\nvalues.",
                    "type": "Boolean|Array"
                }
            ],
            "return": {
                "description": "a function that wraps `nodeFunc` to return an\n`RSVP.Promise`",
                "type": "Function"
            },
            "class": "RSVP"
        },
        {
            "file": "bower_components/rsvp/lib/rsvp/promise.js",
            "line": 177,
            "description": "The primary way of interacting with a promise is through its `then` method,\nwhich registers callbacks to receive either a promise's eventual value or the\nreason why the promise cannot be fulfilled.\n\n```js\nfindUser().then(function(user){\n  // user is available\n}, function(reason){\n  // user is unavailable, and you are given the reason why\n});\n```\n\nChaining\n--------\n\nThe return value of `then` is itself a promise.  This second, 'downstream'\npromise is resolved with the return value of the first promise's fulfillment\nor rejection handler, or rejected if the handler throws an exception.\n\n```js\nfindUser().then(function (user) {\n  return user.name;\n}, function (reason) {\n  return 'default name';\n}).then(function (userName) {\n  // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n  // will be `'default name'`\n});\n\nfindUser().then(function (user) {\n  throw new Error('Found user, but still unhappy');\n}, function (reason) {\n  throw new Error('`findUser` rejected and we're unhappy');\n}).then(function (value) {\n  // never reached\n}, function (reason) {\n  // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n  // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n});\n```\nIf the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n\n```js\nfindUser().then(function (user) {\n  throw new PedagogicalException('Upstream error');\n}).then(function (value) {\n  // never reached\n}).then(function (value) {\n  // never reached\n}, function (reason) {\n  // The `PedgagocialException` is propagated all the way down to here\n});\n```\n\nAssimilation\n------------\n\nSometimes the value you want to propagate to a downstream promise can only be\nretrieved asynchronously. This can be achieved by returning a promise in the\nfulfillment or rejection handler. The downstream promise will then be pending\nuntil the returned promise is settled. This is called *assimilation*.\n\n```js\nfindUser().then(function (user) {\n  return findCommentsByAuthor(user);\n}).then(function (comments) {\n  // The user's comments are now available\n});\n```\n\nIf the assimliated promise rejects, then the downstream promise will also reject.\n\n```js\nfindUser().then(function (user) {\n  return findCommentsByAuthor(user);\n}).then(function (comments) {\n  // If `findCommentsByAuthor` fulfills, we'll have the value here\n}, function (reason) {\n  // If `findCommentsByAuthor` rejects, we'll have the reason here\n});\n```\n\nSimple Example\n--------------\n\nSynchronous Example\n\n```javascript\nvar result;\n\ntry {\n  result = findResult();\n  // success\n} catch(reason) {\n  // failure\n}\n```\n\nErrback Example\n\n```js\nfindResult(function(result, err){\n  if (err) {\n    // failure\n  } else {\n    // success\n  }\n});\n```\n\nPromise Example;\n\n```javascript\nfindResult().then(function(result){\n  // success\n}, function(reason){\n  // failure\n});\n```\n\nAdvanced Example\n--------------\n\nSynchronous Example\n\n```javascript\nvar author, books;\n\ntry {\n  author = findAuthor();\n  books  = findBooksByAuthor(author);\n  // success\n} catch(reason) {\n  // failure\n}\n```\n\nErrback Example\n\n```js\n\nfunction foundBooks(books) {\n\n}\n\nfunction failure(reason) {\n\n}\n\nfindAuthor(function(author, err){\n  if (err) {\n    failure(err);\n    // failure\n  } else {\n    try {\n      findBoooksByAuthor(author, function(books, err) {\n        if (err) {\n          failure(err);\n        } else {\n          try {\n            foundBooks(books);\n          } catch(reason) {\n            failure(reason);\n          }\n        }\n      });\n    } catch(error) {\n      failure(err);\n    }\n    // success\n  }\n});\n```\n\nPromise Example;\n\n```javascript\nfindAuthor().\n  then(findBooksByAuthor).\n  then(function(books){\n    // found books\n}).catch(function(reason){\n  // something went wrong\n});\n```",
            "itemtype": "method",
            "name": "then",
            "params": [
                {
                    "name": "onFulfilled",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onRejected",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "label",
                    "description": "optional string for labeling the promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "RSVP.Promise"
        },
        {
            "file": "bower_components/rsvp/lib/rsvp/promise.js",
            "line": 403,
            "description": "`catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\nas the catch block of a try/catch statement.\n\n```js\nfunction findAuthor(){\n  throw new Error('couldn't find that author');\n}\n\n// synchronous\ntry {\n  findAuthor();\n} catch(reason) {\n  // something went wrong\n}\n\n// async with promises\nfindAuthor().catch(function(reason){\n  // something went wrong\n});\n```",
            "itemtype": "method",
            "name": "catch",
            "params": [
                {
                    "name": "onRejection",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "label",
                    "description": "optional string for labeling the promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "RSVP.Promise"
        },
        {
            "file": "bower_components/rsvp/lib/rsvp/promise.js",
            "line": 435,
            "description": "`finally` will be invoked regardless of the promise's fate just as native\ntry/catch/finally behaves\n\nSynchronous example:\n\n```js\nfindAuthor() {\n  if (Math.random() > 0.5) {\n    throw new Error();\n  }\n  return new Author();\n}\n\ntry {\n  return findAuthor(); // succeed or fail\n} catch(error) {\n  return findOtherAuther();\n} finally {\n  // always runs\n  // doesn't affect the return value\n}\n```\n\nAsynchronous example:\n\n```js\nfindAuthor().catch(function(reason){\n  return findOtherAuther();\n}).finally(function(){\n  // author was either found, or not\n});\n```",
            "itemtype": "method",
            "name": "finally",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "label",
                    "description": "optional string for labeling the promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "RSVP.Promise"
        },
        {
            "file": "bower_components/rsvp/lib/rsvp/race.js",
            "line": 3,
            "description": "This is a convenient alias for `RSVP.Promise.race`.",
            "itemtype": "method",
            "name": "race",
            "static": 1,
            "params": [
                {
                    "name": "array",
                    "description": "Array of promises.",
                    "type": "Array"
                },
                {
                    "name": "label",
                    "description": "An optional label. This is useful\nfor tooling.",
                    "type": "String"
                }
            ],
            "class": "RSVP"
        },
        {
            "file": "bower_components/rsvp/lib/rsvp/reject.js",
            "line": 3,
            "description": "This is a convenient alias for `RSVP.Promise.reject`.",
            "itemtype": "method",
            "name": "reject",
            "static": 1,
            "params": [
                {
                    "name": "reason",
                    "description": "value that the returned promise will be rejected with.",
                    "type": "Any"
                },
                {
                    "name": "label",
                    "description": "optional string for identifying the returned promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a promise rejected with the given `reason`.",
                "type": "Promise"
            },
            "class": "RSVP"
        },
        {
            "file": "bower_components/rsvp/lib/rsvp/resolve.js",
            "line": 3,
            "description": "This is a convenient alias for `RSVP.Promise.resolve`.",
            "itemtype": "method",
            "name": "resolve",
            "static": 1,
            "params": [
                {
                    "name": "value",
                    "description": "value that the returned promise will be resolved with",
                    "type": "Any"
                },
                {
                    "name": "label",
                    "description": "optional string for identifying the returned promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a promise that will become fulfilled with the given\n`value`",
                "type": "Promise"
            },
            "class": "RSVP"
        },
        {
            "file": "bower_components/rsvp/lib/rsvp/rethrow.js",
            "line": 1,
            "description": "`RSVP.rethrow` will rethrow an error on the next turn of the JavaScript event\nloop in order to aid debugging.\n\nPromises A+ specifies that any exceptions that occur with a promise must be\ncaught by the promises implementation and bubbled to the last handler. For\nthis reason, it is recommended that you always specify a second rejection\nhandler function to `then`. However, `RSVP.rethrow` will throw the exception\noutside of the promise, so it bubbles up to your console if in the browser,\nor domain/cause uncaught exception in Node. `rethrow` will also throw the\nerror again so the error can be handled by the promise per the spec.\n\n```javascript\nfunction throws(){\n  throw new Error('Whoops!');\n}\n\nvar promise = new RSVP.Promise(function(resolve, reject){\n  throws();\n});\n\npromise.catch(RSVP.rethrow).then(function(){\n  // Code here doesn't run because the promise became rejected due to an\n  // error!\n}, function (err){\n  // handle the error here\n});\n```\n\nThe 'Whoops' error will be thrown on the next turn of the event loop\nand you can watch for it in your console. You can also handle it using a\nrejection handler given to `.then` or `.catch` on the returned promise.",
            "itemtype": "method",
            "name": "rethrow",
            "static": 1,
            "params": [
                {
                    "name": "reason",
                    "description": "reason the promise became rejected.",
                    "type": "Error"
                }
            ],
            "throws": {
                "description": "Error"
            },
            "class": "RSVP"
        },
        {
            "file": "packages/ember-application/lib/ext/controller.js",
            "line": 77,
            "description": "An array of other controller objects available inside\ninstances of this controller via the `controllers`\nproperty:\n\nFor example, when you define a controller:\n\n```javascript\nApp.CommentsController = Ember.ArrayController.extend({\n  needs: ['post']\n});\n```\n\nThe application's single instance of these other\ncontrollers are accessible by name through the\n`controllers` property:\n\n```javascript\nthis.get('controllers.post'); // instance of App.PostController\n```\n\nGiven that you have a nested controller (nested resource):\n\n```javascript\nApp.CommentsNewController = Ember.ObjectController.extend({\n});\n```\n\nWhen you define a controller that requires access to a nested one:\n\n```javascript\nApp.IndexController = Ember.ObjectController.extend({\n  needs: ['commentsNew']\n});\n```\n\nYou will be able to get access to it:\n\n```javascript\nthis.get('controllers.commentsNew'); // instance of App.CommentsNewController\n```\n\nThis is only available for singleton controllers.",
            "itemtype": "property",
            "name": "needs",
            "type": "Array",
            "default": "[]",
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/ext/controller.js",
            "line": 147,
            "itemtype": "method",
            "name": "controllerFor",
            "see": [
                "{Ember.Route#controllerFor}"
            ],
            "deprecated": true,
            "deprecationMessage": "Use `needs` instead",
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/ext/controller.js",
            "line": 157,
            "description": "Stores the instances of other controllers available from within\nthis controller. Any controller listed by name in the `needs`\nproperty will be accessible by name through this property.\n\n```javascript\nApp.CommentsController = Ember.ArrayController.extend({\n  needs: ['post'],\n  postTitle: function() {\n    var currentPost = this.get('controllers.post'); // instance of App.PostController\n    return currentPost.get('title');\n  }.property('controllers.post.title')\n});\n```",
            "see": [
                "{Ember.ControllerMixin#needs}"
            ],
            "itemtype": "property",
            "name": "controllers",
            "type": "Object",
            "default": "null",
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 12,
            "description": "The `ApplicationInstance` encapsulates all of the stateful aspects of a\nrunning `Application`.\n\nAt a high-level, we break application boot into two distinct phases:\n\n* Definition time, where all of the classes, templates, and other\n  dependencies are loaded (typically in the browser).\n* Run time, where we begin executing the application once everything\n  has loaded.\n\nDefinition time can be expensive and only needs to happen once since it is\nan idempotent operation. For example, between test runs and FastBoot\nrequests, the application stays the same. It is only the state that we want\nto reset.\n\nThat state is what the `ApplicationInstance` manages: it is responsible for\ncreating the container that contains all application state, and disposing of\nit once the particular test run or FastBoot request has finished.",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 34,
            "description": "The application instance's container. The container stores all of the\ninstance-specific state for this application run.",
            "itemtype": "property",
            "name": "container",
            "type": "Ember.Container",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 42,
            "description": "The application's registry. The registry contains the classes, templates,\nand other code that makes up the application.",
            "itemtype": "property",
            "name": "registry",
            "type": "Ember.Registry",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 50,
            "description": "The registry for this application instance. It should use the\n`applicationRegistry` as a fallback.",
            "itemtype": "property",
            "name": "registry",
            "type": "Ember.Registry",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 58,
            "description": "The DOM events for which the event dispatcher should listen.\n\nBy default, the application's `Ember.EventDispatcher` listens\nfor a set of standard DOM events, such as `mousedown` and\n`keyup`, and delegates them to your application's `Ember.View`\ninstances.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "customEvents",
            "type": "Object",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 71,
            "description": "The root DOM element of the Application as an element or a\n[jQuery-compatible selector\nstring](http://api.jquery.com/category/selectors/).",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "rootElement",
            "type": "String|DOMElement",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 106,
            "description": "Instantiates and sets up the router, optionally overriding the default\nlocation. This is useful for manually starting the app in FastBoot or\ntesting environments, where trying to modify the URL would be\ninappropriate.",
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 125,
            "description": "This hook is called by the root-most Route (a.k.a. the ApplicationRoute)\nwhen it has finished creating the root View. By default, we simply take the\nview and append it to the `rootElement` specified on the Application.\n\nIn cases like FastBoot and testing, we can override this hook and implement\ncustom behavior, such as serializing to a string and sending over an HTTP\nsocket rather than appending to DOM.",
            "params": [
                {
                    "name": "view",
                    "description": "the root-most view",
                    "type": "Ember.View"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 141,
            "description": "Tells the router to start routing. The router will ask the location for the\ncurrent URL of the page to determine the initial URL to start routing to.\nTo start the app at a specific URL, call `handleURL` instead.\n\nEnsure that you have called `setupRouter()` on the instance before using\nthis method.",
            "access": "private",
            "tagname": "",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 159,
            "description": "Directs the router to route to a particular URL. This is useful in tests,\nfor example, to tell the app to start at a particular URL. Ensure that you\nhave called `setupRouter()` before calling this method.",
            "params": [
                {
                    "name": "url",
                    "description": "the URL the router should route to",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 173,
            "access": "private",
            "tagname": "",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/application-instance.js",
            "line": 184,
            "access": "private",
            "tagname": "",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 199,
            "description": "The root DOM element of the Application. This can be specified as an\nelement or a\n[jQuery-compatible selector string](http://api.jquery.com/category/selectors/).\n\nThis is the element that will be passed to the Application's,\n`eventDispatcher`, which sets up the listeners for event delegation. Every\nview in your application should be a child of the element you specify here.",
            "itemtype": "property",
            "name": "rootElement",
            "type": "DOMElement",
            "default": "'body'",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 214,
            "description": "The `Ember.EventDispatcher` responsible for delegating events to this\napplication's views.\n\nThe event dispatcher is created by the application at initialization time\nand sets up event listeners on the DOM element described by the\napplication's `rootElement` property.\n\nSee the documentation for `Ember.EventDispatcher` for more information.",
            "itemtype": "property",
            "name": "eventDispatcher",
            "type": "Ember.EventDispatcher",
            "default": "null",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 230,
            "description": "The DOM events for which the event dispatcher should listen.\n\nBy default, the application's `Ember.EventDispatcher` listens\nfor a set of standard DOM events, such as `mousedown` and\n`keyup`, and delegates them to your application's `Ember.View`\ninstances.\n\nIf you would like additional bubbling events to be delegated to your\nviews, set your `Ember.Application`'s `customEvents` property\nto a hash containing the DOM event name as the key and the\ncorresponding view method name as the value. For example:\n\n```javascript\nvar App = Ember.Application.create({\n  customEvents: {\n    // add support for the paste event\n    paste: 'paste'\n  }\n});\n```",
            "itemtype": "property",
            "name": "customEvents",
            "type": "Object",
            "default": "null",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 258,
            "description": "Whether the application should automatically start routing and render\ntemplates to the `rootElement` on DOM ready. While default by true,\nother environments such as FastBoot or a testing harness can set this\nproperty to `false` and control the precise timing and behavior of the boot\nprocess.",
            "itemtype": "property",
            "name": "autoboot",
            "type": "Boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 303,
            "description": "Build and configure the registry for the current application.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "buildRegistry",
            "return": {
                "description": "the configured registry",
                "type": "Ember.Registry"
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 316,
            "description": "Create a container for the current application's registry.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "buildInstance",
            "return": {
                "description": "the configured container",
                "type": "Ember.Container"
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 343,
            "description": "Automatically initialize the application once the DOM has\nbecome ready.\n\nThe initialization itself is scheduled on the actions queue\nwhich ensures that application loading finishes before\nbooting.\n\nIf you are asynchronously loading code, you should call\n`deferReadiness()` to defer booting, and then call\n`advanceReadiness()` once all of your code has finished\nloading.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "scheduleInitialize",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 367,
            "description": "Use this to defer readiness until some condition is true.\n\nExample:\n\n```javascript\nvar App = Ember.Application.create();\n\nApp.deferReadiness();\n// Ember.$ is a reference to the jQuery object/function\nEmber.$.getJSON('/auth-token', function(token) {\n  App.token = token;\n  App.advanceReadiness();\n});\n```\n\nThis allows you to perform asynchronous setup logic and defer\nbooting your application until the setup has finished.\n\nHowever, if the setup requires a loading UI, it might be better\nto use the router for this purpose.",
            "itemtype": "method",
            "name": "deferReadiness",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 397,
            "description": "Call `advanceReadiness` after any asynchronous setup logic has completed.\nEach call to `deferReadiness` must be matched by a call to `advanceReadiness`\nor the application will never become ready and routing will not begin.",
            "itemtype": "method",
            "name": "advanceReadiness",
            "see": [
                "{Ember.Application#deferReadiness}"
            ],
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 414,
            "description": "Registers a factory that can be used for dependency injection (with\n`App.inject`) or for service lookup. Each factory is registered with\na full name including two parts: `type:name`.\n\nA simple example:\n\n```javascript\nvar App = Ember.Application.create();\n\nApp.Orange = Ember.Object.extend();\nApp.register('fruit:favorite', App.Orange);\n```\n\nEmber will resolve factories from the `App` namespace automatically.\nFor example `App.CarsController` will be discovered and returned if\nan application requests `controller:cars`.\n\nAn example of registering a controller with a non-standard name:\n\n```javascript\nvar App = Ember.Application.create();\nvar Session = Ember.Controller.extend();\n\nApp.register('controller:session', Session);\n\n// The Session controller can now be treated like a normal controller,\n// despite its non-standard name.\nApp.ApplicationController = Ember.Controller.extend({\n  needs: ['session']\n});\n```\n\nRegistered factories are **instantiated** by having `create`\ncalled on them. Additionally they are **singletons**, each time\nthey are looked up they return the same instance.\n\nSome examples modifying that default behavior:\n\n```javascript\nvar App = Ember.Application.create();\n\nApp.Person  = Ember.Object.extend();\nApp.Orange  = Ember.Object.extend();\nApp.Email   = Ember.Object.extend();\nApp.session = Ember.Object.create();\n\nApp.register('model:user', App.Person, { singleton: false });\nApp.register('fruit:favorite', App.Orange);\nApp.register('communication:main', App.Email, { singleton: false });\nApp.register('session', App.session, { instantiate: false });\n```",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "fullName",
                    "description": "type:name (e.g., 'model:user')",
                    "type": "String"
                },
                {
                    "name": "factory",
                    "description": "(e.g., App.Person)",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "(optional) disable instantiation or singleton usage",
                    "type": "Object"
                }
            ],
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 476,
            "description": "Define a dependency injection onto a specific factory or all factories\nof a type.\n\nWhen Ember instantiates a controller, view, or other framework component\nit can attach a dependency to that component. This is often used to\nprovide services to a set of framework components.\n\nAn example of providing a session object to all controllers:\n\n```javascript\nvar App = Ember.Application.create();\nvar Session = Ember.Object.extend({ isAuthenticated: false });\n\n// A factory must be registered before it can be injected\nApp.register('session:main', Session);\n\n// Inject 'session:main' onto all factories of the type 'controller'\n// with the name 'session'\nApp.inject('controller', 'session', 'session:main');\n\nApp.IndexController = Ember.Controller.extend({\n  isLoggedIn: Ember.computed.alias('session.isAuthenticated')\n});\n```\n\nInjections can also be performed on specific factories.\n\n```javascript\nApp.inject(<full_name or type>, <property name>, <full_name>)\nApp.inject('route', 'source', 'source:main')\nApp.inject('route:application', 'email', 'model:email')\n```\n\nIt is important to note that injections can only be performed on\nclasses that are instantiated by Ember itself. Instantiating a class\ndirectly (via `create` or `new`) bypasses the dependency injection\nsystem.\n\n**Note:** Ember-Data instantiates its models in a unique manner, and consequently\ninjections onto models (or all models) will not work as expected. Injections\non models can be enabled by setting `Ember.MODEL_FACTORY_INJECTIONS`\nto `true`.",
            "itemtype": "method",
            "name": "inject",
            "params": [
                {
                    "name": "factoryNameOrType",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "injectionName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 529,
            "description": "Calling initialize manually is not supported.\n\nPlease see Ember.Application#advanceReadiness and\nEmber.Application#deferReadiness.",
            "access": "private",
            "tagname": "",
            "deprecated": true,
            "itemtype": "method",
            "name": "initialize",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 543,
            "description": "Initialize the application. This happens automatically.\n\nRun any initializers and run the application load hook. These hooks may\nchoose to defer readiness. For example, an authentication hook might want\nto defer readiness until the auth token has been retrieved.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_initialize",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 580,
            "description": "Reset the application. This is typically used only in tests. It cleans up\nthe application in the following order:\n\n1. Deactivate existing routes\n2. Destroy all objects in the container\n3. Create a new application container\n4. Re-route to the existing url\n\nTypical Example:\n\n```javascript\nvar App;\n\nrun(function() {\n  App = Ember.Application.create();\n});\n\nmodule('acceptance test', {\n  setup: function() {\n    App.reset();\n  }\n});\n\ntest('first test', function() {\n  // App is freshly reset\n});\n\ntest('second test', function() {\n  // App is again freshly reset\n});\n```\n\nAdvanced Example:\n\nOccasionally you may want to prevent the app from initializing during\nsetup. This could enable extra configuration, or enable asserting prior\nto the app becoming ready.\n\n```javascript\nvar App;\n\nrun(function() {\n  App = Ember.Application.create();\n});\n\nmodule('acceptance test', {\n  setup: function() {\n    run(function() {\n      App.reset();\n      App.deferReadiness();\n    });\n  }\n});\n\ntest('first test', function() {\n  ok(true, 'something before app is initialized');\n\n  run(function() {\n    App.advanceReadiness();\n  });\n\n  ok(true, 'something after app is initialized');\n});\n```",
            "itemtype": "method",
            "name": "reset",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 666,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "runInitializers",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 707,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "didBecomeReady",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 732,
            "description": "Called when the Application has become ready.\nThe call will be delayed until the DOM has become ready.",
            "itemtype": "event",
            "name": "ready",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 740,
            "deprecated": true,
            "deprecationMessage": "Use 'Resolver' instead\nSet this to provide an alternate class to `Ember.DefaultResolver`",
            "itemtype": "property",
            "name": "resolver",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 749,
            "description": "Set this to provide an alternate class to `Ember.DefaultResolver`",
            "itemtype": "property",
            "name": "resolver",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 768,
            "itemtype": "method",
            "name": "then",
            "access": "private",
            "tagname": "",
            "deprecated": true,
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 798,
            "description": "Creates a new instance of the application and instructs it to route to the\nspecified initial URL. This method returns a promise that will be resolved\nonce rendering is complete. That promise is resolved with the instance.\n\n```js\nApp.visit('/users').then(function(instance) {\n  var view = instance.view;\n  view.appendTo('#qunit-test-fixtures');\n});\n     ```",
            "itemtype": "method",
            "name": "visit",
            "access": "private",
            "tagname": "",
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 837,
            "description": "Initializer receives an object which has the following attributes:\n`name`, `before`, `after`, `initialize`. The only required attribute is\n`initialize, all others are optional.\n\n* `name` allows you to specify under which name the initializer is registered.\nThis must be a unique name, as trying to register two initializers with the\nsame name will result in an error.\n\n```javascript\nEmber.Application.initializer({\n  name: 'namedInitializer',\n\n  initialize: function(container, application) {\n    Ember.debug('Running namedInitializer!');\n  }\n});\n```\n\n* `before` and `after` are used to ensure that this initializer is ran prior\nor after the one identified by the value. This value can be a single string\nor an array of strings, referencing the `name` of other initializers.\n\nAn example of ordering initializers, we create an initializer named `first`:\n\n```javascript\nEmber.Application.initializer({\n  name: 'first',\n\n  initialize: function(container, application) {\n    Ember.debug('First initializer!');\n  }\n});\n\n// DEBUG: First initializer!\n```\n\nWe add another initializer named `second`, specifying that it should run\nafter the initializer named `first`:\n\n```javascript\nEmber.Application.initializer({\n  name: 'second',\n  after: 'first',\n\n  initialize: function(container, application) {\n    Ember.debug('Second initializer!');\n  }\n});\n\n// DEBUG: First initializer!\n// DEBUG: Second initializer!\n```\n\nAfterwards we add a further initializer named `pre`, this time specifying\nthat it should run before the initializer named `first`:\n\n```javascript\nEmber.Application.initializer({\n  name: 'pre',\n  before: 'first',\n\n  initialize: function(container, application) {\n    Ember.debug('Pre initializer!');\n  }\n});\n\n// DEBUG: Pre initializer!\n// DEBUG: First initializer!\n// DEBUG: Second initializer!\n```\n\nFinally we add an initializer named `post`, specifying it should run after\nboth the `first` and the `second` initializers:\n\n```javascript\nEmber.Application.initializer({\n  name: 'post',\n  after: ['first', 'second'],\n\n  initialize: function(container, application) {\n    Ember.debug('Post initializer!');\n  }\n});\n\n// DEBUG: Pre initializer!\n// DEBUG: First initializer!\n// DEBUG: Second initializer!\n// DEBUG: Post initializer!\n```\n\n* `initialize` is a callback function that receives two arguments, `container`\nand `application` on which you can operate.\n\nExample of using `container` to preload data into the store:\n\n```javascript\nEmber.Application.initializer({\n  name: 'preload-data',\n\n  initialize: function(container, application) {\n    var store = container.lookup('store:main');\n\n    store.pushPayload(preloadedData);\n  }\n});\n```\n\nExample of using `application` to register an adapter:\n\n```javascript\nEmber.Application.initializer({\n  name: 'api-adapter',\n\n  initialize: function(container, application) {\n    application.register('api-adapter:main', ApiAdapter);\n  }\n});\n```",
            "itemtype": "method",
            "name": "initializer",
            "params": [
                {
                    "name": "initializer",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 962,
            "description": "This creates a registry with the default Ember naming conventions.\n\nIt also configures the registry:\n\n* registered views are created every time they are looked up (they are\n  not singletons)\n* registered templates are not factories; the registered value is\n  returned directly.\n* the router receives the application as its `namespace` property\n* all controllers receive the router as their `target` and `controllers`\n  properties\n* all controllers receive the application as their `namespace` property\n* the application view receives the application controller as its\n  `controller` property\n* the application view receives the application template as its\n  `defaultTemplate` property",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "buildRegistry",
            "static": 1,
            "params": [
                {
                    "name": "namespace",
                    "description": "the application for which to\n  build the registry",
                    "type": "Ember.Application"
                }
            ],
            "return": {
                "description": "the built registry",
                "type": "Ember.Registry"
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/application.js",
            "line": 1050,
            "description": "This function defines the default lookup rules for container lookups:\n\n* templates are looked up on `Ember.TEMPLATES`\n* other names are looked up on the application after classifying the name.\n  For example, `controller:post` looks up `App.PostController` by default.\n* if the default lookup fails, look for registered classes on the container\n\nThis allows the application to register default injections in the container\nthat could be overridden by the normal naming convention.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "resolverFor",
            "params": [
                {
                    "name": "namespace",
                    "description": "the namespace to look for classes",
                    "type": "Ember.Namespace"
                }
            ],
            "return": {
                "description": "the resolved value for a given lookup",
                "type": "*"
            },
            "class": "Ember.Application",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 19,
            "description": "This will be set to the Application instance when it is\ncreated.",
            "itemtype": "property",
            "name": "namespace",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 108,
            "description": "This will be set to the Application instance when it is\ncreated.",
            "itemtype": "property",
            "name": "namespace",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 150,
            "description": "This method is called via the container's resolver method.\nIt parses the provided `fullName` and then looks up and\nreturns the appropriate template or class.",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "fullName",
                    "description": "the lookup string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the resolved factory",
                "type": "Object"
            },
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 177,
            "description": "Convert the string name of the form 'type:name' to\na Javascript object with the parsed aspects of the name\nbroken out.",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "fullName",
                    "description": "the lookup string",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "parseName",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 228,
            "description": "Returns a human-readable description for a fullName. Used by the\nApplication namespace in assertions to describe the\nprecise name of the class that Ember is looking for, rather than\ncontainer keys.",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "fullName",
                    "description": "the lookup string",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "lookupDescription",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 259,
            "description": "Given a parseName object (output from `parseName`), apply\nthe conventions expected by `Ember.Router`",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "parsedName",
                    "description": "a parseName object with the parsed\n  fullName lookup string",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "useRouterNaming",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 274,
            "description": "Look up the template in Ember.TEMPLATES",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "parsedName",
                    "description": "a parseName object with the parsed\n  fullName lookup string",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "resolveTemplate",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 295,
            "description": "Lookup the view using `resolveOther`",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "parsedName",
                    "description": "a parseName object with the parsed\n  fullName lookup string",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "resolveView",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 308,
            "description": "Lookup the controller using `resolveOther`",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "parsedName",
                    "description": "a parseName object with the parsed\n  fullName lookup string",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "resolveController",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 320,
            "description": "Lookup the route using `resolveOther`",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "parsedName",
                    "description": "a parseName object with the parsed\n  fullName lookup string",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "resolveRoute",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 333,
            "description": "Lookup the model on the Application namespace",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "parsedName",
                    "description": "a parseName object with the parsed\n  fullName lookup string",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "resolveModel",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 347,
            "description": "Look up the specified object (from parsedName) on the appropriate\nnamespace (usually on the Application)",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "parsedName",
                    "description": "a parseName object with the parsed\n  fullName lookup string",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "resolveHelper",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 359,
            "description": "Look up the specified object (from parsedName) on the appropriate\nnamespace (usually on the Application)",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "parsedName",
                    "description": "a parseName object with the parsed\n  fullName lookup string",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "resolveOther",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-application/lib/system/resolver.js",
            "line": 379,
            "itemtype": "method",
            "name": "_logLookup",
            "params": [
                {
                    "name": "found",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "parsedName",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.DefaultResolver",
            "module": "ember",
            "submodule": "ember-application",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-debug/lib/main.js",
            "line": 20,
            "description": "Define an assertion that will throw an exception if the condition is not\nmet. Ember build tools will remove any calls to `Ember.assert()` when\ndoing a production build. Example:\n\n```javascript\n// Test for truthiness\nEmber.assert('Must pass a valid object', obj);\n\n// Fail unconditionally\nEmber.assert('This code path should never be run');\n```",
            "itemtype": "method",
            "name": "assert",
            "params": [
                {
                    "name": "desc",
                    "description": "A description of the assertion. This will become\n  the text of the Error thrown if the assertion fails.",
                    "type": "String"
                },
                {
                    "name": "test",
                    "description": "Must be truthy for the assertion to pass. If\n  falsy, an exception will be thrown.",
                    "type": "Boolean"
                }
            ],
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-debug"
        },
        {
            "file": "packages/ember-debug/lib/main.js",
            "line": 54,
            "description": "Display a warning with the provided message. Ember build tools will\nremove any calls to `Ember.warn()` when doing a production build.",
            "itemtype": "method",
            "name": "warn",
            "params": [
                {
                    "name": "message",
                    "description": "A warning to display.",
                    "type": "String"
                },
                {
                    "name": "test",
                    "description": "An optional boolean. If falsy, the warning\n  will be displayed.",
                    "type": "Boolean"
                }
            ],
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-debug"
        },
        {
            "file": "packages/ember-debug/lib/main.js",
            "line": 72,
            "description": "Display a debug notice. Ember build tools will remove any calls to\n`Ember.debug()` when doing a production build.\n\n```javascript\nEmber.debug('I\\'m a debug notice!');\n```",
            "itemtype": "method",
            "name": "debug",
            "params": [
                {
                    "name": "message",
                    "description": "A debug message to display.",
                    "type": "String"
                }
            ],
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-debug"
        },
        {
            "file": "packages/ember-debug/lib/main.js",
            "line": 87,
            "description": "Display a deprecation warning with the provided message and a stack trace\n(Chrome and Firefox only). Ember build tools will remove any calls to\n`Ember.deprecate()` when doing a production build.",
            "itemtype": "method",
            "name": "deprecate",
            "params": [
                {
                    "name": "message",
                    "description": "A description of the deprecation.",
                    "type": "String"
                },
                {
                    "name": "test",
                    "description": "An optional boolean. If falsy, the deprecation\n  will be displayed.",
                    "type": "Boolean"
                },
                {
                    "name": "options",
                    "description": "An optional object that can be used to pass\n  in a `url` to the transition guide on the emberjs.com website.",
                    "type": "Object"
                }
            ],
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-debug"
        },
        {
            "file": "packages/ember-debug/lib/main.js",
            "line": 149,
            "description": "Alias an old, deprecated method with its new counterpart.\n\nDisplay a deprecation warning with the provided message and a stack trace\n(Chrome and Firefox only) when the assigned method is called.\n\nEmber build tools will not remove calls to `Ember.deprecateFunc()`, though\nno warnings will be shown in production.\n\n```javascript\nEmber.oldMethod = Ember.deprecateFunc('Please use the new, updated method', Ember.newMethod);\n```",
            "itemtype": "method",
            "name": "deprecateFunc",
            "params": [
                {
                    "name": "message",
                    "description": "A description of the deprecation.",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "The new function called to replace its deprecated counterpart.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "a new function that wrapped the original function with a deprecation warning",
                "type": "Function"
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-debug"
        },
        {
            "file": "packages/ember-debug/lib/main.js",
            "line": 175,
            "description": "Run a function meant for debugging. Ember build tools will remove any calls to\n`Ember.runInDebug()` when doing a production build.\n\n```javascript\nEmber.runInDebug(function() {\n  Ember.Handlebars.EachView.reopen({\n    didInsertElement: function() {\n      console.log('I\\'m happy');\n    }\n  });\n});\n```",
            "itemtype": "method",
            "name": "runInDebug",
            "params": [
                {
                    "name": "func",
                    "description": "The function to be executed.",
                    "type": "Function"
                }
            ],
            "since": "1.5.0",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-debug"
        },
        {
            "file": "packages/ember-debug/lib/main.js",
            "line": 197,
            "description": "Will call `Ember.warn()` if ENABLE_ALL_FEATURES, ENABLE_OPTIONAL_FEATURES, or\nany specific FEATURES flag is truthy.\n\nThis method is called automatically in debug canary builds.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_warnIfUsingStrippedFeatureFlags",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-debug"
        },
        {
            "file": "packages/ember-extension-support/lib/container_debug_adapter.js",
            "line": 51,
            "description": "The container of the application being debugged.\nThis property will be injected\non creation.",
            "itemtype": "property",
            "name": "container",
            "default": "null",
            "class": "Ember.ContainerDebugAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/container_debug_adapter.js",
            "line": 61,
            "description": "The resolver instance of the application\nbeing debugged. This property will be injected\non creation.",
            "itemtype": "property",
            "name": "resolver",
            "default": "null",
            "class": "Ember.ContainerDebugAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/container_debug_adapter.js",
            "line": 71,
            "description": "Returns true if it is possible to catalog a list of available\nclasses in the resolver for a given type.",
            "itemtype": "method",
            "name": "canCatalogEntriesByType",
            "params": [
                {
                    "name": "type",
                    "description": "The type. e.g. \"model\", \"controller\", \"route\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "whether a list is available for this type.",
                "type": "Boolean"
            },
            "class": "Ember.ContainerDebugAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/container_debug_adapter.js",
            "line": 87,
            "description": "Returns the available classes a given type.",
            "itemtype": "method",
            "name": "catalogEntriesByType",
            "params": [
                {
                    "name": "type",
                    "description": "The type. e.g. \"model\", \"controller\", \"route\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An array of strings.",
                "type": "Array"
            },
            "class": "Ember.ContainerDebugAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 61,
            "description": "The container of the application being debugged.\nThis property will be injected\non creation.",
            "itemtype": "property",
            "name": "container",
            "default": "null",
            "since": "1.3.0",
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 73,
            "description": "The container-debug-adapter which is used\nto list all models.",
            "itemtype": "property",
            "name": "containerDebugAdapter",
            "default": "undefined",
            "since": "1.5.0",
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 83,
            "description": "Number of attributes to send\nas columns. (Enough to make the record\nidentifiable).",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "attributeLimit",
            "default": "3",
            "since": "1.3.0",
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 95,
            "description": "Stores all methods that clear observers.\nThese methods will be called on destruction.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "releaseMethods",
            "since": "1.3.0",
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 105,
            "description": "Specifies how records can be filtered.\nRecords returned will need to have a `filterValues`\nproperty with a key for every name in the returned array.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getFilters",
            "return": {
                "description": "List of objects defining filters.\n The object should have a `name` and `desc` property.",
                "type": "Array"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 119,
            "description": "Fetch the model types and observe them for changes.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "watchModelTypes",
            "params": [
                {
                    "name": "typesAdded",
                    "description": "Callback to call to add types.\nTakes an array of objects containing wrapped types (returned from `wrapModelType`).",
                    "type": "Function"
                },
                {
                    "name": "typesUpdated",
                    "description": "Callback to call when a type has changed.\nTakes an array of objects containing wrapped types.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Method to call to remove all observers",
                "type": "Function"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 163,
            "description": "Fetch the records of a given type and observe them for changes.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "watchRecords",
            "params": [
                {
                    "name": "recordsAdded",
                    "description": "Callback to call to add records.\nTakes an array of objects containing wrapped records.\nThe object should have the following properties:\n  columnValues: {Object} key and value of a table cell\n  object: {Object} the actual record object",
                    "type": "Function"
                },
                {
                    "name": "recordsUpdated",
                    "description": "Callback to call when a record has changed.\nTakes an array of objects containing wrapped records.",
                    "type": "Function"
                },
                {
                    "name": "recordsRemoved",
                    "description": "Callback to call when a record has removed.\nTakes the following parameters:\n  index: the array index where the records were removed\n  count: the number of records removed",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Method to call to remove all observers",
                "type": "Function"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 229,
            "description": "Clear all observers before destruction",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "willDestroy",
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 241,
            "description": "Detect whether a class is a model.\n\nTest that against the model class\nof your persistence library",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "detect",
            "params": [
                {
                    "name": "klass",
                    "description": "The class to test",
                    "type": "Class"
                }
            ],
            "return": {
                "description": "boolean Whether the class is a model class or not"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 256,
            "description": "Get the columns for a given model type.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "columnsForType",
            "params": [
                {
                    "name": "type",
                    "description": "The model type",
                    "type": "Class"
                }
            ],
            "return": {
                "description": "An array of columns of the following format:\n name: {String} name of the column\n desc: {String} Humanized description (what would show in a table column name)",
                "type": "Array"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 270,
            "description": "Adds observers to a model type class.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "observeModelType",
            "params": [
                {
                    "name": "type",
                    "description": "The model type class",
                    "type": "Class"
                },
                {
                    "name": "typesUpdated",
                    "description": "Called when a type is modified.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The function to call to remove observers",
                "type": "Function"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 304,
            "description": "Wraps a given model type and observes changes to it.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "wrapModelType",
            "params": [
                {
                    "name": "type",
                    "description": "A model class",
                    "type": "Class"
                },
                {
                    "name": "Optional",
                    "description": "name of the class",
                    "type": "String"
                }
            ],
            "return": {
                "description": "contains the wrapped type and the function to remove observers\nFormat:\n  type: {Object} the wrapped type\n    The wrapped type has the following format:\n      name: {String} name of the type\n      count: {Integer} number of records available\n      columns: {Columns} array of columns to describe the record\n      object: {Class} the actual Model type class\n  release: {Function} The function to remove observers",
                "type": "Object"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 337,
            "description": "Fetches all models defined in the application.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getModelTypes",
            "return": {
                "description": "Array of model types",
                "type": "Array"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 369,
            "description": "Loops over all namespaces and all objects\nattached to them",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_getObjectsOnNamespaces",
            "return": {
                "description": "Array of model type strings",
                "type": "Array"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 399,
            "description": "Fetches all loaded records for a given type.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getRecords",
            "return": {
                "description": "An array of records.\n This array will be observed for changes,\n so it should update when new records are added/removed.",
                "type": "Array"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 412,
            "description": "Wraps a record and observers changes to it.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "wrapRecord",
            "params": [
                {
                    "name": "record",
                    "description": "The record instance.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The wrapped record. Format:\ncolumnValues: {Array}\nsearchKeywords: {Array}",
                "type": "Object"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 433,
            "description": "Gets the values for each column.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getRecordColumnValues",
            "return": {
                "description": "Keys should match column names defined\nby the model type.",
                "type": "Object"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 445,
            "description": "Returns keywords to match when searching records.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getRecordKeywords",
            "return": {
                "description": "Relevant keywords for search.",
                "type": "Array"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 456,
            "description": "Returns the values of filters defined by `getFilters`.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getRecordFilterValues",
            "params": [
                {
                    "name": "record",
                    "description": "The record instance",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The filter values",
                "type": "Object"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 468,
            "description": "Each record can have a color that represents its state.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getRecordColor",
            "params": [
                {
                    "name": "record",
                    "description": "The record instance",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The record's color\n  Possible options: black, red, blue, green",
                "type": "String"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-extension-support/lib/data_adapter.js",
            "line": 481,
            "description": "Observes all relevant properties and re-sends the wrapped record\nwhen a change occurs.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "observerRecord",
            "params": [
                {
                    "name": "record",
                    "description": "The record instance",
                    "type": "Object"
                },
                {
                    "name": "recordUpdated",
                    "description": "The callback to call when a record is updated.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The function to call to remove all observers.",
                "type": "Function"
            },
            "class": "Ember.DataAdapter",
            "module": "ember",
            "submodule": "ember-extension-support",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-htmlbars/lib/compat/handlebars-get.js",
            "line": 6,
            "description": "Lookup both on root and on window. If the path starts with\na keyword, the corresponding object will be looked up in the\ntemplate's data hash and used to resolve the path.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "root",
                    "description": "The object to look up the property on",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "The path to be lookedup",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The template's option hash",
                    "type": "Object"
                }
            ],
            "deprecated": true,
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/compat/make-bound-helper.js",
            "line": 19,
            "description": "A helper function used by `registerBoundHelper`. Takes the\nprovided Handlebars helper function fn and returns it in wrapped\nbound helper form.\n\nThe main use case for using this outside of `registerBoundHelper`\nis for registering helpers on the container:\n\n```js\nvar boundHelperFn = Ember.Handlebars.makeBoundHelper(function(word) {\n  return word.toUpperCase();\n});\n\ncontainer.register('helper:my-bound-helper', boundHelperFn);\n```\n\nIn the above example, if the helper function hadn't been wrapped in\n`makeBoundHelper`, the registered helper would be unbound.",
            "itemtype": "method",
            "name": "makeBoundHelper",
            "params": [
                {
                    "name": "function",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "dependentKeys",
                    "description": "",
                    "type": "String",
                    "multiple": true
                }
            ],
            "since": "1.2.0",
            "deprecated": true,
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/compat/register-bound-helper.js",
            "line": 11,
            "description": "Register a bound handlebars helper. Bound helpers behave similarly to regular\nhandlebars helpers, with the added ability to re-render when the underlying data\nchanges.\n\n## Simple example\n\n```javascript\nEmber.Handlebars.registerBoundHelper('capitalize', function(value) {\n  return Ember.String.capitalize(value);\n});\n```\n\nThe above bound helper can be used inside of templates as follows:\n\n```handlebars\n{{capitalize name}}\n```\n\nIn this case, when the `name` property of the template's context changes,\nthe rendered value of the helper will update to reflect this change.\n\n## Example with options\n\nLike normal handlebars helpers, bound helpers have access to the options\npassed into the helper call.\n\n```javascript\nEmber.Handlebars.registerBoundHelper('repeat', function(value, options) {\n  var count = options.hash.count;\n  var a = [];\n  while(a.length < count) {\n      a.push(value);\n  }\n  return a.join('');\n});\n```\n\nThis helper could be used in a template as follows:\n\n```handlebars\n{{repeat text count=3}}\n```\n\n## Example with bound options\n\nBound hash options are also supported. Example:\n\n```handlebars\n{{repeat text count=numRepeats}}\n```\n\nIn this example, count will be bound to the value of\nthe `numRepeats` property on the context. If that property\nchanges, the helper will be re-rendered.\n\n## Example with extra dependencies\n\nThe `Ember.Handlebars.registerBoundHelper` method takes a variable length\nthird parameter which indicates extra dependencies on the passed in value.\nThis allows the handlebars helper to update when these dependencies change.\n\n```javascript\nEmber.Handlebars.registerBoundHelper('capitalizeName', function(value) {\n  return value.get('name').toUpperCase();\n}, 'name');\n```\n\n## Example with multiple bound properties\n\n`Ember.Handlebars.registerBoundHelper` supports binding to\nmultiple properties, e.g.:\n\n```javascript\nEmber.Handlebars.registerBoundHelper('concatenate', function() {\n  var values = Array.prototype.slice.call(arguments, 0, -1);\n  return values.join('||');\n});\n```\n\nWhich allows for template syntax such as `{{concatenate prop1 prop2}}` or\n`{{concatenate prop1 prop2 prop3}}`. If any of the properties change,\nthe helper will re-render.  Note that dependency keys cannot be\nusing in conjunction with multi-property helpers, since it is ambiguous\nwhich property the dependent keys would belong to.\n\n## Use with unbound helper\n\nThe `{{unbound}}` helper can be used with bound helper invocations\nto render them in their unbound form, e.g.\n\n```handlebars\n{{unbound capitalize name}}\n```\n\nIn this example, if the name property changes, the helper\nwill not re-render.\n\n## Use with blocks not supported\n\nBound helpers do not support use with Handlebars blocks or\nthe addition of child views of any kind.",
            "itemtype": "method",
            "name": "registerBoundHelper",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "function",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "dependentKeys",
                    "description": "",
                    "type": "String",
                    "multiple": true
                }
            ],
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/helpers/bind-attr.js",
            "line": 22,
            "description": "`bind-attr` allows you to create a binding between DOM element attributes and\nEmber objects. For example:\n\n```handlebars\n<img {{bind-attr src=imageUrl alt=imageTitle}}>\n```\n\nThe above handlebars template will fill the `<img>`'s `src` attribute with\nthe value of the property referenced with `imageUrl` and its `alt`\nattribute with the value of the property referenced with `imageTitle`.\n\nIf the rendering context of this template is the following object:\n\n```javascript\n{\n  imageUrl: 'http://lolcats.info/haz-a-funny',\n  imageTitle: 'A humorous image of a cat'\n}\n```\n\nThe resulting HTML output will be:\n\n```html\n<img src=\"http://lolcats.info/haz-a-funny\" alt=\"A humorous image of a cat\">\n```\n\n`bind-attr` cannot redeclare existing DOM element attributes. The use of `src`\nin the following `bind-attr` example will be ignored and the hard coded value\nof `src=\"/failwhale.gif\"` will take precedence:\n\n```handlebars\n<img src=\"/failwhale.gif\" {{bind-attr src=imageUrl alt=imageTitle}}>\n```\n\n### `bind-attr` and the `class` attribute\n\n`bind-attr` supports a special syntax for handling a number of cases unique\nto the `class` DOM element attribute. The `class` attribute combines\nmultiple discrete values into a single attribute as a space-delimited\nlist of strings. Each string can be:\n\n* a string return value of an object's property.\n* a boolean return value of an object's property\n* a hard-coded value\n\nA string return value works identically to other uses of `bind-attr`. The\nreturn value of the property will become the value of the attribute. For\nexample, the following view and template:\n\n```javascript\n  AView = View.extend({\n    someProperty: function() {\n      return \"aValue\";\n    }.property()\n  })\n```\n\n```handlebars\n<img {{bind-attr class=view.someProperty}}>\n```\n\nResult in the following rendered output:\n\n```html\n<img class=\"aValue\">\n```\n\nA boolean return value will insert a specified class name if the property\nreturns `true` and remove the class name if the property returns `false`.\n\nA class name is provided via the syntax\n`somePropertyName:class-name-if-true`.\n\n```javascript\nAView = View.extend({\n  someBool: true\n})\n```\n\n```handlebars\n<img {{bind-attr class=\"view.someBool:class-name-if-true\"}}>\n```\n\nResult in the following rendered output:\n\n```html\n<img class=\"class-name-if-true\">\n```\n\nAn additional section of the binding can be provided if you want to\nreplace the existing class instead of removing it when the boolean\nvalue changes:\n\n```handlebars\n<img {{bind-attr class=\"view.someBool:class-name-if-true:class-name-if-false\"}}>\n```\n\nA hard-coded value can be used by prepending `:` to the desired\nclass name: `:class-name-to-always-apply`.\n\n```handlebars\n<img {{bind-attr class=\":class-name-to-always-apply\"}}>\n```\n\nResults in the following rendered output:\n\n```html\n<img class=\"class-name-to-always-apply\">\n```\n\nAll three strategies - string return value, boolean return value, and\nhard-coded value – can be combined in a single declaration:\n\n```handlebars\n<img {{bind-attr class=\":class-name-to-always-apply view.someBool:class-name-if-true view.someProperty\"}}>\n```",
            "itemtype": "method",
            "name": "bind-attr",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Hash"
                }
            ],
            "return": {
                "description": "HTML string",
                "type": "String"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/helpers/bind-attr.js",
            "line": 212,
            "description": "See `bind-attr`",
            "itemtype": "method",
            "name": "bindAttr",
            "deprecated": true,
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Hash"
                }
            ],
            "return": {
                "description": "HTML string",
                "type": "String"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/helpers/collection.js",
            "line": 18,
            "description": "`{{collection}}` is a `Ember.Handlebars` helper for adding instances of\n`Ember.CollectionView` to a template. See [Ember.CollectionView](/api/classes/Ember.CollectionView.html)\n for additional information on how a `CollectionView` functions.\n\n`{{collection}}`'s primary use is as a block helper with a `contentBinding`\noption pointing towards an `Ember.Array`-compatible object. An `Ember.View`\ninstance will be created for each item in its `content` property. Each view\nwill have its own `content` property set to the appropriate item in the\ncollection.\n\nThe provided block will be applied as the template for each item's view.\n\nGiven an empty `<body>` the following template:\n\n```handlebars\n{{! application.hbs }}\n{{#collection content=model}}\n  Hi {{view.content.name}}\n{{/collection}}\n```\n\nAnd the following application code\n\n```javascript\nApp = Ember.Application.create();\nApp.ApplicationRoute = Ember.Route.extend({\n  model: function() {\n    return [{name: 'Yehuda'},{name: 'Tom'},{name: 'Peter'}];\n  }\n});\n```\n\nThe following HTML will result:\n\n```html\n<div class=\"ember-view\">\n  <div class=\"ember-view\">Hi Yehuda</div>\n  <div class=\"ember-view\">Hi Tom</div>\n  <div class=\"ember-view\">Hi Peter</div>\n</div>\n```\n\n### Non-block version of collection\n\nIf you provide an `itemViewClass` option that has its own `template` you may\nomit the block.\n\nThe following template:\n\n```handlebars\n{{! application.hbs }}\n{{collection content=model itemViewClass=\"an-item\"}}\n```\n\nAnd application code\n\n```javascript\nApp = Ember.Application.create();\nApp.ApplicationRoute = Ember.Route.extend({\n  model: function() {\n    return [{name: 'Yehuda'},{name: 'Tom'},{name: 'Peter'}];\n  }\n});\n\nApp.AnItemView = Ember.View.extend({\n  template: Ember.Handlebars.compile(\"Greetings {{view.content.name}}\")\n});\n```\n\nWill result in the HTML structure below\n\n```html\n<div class=\"ember-view\">\n  <div class=\"ember-view\">Greetings Yehuda</div>\n  <div class=\"ember-view\">Greetings Tom</div>\n  <div class=\"ember-view\">Greetings Peter</div>\n</div>\n```\n\n### Specifying a CollectionView subclass\n\nBy default the `{{collection}}` helper will create an instance of\n`Ember.CollectionView`. You can supply a `Ember.CollectionView` subclass to\nthe helper by passing it as the first argument:\n\n```handlebars\n{{#collection \"my-custom-collection\" content=model}}\n  Hi {{view.content.name}}\n{{/collection}}\n```\n\nThis example would look for the class `App.MyCustomCollection`.\n\n### Forwarded `item.*`-named Options\n\nAs with the `{{view}}`, helper options passed to the `{{collection}}` will be\nset on the resulting `Ember.CollectionView` as properties. Additionally,\noptions prefixed with `item` will be applied to the views rendered for each\nitem (note the camelcasing):\n\n```handlebars\n{{#collection content=model\n              itemTagName=\"p\"\n              itemClassNames=\"greeting\"}}\n  Howdy {{view.content.name}}\n{{/collection}}\n```\n\nWill result in the following HTML structure:\n\n```html\n<div class=\"ember-view\">\n  <p class=\"ember-view greeting\">Howdy Yehuda</p>\n  <p class=\"ember-view greeting\">Howdy Tom</p>\n  <p class=\"ember-view greeting\">Howdy Peter</p>\n</div>\n```",
            "itemtype": "method",
            "name": "collection",
            "deprecated": true,
            "deprecationMessage": "Use `{{each}}` helper instead.",
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/helpers/component.js",
            "line": 13,
            "description": "The `{{component}}` helper lets you add instances of `Ember.Component` to a\ntemplate. See [Ember.Component](/api/classes/Ember.Component.html) for\nadditional information on how a `Component` functions.\n\n`{{component}}`'s primary use is for cases where you want to dynamically\nchange which type of component is rendered as the state of your application\nchanges.\n\nThe provided block will be applied as the template for the component.\n\nGiven an empty `<body>` the following template:\n\n```handlebars\n{{! application.hbs }}\n{{component infographicComponentName}}\n```\n\nAnd the following application code\n\n```javascript\nApp = Ember.Application.create();\nApp.ApplicationController = Ember.Controller.extend({\n  infographicComponentName: function() {\n    if (this.get('isMarketOpen')) {\n      return \"live-updating-chart\";\n    } else {\n      return \"market-close-summary\";\n    }\n  }.property('isMarketOpen')\n});\n```\n\nThe `live-updating-chart` component will be appended when `isMarketOpen` is\n`true`, and the `market-close-summary` component will be appended when\n`isMarketOpen` is `false`. If the value changes while the app is running,\nthe component will be automatically swapped out accordingly.\n\nNote: You should not use this helper when you are consistently rendering the same\ncomponent. In that case, use standard component syntax, for example:\n\n```handlebars\n{{! application.hbs }}\n{{live-updating-chart}}\n```",
            "itemtype": "method",
            "name": "component",
            "since": "1.11.0",
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/helpers/debugger.js",
            "line": 9,
            "description": "Execute the `debugger` statement in the current template's context.\n\n```handlebars\n{{debugger}}\n```\n\nWhen using the debugger helper you will have access to a `get` function. This\nfunction retrieves values available in the context of the template.\n\nFor example, if you're wondering why a value `{{foo}}` isn't rendering as\nexpected within a template, you could place a `{{debugger}}` statement and,\nwhen the `debugger;` breakpoint is hit, you can attempt to retrieve this value:\n\n```\n> get('foo')\n```\n\n`get` is also aware of keywords. So in this situation\n\n```handlebars\n{{#each items as |item|}}\n  {{debugger}}\n{{/each}}\n```\n\nyou'll be able to get values from the current item:\n\n```\n> get('item.name')\n```\n\nYou can also access the context of the view to make sure it is the object that\nyou expect:\n\n```\n> context\n```",
            "itemtype": "method",
            "name": "debugger",
            "params": [
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/helpers/each.js",
            "line": 9,
            "description": "The `{{#each}}` helper loops over elements in a collection. It is an extension\nof the base Handlebars `{{#each}}` helper.\n\nThe default behavior of `{{#each}}` is to yield its inner block once for every\nitem in an array.\n\n```javascript\nvar developers = [{name: 'Yehuda'},{name: 'Tom'}, {name: 'Paul'}];\n```\n\n```handlebars\n{{#each person in developers}}\n  {{person.name}}\n  {{! `this` is whatever it was outside the #each }}\n{{/each}}\n```\n\nThe same rules apply to arrays of primitives, but the items may need to be\nreferences with `{{this}}`.\n\n```javascript\nvar developerNames = ['Yehuda', 'Tom', 'Paul']\n```\n\n```handlebars\n{{#each name in developerNames}}\n  {{name}}\n{{/each}}\n```\n\n### {{else}} condition\n\n`{{#each}}` can have a matching `{{else}}`. The contents of this block will render\nif the collection is empty.\n\n```\n{{#each person in developers}}\n  {{person.name}}\n{{else}}\n  <p>Sorry, nobody is available for this task.</p>\n{{/each}}\n```\n\n### Specifying an alternative view for each item\n\n`itemViewClass` can control which view will be used during the render of each\nitem's template.\n\nThe following template:\n\n```handlebars\n<ul>\n{{#each developer in developers itemViewClass=\"person\"}}\n  {{developer.name}}\n{{/each}}\n</ul>\n```\n\nWill use the following view for each item\n\n```javascript\nApp.PersonView = Ember.View.extend({\n  tagName: 'li'\n});\n```\n\nResulting in HTML output that looks like the following:\n\n```html\n<ul>\n  <li class=\"ember-view\">Yehuda</li>\n  <li class=\"ember-view\">Tom</li>\n  <li class=\"ember-view\">Paul</li>\n</ul>\n```\n\n`itemViewClass` also enables a non-block form of `{{each}}`. The view\nmust {{#crossLink \"Ember.View/toc_templates\"}}provide its own template{{/crossLink}},\nand then the block should be dropped. An example that outputs the same HTML\nas the previous one:\n\n```javascript\nApp.PersonView = Ember.View.extend({\n  tagName: 'li',\n  template: '{{developer.name}}'\n});\n```\n\n```handlebars\n<ul>\n  {{each developer in developers itemViewClass=\"person\"}}\n</ul>\n```\n\n### Specifying an alternative view for no items (else)\n\nThe `emptyViewClass` option provides the same flexibility to the `{{else}}`\ncase of the each helper.\n\n```javascript\nApp.NoPeopleView = Ember.View.extend({\n  tagName: 'li',\n  template: 'No person is available, sorry'\n});\n```\n\n```handlebars\n<ul>\n{{#each developer in developers emptyViewClass=\"no-people\"}}\n  <li>{{developer.name}}</li>\n{{/each}}\n</ul>\n```\n\n### Wrapping each item in a controller\n\nControllers in Ember manage state and decorate data. In many cases,\nproviding a controller for each item in a list can be useful.\nSpecifically, an {{#crossLink \"Ember.ObjectController\"}}Ember.ObjectController{{/crossLink}}\nshould probably be used. Item controllers are passed the item they\nwill present as a `model` property, and an object controller will\nproxy property lookups to `model` for us.\n\nThis allows state and decoration to be added to the controller\nwhile any other property lookups are delegated to the model. An example:\n\n```javascript\nApp.RecruitController = Ember.ObjectController.extend({\n  isAvailableForHire: function() {\n    return !this.get('isEmployed') && this.get('isSeekingWork');\n  }.property('isEmployed', 'isSeekingWork')\n})\n```\n\n```handlebars\n{{#each person in developers itemController=\"recruit\"}}\n  {{person.name}} {{#if person.isAvailableForHire}}Hire me!{{/if}}\n{{/each}}\n```",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "name",
                    "description": "name for item (used with `in`)",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "path",
                    "description": "path",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "Handlebars key/value pairs of options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "itemViewClass",
                            "description": "a path to a view class used for each item",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "emptyViewClass",
                            "description": "a path to a view class used for each item",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "itemController",
                            "description": "name of a controller to be created for each item",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/helpers/if_unless.js",
            "line": 14,
            "itemtype": "method",
            "name": "if",
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/helpers/if_unless.js",
            "line": 23,
            "itemtype": "method",
            "name": "unless",
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/helpers/input.js",
            "line": 12,
            "description": "The `{{input}}` helper inserts an HTML `<input>` tag into the template,\n  with a `type` value of either `text` or `checkbox`. If no `type` is provided,\n  `text` will be the default value applied. The attributes of `{{input}}`\n  match those of the native HTML tag as closely as possible for these two types.\n## Use as text field\n  An `{{input}}` with no `type` or a `type` of `text` will render an HTML text input.\n  The following HTML attributes can be set via the helper:\n\n <table>\n  <tr><td>`readonly`</td><td>`required`</td><td>`autofocus`</td></tr>\n  <tr><td>`value`</td><td>`placeholder`</td><td>`disabled`</td></tr>\n  <tr><td>`size`</td><td>`tabindex`</td><td>`maxlength`</td></tr>\n  <tr><td>`name`</td><td>`min`</td><td>`max`</td></tr>\n  <tr><td>`pattern`</td><td>`accept`</td><td>`autocomplete`</td></tr>\n  <tr><td>`autosave`</td><td>`formaction`</td><td>`formenctype`</td></tr>\n  <tr><td>`formmethod`</td><td>`formnovalidate`</td><td>`formtarget`</td></tr>\n  <tr><td>`height`</td><td>`inputmode`</td><td>`multiple`</td></tr>\n  <tr><td>`step`</td><td>`width`</td><td>`form`</td></tr>\n  <tr><td>`selectionDirection`</td><td>`spellcheck`</td><td>&nbsp;</td></tr>\n </table>\n\nWhen set to a quoted string, these values will be directly applied to the HTML\n  element. When left unquoted, these values will be bound to a property on the\n  template's current rendering context (most typically a controller instance).\n## Unbound:\n```handlebars\n  {{input value=\"http://www.facebook.com\"}}\n  ```\n\n```html\n  <input type=\"text\" value=\"http://www.facebook.com\"/>\n  ```\n## Bound:\n```javascript\n  App.ApplicationController = Ember.Controller.extend({\n    firstName: \"Stanley\",\n    entryNotAllowed: true\n  });\n  ```\n\n```handlebars\n  {{input type=\"text\" value=firstName disabled=entryNotAllowed size=\"50\"}}\n  ```\n\n```html\n  <input type=\"text\" value=\"Stanley\" disabled=\"disabled\" size=\"50\"/>\n  ```\n## Actions\nThe helper can send multiple actions based on user events.\nThe action property defines the action which is sent when\n  the user presses the return key.\n```handlebars\n  {{input action=\"submit\"}}\n  ```\nThe helper allows some user events to send actions.\n\n* `enter`\n* `insert-newline`\n* `escape-press`\n* `focus-in`\n* `focus-out`\n* `key-press`\n\nFor example, if you desire an action to be sent when the input is blurred,\n  you only need to setup the action name to the event name property.\n```handlebars\n  {{input focus-in=\"alertMessage\"}}\n  ```\nSee more about [Text Support Actions](/api/classes/Ember.TextField.html)\n## Extension\nInternally, `{{input type=\"text\"}}` creates an instance of `Ember.TextField`, passing\n  arguments from the helper to `Ember.TextField`'s `create` method. You can extend the\n  capabilities of text inputs in your applications by reopening this class. For example,\n  if you are building a Bootstrap project where `data-*` attributes are used, you\n  can add one to the `TextField`'s `attributeBindings` property:\n\n```javascript\n  Ember.TextField.reopen({\n    attributeBindings: ['data-error']\n  });\n  ```\nKeep in mind when writing `Ember.TextField` subclasses that `Ember.TextField`\n  itself extends `Ember.Component`, meaning that it does NOT inherit\n  the `controller` of the parent view.\nSee more about [Ember components](/api/classes/Ember.Component.html)\n\n## Use as checkbox\nAn `{{input}}` with a `type` of `checkbox` will render an HTML checkbox input.\n  The following HTML attributes can be set via the helper:\n\n* `checked`\n* `disabled`\n* `tabindex`\n* `indeterminate`\n* `name`\n* `autofocus`\n* `form`\n\nWhen set to a quoted string, these values will be directly applied to the HTML\n  element. When left unquoted, these values will be bound to a property on the\n  template's current rendering context (most typically a controller instance).\n## Unbound:\n```handlebars\n  {{input type=\"checkbox\" name=\"isAdmin\"}}\n  ```\n```html\n  <input type=\"checkbox\" name=\"isAdmin\" />\n  ```\n## Bound:\n```javascript\n  App.ApplicationController = Ember.Controller.extend({\n    isAdmin: true\n  });\n  ```\n\n```handlebars\n  {{input type=\"checkbox\" checked=isAdmin }}\n  ```\n\n```html\n  <input type=\"checkbox\" checked=\"checked\" />\n  ```\n## Extension\nInternally, `{{input type=\"checkbox\"}}` creates an instance of `Ember.Checkbox`, passing\n  arguments from the helper to `Ember.Checkbox`'s `create` method. You can extend the\n  capablilties of checkbox inputs in your applications by reopening this class. For example,\n  if you wanted to add a css class to all checkboxes in your application:\n\n```javascript\n  Ember.Checkbox.reopen({\n    classNames: ['my-app-checkbox']\n  });\n  ```",
            "itemtype": "method",
            "name": "input",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Hash"
                }
            ],
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/helpers/loc.js",
            "line": 10,
            "description": "Calls [Ember.String.loc](/api/classes/Ember.String.html#method_loc) with the\nprovided string.\n\nThis is a convenient way to localize text within a template:\n\n```javascript\nEmber.STRINGS = {\n  '_welcome_': 'Bonjour'\n};\n```\n\n```handlebars\n<div class='message'>\n  {{loc '_welcome_'}}\n</div>\n```\n\n```html\n<div class='message'>\n  Bonjour\n</div>\n```\n\nSee [Ember.String.loc](/api/classes/Ember.String.html#method_loc) for how to\nset up localized string references.",
            "itemtype": "method",
            "name": "loc",
            "params": [
                {
                    "name": "str",
                    "description": "The string to format",
                    "type": "String"
                }
            ],
            "see": [
                "{Ember.String#loc}"
            ],
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/helpers/log.js",
            "line": 8,
            "description": "`log` allows you to output the value of variables in the current rendering\ncontext. `log` also accepts primitive types such as strings or numbers.\n\n```handlebars\n{{log \"myVariable:\" myVariable }}\n```",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/helpers/partial.js",
            "line": 11,
            "description": "The `partial` helper renders another template without\nchanging the template context:\n\n```handlebars\n{{foo}}\n{{partial \"nav\"}}\n```\n\nThe above example template will render a template named\n\"_nav\", which has the same context as the parent template\nit's rendered into, so if the \"_nav\" template also referenced\n`{{foo}}`, it would print the same thing as the `{{foo}}`\nin the above example.\n\nIf a \"_nav\" template isn't found, the `partial` helper will\nfall back to a template named \"nav\".\n\n## Bound template names\n\nThe parameter supplied to `partial` can also be a path\nto a property containing a template name, e.g.:\n\n```handlebars\n{{partial someTemplateName}}\n```\n\nThe above example will look up the value of `someTemplateName`\non the template context (e.g. a controller) and use that\nvalue as the name of the template to render. If the resolved\nvalue is falsy, nothing will be rendered. If `someTemplateName`\nchanges, the partial will be re-rendered using the new template\nname.",
            "itemtype": "method",
            "name": "partial",
            "params": [
                {
                    "name": "partialName",
                    "description": "the name of the template to render minus the leading underscore",
                    "type": "String"
                }
            ],
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/helpers/template.js",
            "line": 8,
            "deprecated": true,
            "itemtype": "method",
            "name": "template",
            "params": [
                {
                    "name": "templateName",
                    "description": "the template to render",
                    "type": "String"
                }
            ],
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/helpers/text_area.js",
            "line": 9,
            "description": "`{{textarea}}` inserts a new instance of `<textarea>` tag into the template.\nThe attributes of `{{textarea}}` match those of the native HTML tags as\nclosely as possible.\n\nThe following HTML attributes can be set:\n\n  * `value`\n  * `name`\n  * `rows`\n  * `cols`\n  * `placeholder`\n  * `disabled`\n  * `maxlength`\n  * `tabindex`\n  * `selectionEnd`\n  * `selectionStart`\n  * `selectionDirection`\n  * `wrap`\n  * `readonly`\n  * `autofocus`\n  * `form`\n  * `spellcheck`\n  * `required`\n\nWhen set to a quoted string, these value will be directly applied to the HTML\nelement. When left unquoted, these values will be bound to a property on the\ntemplate's current rendering context (most typically a controller instance).\n\nUnbound:\n\n```handlebars\n{{textarea value=\"Lots of static text that ISN'T bound\"}}\n```\n\nWould result in the following HTML:\n\n```html\n<textarea class=\"ember-text-area\">\n  Lots of static text that ISN'T bound\n</textarea>\n```\n\nBound:\n\nIn the following example, the `writtenWords` property on `App.ApplicationController`\nwill be updated live as the user types 'Lots of text that IS bound' into\nthe text area of their browser's window.\n\n```javascript\nApp.ApplicationController = Ember.Controller.extend({\n  writtenWords: \"Lots of text that IS bound\"\n});\n```\n\n```handlebars\n{{textarea value=writtenWords}}\n```\n\n Would result in the following HTML:\n\n```html\n<textarea class=\"ember-text-area\">\n  Lots of text that IS bound\n</textarea>\n```\n\nIf you wanted a one way binding between the text area and a div tag\nsomewhere else on your screen, you could use `Ember.computed.oneWay`:\n\n```javascript\nApp.ApplicationController = Ember.Controller.extend({\n  writtenWords: \"Lots of text that IS bound\",\n  outputWrittenWords: Ember.computed.oneWay(\"writtenWords\")\n});\n```\n\n```handlebars\n{{textarea value=writtenWords}}\n\n<div>\n  {{outputWrittenWords}}\n</div>\n```\n\nWould result in the following HTML:\n\n```html\n<textarea class=\"ember-text-area\">\n  Lots of text that IS bound\n</textarea>\n\n<-- the following div will be updated in real time as you type -->\n\n<div>\n  Lots of text that IS bound\n</div>\n```\n\nFinally, this example really shows the power and ease of Ember when two\nproperties are bound to eachother via `Ember.computed.alias`. Type into\neither text area box and they'll both stay in sync. Note that\n`Ember.computed.alias` costs more in terms of performance, so only use it when\nyour really binding in both directions:\n\n```javascript\nApp.ApplicationController = Ember.Controller.extend({\n  writtenWords: \"Lots of text that IS bound\",\n  twoWayWrittenWords: Ember.computed.alias(\"writtenWords\")\n});\n```\n\n```handlebars\n{{textarea value=writtenWords}}\n{{textarea value=twoWayWrittenWords}}\n```\n\n```html\n<textarea id=\"ember1\" class=\"ember-text-area\">\n  Lots of text that IS bound\n</textarea>\n\n<-- both updated in real time -->\n\n<textarea id=\"ember2\" class=\"ember-text-area\">\n  Lots of text that IS bound\n</textarea>\n```\n\n## Actions\n\nThe helper can send multiple actions based on user events.\n\nThe action property defines the action which is send when\nthe user presses the return key.\n\n```handlebars\n{{input action=\"submit\"}}\n```\n\nThe helper allows some user events to send actions.\n\n* `enter`\n* `insert-newline`\n* `escape-press`\n* `focus-in`\n* `focus-out`\n* `key-press`\n\nFor example, if you desire an action to be sent when the input is blurred,\nyou only need to setup the action name to the event name property.\n\n```handlebars\n{{textarea focus-in=\"alertMessage\"}}\n```\n\nSee more about [Text Support Actions](/api/classes/Ember.TextArea.html)\n\n## Extension\n\nInternally, `{{textarea}}` creates an instance of `Ember.TextArea`, passing\narguments from the helper to `Ember.TextArea`'s `create` method. You can\nextend the capabilities of text areas in your application by reopening this\nclass. For example, if you are building a Bootstrap project where `data-*`\nattributes are used, you can globally add support for a `data-*` attribute\non all `{{textarea}}`s' in your app by reopening `Ember.TextArea` or\n`Ember.TextSupport` and adding it to the `attributeBindings` concatenated\nproperty:\n\n```javascript\nEmber.TextArea.reopen({\n  attributeBindings: ['data-error']\n});\n```\n\nKeep in mind when writing `Ember.TextArea` subclasses that `Ember.TextArea`\nitself extends `Ember.Component`, meaning that it does NOT inherit\nthe `controller` of the parent view.\n\nSee more about [Ember components](/api/classes/Ember.Component.html)",
            "itemtype": "method",
            "name": "textarea",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Hash"
                }
            ],
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/helpers/unbound.js",
            "line": 11,
            "description": "`unbound` allows you to output a property without binding. *Important:* The\noutput will not be updated if the property changes. Use with caution.\n\n```handlebars\n<div>{{unbound somePropertyThatDoesntChange}}</div>\n```\n\n`unbound` can also be used in conjunction with a bound helper to\nrender it in its unbound form:\n\n```handlebars\n<div>{{unbound helperName somePropertyThatDoesntChange}}</div>\n```",
            "itemtype": "method",
            "name": "unbound",
            "params": [
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "HTML string",
                "type": "String"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/helpers/view.js",
            "line": 13,
            "description": "`{{view}}` inserts a new instance of an `Ember.View` into a template passing its\noptions to the `Ember.View`'s `create` method and using the supplied block as\nthe view's own template.\n\nAn empty `<body>` and the following template:\n\n```handlebars\nA span:\n{{#view tagName=\"span\"}}\n  hello.\n{{/view}}\n```\n\nWill result in HTML structure:\n\n```html\n<body>\n  <!-- Note: the handlebars template script\n       also results in a rendered Ember.View\n       which is the outer <div> here -->\n\n  <div class=\"ember-view\">\n    A span:\n    <span id=\"ember1\" class=\"ember-view\">\n      Hello.\n    </span>\n  </div>\n</body>\n```\n\n### `parentView` setting\n\nThe `parentView` property of the new `Ember.View` instance created through\n`{{view}}` will be set to the `Ember.View` instance of the template where\n`{{view}}` was called.\n\n```javascript\naView = Ember.View.create({\n  template: Ember.Handlebars.compile(\"{{#view}} my parent: {{parentView.elementId}} {{/view}}\")\n});\n\naView.appendTo('body');\n```\n\nWill result in HTML structure:\n\n```html\n<div id=\"ember1\" class=\"ember-view\">\n  <div id=\"ember2\" class=\"ember-view\">\n    my parent: ember1\n  </div>\n</div>\n```\n\n### Setting CSS id and class attributes\n\nThe HTML `id` attribute can be set on the `{{view}}`'s resulting element with\nthe `id` option. This option will _not_ be passed to `Ember.View.create`.\n\n```handlebars\n{{#view tagName=\"span\" id=\"a-custom-id\"}}\n  hello.\n{{/view}}\n```\n\nResults in the following HTML structure:\n\n```html\n<div class=\"ember-view\">\n  <span id=\"a-custom-id\" class=\"ember-view\">\n    hello.\n  </span>\n</div>\n```\n\nThe HTML `class` attribute can be set on the `{{view}}`'s resulting element\nwith the `class` or `classNameBindings` options. The `class` option will\ndirectly set the CSS `class` attribute and will not be passed to\n`Ember.View.create`. `classNameBindings` will be passed to `create` and use\n`Ember.View`'s class name binding functionality:\n\n```handlebars\n{{#view tagName=\"span\" class=\"a-custom-class\"}}\n  hello.\n{{/view}}\n```\n\nResults in the following HTML structure:\n\n```html\n<div class=\"ember-view\">\n  <span id=\"ember2\" class=\"ember-view a-custom-class\">\n    hello.\n  </span>\n</div>\n```\n\n### Supplying a different view class\n\n`{{view}}` can take an optional first argument before its supplied options to\nspecify a path to a custom view class.\n\n```handlebars\n{{#view \"custom\"}}{{! will look up App.CustomView }}\n  hello.\n{{/view}}\n```\n\nThe first argument can also be a relative path accessible from the current\ncontext.\n\n```javascript\nMyApp = Ember.Application.create({});\nMyApp.OuterView = Ember.View.extend({\n  innerViewClass: Ember.View.extend({\n    classNames: ['a-custom-view-class-as-property']\n  }),\n  template: Ember.Handlebars.compile('{{#view view.innerViewClass}} hi {{/view}}')\n});\n\nMyApp.OuterView.create().appendTo('body');\n```\n\nWill result in the following HTML:\n\n```html\n<div id=\"ember1\" class=\"ember-view\">\n  <div id=\"ember2\" class=\"ember-view a-custom-view-class-as-property\">\n    hi\n  </div>\n</div>\n```\n\n### Blockless use\n\nIf you supply a custom `Ember.View` subclass that specifies its own template\nor provide a `templateName` option to `{{view}}` it can be used without\nsupplying a block. Attempts to use both a `templateName` option and supply a\nblock will throw an error.\n\n```javascript\nvar App = Ember.Application.create();\nApp.WithTemplateDefinedView = Ember.View.extend({\n  templateName: 'defined-template'\n});\n```\n\n```handlebars\n{{! application.hbs }}\n{{view 'with-template-defined'}}\n```\n\n```handlebars\n{{! defined-template.hbs }}\nSome content for the defined template view.\n```\n\n### `viewName` property\n\nYou can supply a `viewName` option to `{{view}}`. The `Ember.View` instance\nwill be referenced as a property of its parent view by this name.\n\n```javascript\naView = Ember.View.create({\n  template: Ember.Handlebars.compile('{{#view viewName=\"aChildByName\"}} hi {{/view}}')\n});\n\naView.appendTo('body');\naView.get('aChildByName') // the instance of Ember.View created by {{view}} helper\n```",
            "itemtype": "method",
            "name": "view",
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/helpers/with.js",
            "line": 9,
            "description": "Use the `{{with}}` helper when you want to aliases the to a new name. It's helpful\nfor semantic clarity and to retain default scope or to reference from another\n`{{with}}` block.\n\n```handlebars\n// posts might not be\n{{#with user.posts as blogPosts}}\n  <div class=\"notice\">\n    There are {{blogPosts.length}} blog posts written by {{user.name}}.\n  </div>\n\n  {{#each post in blogPosts}}\n    <li>{{post.title}}</li>\n  {{/each}}\n{{/with}}\n```\n\nWithout the `as` operator, it would be impossible to reference `user.name` in the example above.\n\nNOTE: The alias should not reuse a name from the bound property path.\nFor example: `{{#with foo.bar as foo}}` is not supported because it attempts to alias using\nthe first part of the property path, `foo`. Instead, use `{{#with foo.bar as baz}}`.\n\n### `controller` option\n\nAdding `controller='something'` instructs the `{{with}}` helper to create and use an instance of\nthe specified controller wrapping the aliased keyword.\n\nThis is very similar to using an `itemController` option with the `{{each}}` helper.\n\n```handlebars\n{{#with users.posts as posts controller='userBlogPosts'}}\n  {{!- `posts` is wrapped in our controller instance }}\n{{/with}}\n```\n\nIn the above example, the `posts` keyword is now wrapped in the `userBlogPost` controller,\nwhich provides an elegant way to decorate the context with custom\nfunctions/properties.",
            "itemtype": "method",
            "name": "with",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Hash"
                }
            ],
            "return": {
                "description": "HTML string",
                "type": "String"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/helpers/yield.js",
            "line": 10,
            "description": "`{{yield}}` denotes an area of a template that will be rendered inside\nof another template. It has two main uses:\n\n### Use with `layout`\nWhen used in a Handlebars template that is assigned to an `Ember.View`\ninstance's `layout` property Ember will render the layout template first,\ninserting the view's own rendered output at the `{{yield}}` location.\n\nAn empty `<body>` and the following application code:\n\n```javascript\nAView = Ember.View.extend({\n  classNames: ['a-view-with-layout'],\n  layout: Ember.Handlebars.compile('<div class=\"wrapper\">{{yield}}</div>'),\n  template: Ember.Handlebars.compile('<span>I am wrapped</span>')\n});\n\naView = AView.create();\naView.appendTo('body');\n```\n\nWill result in the following HTML output:\n\n```html\n<body>\n  <div class='ember-view a-view-with-layout'>\n    <div class=\"wrapper\">\n      <span>I am wrapped</span>\n    </div>\n  </div>\n</body>\n```\n\nThe `yield` helper cannot be used outside of a template assigned to an\n`Ember.View`'s `layout` property and will throw an error if attempted.\n\n```javascript\nBView = Ember.View.extend({\n  classNames: ['a-view-with-layout'],\n  template: Ember.Handlebars.compile('{{yield}}')\n});\n\nbView = BView.create();\nbView.appendTo('body');\n\n// throws\n// Uncaught Error: assertion failed:\n// You called yield in a template that was not a layout\n```\n\n### Use with Ember.Component\nWhen designing components `{{yield}}` is used to denote where, inside the component's\ntemplate, an optional block passed to the component should render:\n\n```handlebars\n<!-- application.hbs -->\n{{#labeled-textfield value=someProperty}}\n  First name:\n{{/labeled-textfield}}\n```\n\n```handlebars\n<!-- components/labeled-textfield.hbs -->\n<label>\n  {{yield}} {{input value=value}}\n</label>\n```\n\nResult:\n\n```html\n<label>\n  First name: <input type=\"text\" />\n</label>\n```",
            "itemtype": "method",
            "name": "yield",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Hash"
                }
            ],
            "return": {
                "description": "HTML string",
                "type": "String"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/system/bootstrap.js",
            "line": 21,
            "description": "Find templates stored in the head tag as script tags and make them available\nto `Ember.CoreView` in the global `Ember.TEMPLATES` object. This will be run\nas as jQuery DOM-ready callback.\n\nScript tags with `text/x-handlebars` will be compiled\nwith Ember's Handlebars and are suitable for use as a view's template.\nThose with type `text/x-raw-handlebars` will be compiled with regular\nHandlebars and are suitable for use in views' computed properties.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "bootstrap",
            "static": 1,
            "params": [
                {
                    "name": "ctx",
                    "description": ""
                }
            ],
            "class": "Ember.Handlebars",
            "module": "ember",
            "submodule": "ember-handlebars"
        },
        {
            "file": "packages/ember-htmlbars/lib/system/lookup-helper.js",
            "line": 15,
            "description": "Used to lookup/resolve handlebars helpers. The lookup order is:\n\n* Look for a registered helper\n* If a dash exists in the name:\n  * Look for a helper registed in the container\n  * Use Ember.ComponentLookup to find an Ember.Component that resolves\n    to the given name",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "resolveHelper",
            "params": [
                {
                    "name": "container",
                    "description": "",
                    "type": "Container"
                },
                {
                    "name": "name",
                    "description": "the name of the helper to lookup",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Handlebars Helper"
            },
            "class": "Ember.HTMLBars",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/system/make-view-helper.js",
            "line": 9,
            "description": "Returns a helper function that renders the provided ViewClass.\n\nUsed internally by Ember.Handlebars.helper and other methods\ninvolving helper/component registration.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "makeViewHelper",
            "params": [
                {
                    "name": "ViewClass",
                    "description": "view class constructor",
                    "type": "Function"
                }
            ],
            "since": "1.2.0",
            "class": "Ember.HTMLBars",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/system/make_bound_helper.js",
            "line": 18,
            "description": "Create a bound helper. Accepts a function that receives the ordered and hash parameters\nfrom the template. If a bound property was provided in the template it will be resolved to its\nvalue and any changes to the bound property cause the helper function to be re-run with the updated\nvalues.\n\n* `params` - An array of resolved ordered parameters.\n* `hash` - An object containing the hash parameters.\n\nFor example:\n\n* With an unquoted ordered parameter:\n\n  ```javascript\n  {{x-capitalize foo}}\n  ```\n\n  Assuming `foo` was set to `\"bar\"`, the bound helper would receive `[\"bar\"]` as its first argument, and\n  an empty hash as its second.\n\n* With a quoted ordered parameter:\n\n  ```javascript\n  {{x-capitalize \"foo\"}}\n  ```\n\n  The bound helper would receive `[\"foo\"]` as its first argument, and an empty hash as its second.\n\n* With an unquoted hash parameter:\n\n  ```javascript\n  {{x-repeat \"foo\" count=repeatCount}}\n  ```\n\n  Assuming that `repeatCount` resolved to 2, the bound helper would receive `[\"foo\"]` as its first argument,\n  and { count: 2 } as its second.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "makeBoundHelper",
            "params": [
                {
                    "name": "function",
                    "description": "",
                    "type": "Function"
                }
            ],
            "since": "1.10.0",
            "class": "Ember.HTMLBars",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/utils/string.js",
            "line": 13,
            "description": "Mark a string as safe for unescaped output with Handlebars. If you\nreturn HTML from a Handlebars helper, use this function to\nensure Handlebars does not escape the HTML.\n\n```javascript\nEmber.String.htmlSafe('<div>someString</div>')\n```",
            "itemtype": "method",
            "name": "htmlSafe",
            "static": 1,
            "return": {
                "description": "a string that will not be html escaped by Handlebars",
                "type": "Handlebars.SafeString"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/utils/string.js",
            "line": 41,
            "description": "Mark a string as being safe for unescaped output with Handlebars.\n\n```javascript\n'<div>someString</div>'.htmlSafe()\n```\n\nSee [Ember.String.htmlSafe](/api/classes/Ember.String.html#method_htmlSafe).",
            "itemtype": "method",
            "name": "htmlSafe",
            "return": {
                "description": "a string that will not be html escaped by Handlebars",
                "type": "Handlebars.SafeString"
            },
            "class": "String",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/helpers.js",
            "line": 8,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "helpers",
            "class": "Ember.HTMLBars",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-htmlbars/lib/helpers.js",
            "line": 21,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_registerHelper",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "helperFunc",
                    "description": "the helper function to add",
                    "type": "Object|Function"
                }
            ],
            "class": "Ember.HTMLBars",
            "module": "ember",
            "submodule": "ember-htmlbars"
        },
        {
            "file": "packages/ember-metal/lib/platform/create.js",
            "line": 14,
            "description": "Identical to `Object.create()`. Implements if not available natively.",
            "since": "1.8.0",
            "itemtype": "method",
            "name": "create",
            "class": "Ember",
            "module": "ember"
        },
        {
            "file": "packages/ember-metal/lib/platform/define_property.js",
            "line": 9,
            "description": "Set to true if the platform supports native getters and setters.",
            "itemtype": "property",
            "name": "hasPropertyAccessors",
            "final": 1,
            "class": "Ember.platform",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/platform/define_property.js",
            "line": 16,
            "description": "Identical to `Object.defineProperty()`. Implements as much functionality\nas possible if not available natively.",
            "itemtype": "method",
            "name": "defineProperty",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to modify",
                    "type": "Object"
                },
                {
                    "name": "keyName",
                    "description": "property name to modify",
                    "type": "String"
                },
                {
                    "name": "desc",
                    "description": "descriptor hash",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Ember.platform",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/array.js",
            "line": 123,
            "description": "Array polyfills to support ES5 features in older browsers.",
            "itemtype": "property",
            "name": "ArrayPolyfills",
            "class": "Ember",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/binding.js",
            "line": 25,
            "description": "Debug parameter you can turn on. This will log all bindings that fire to\nthe console. This should be disabled in production code. Note that you\ncan also enable this from the console or temporarily.",
            "itemtype": "property",
            "name": "LOG_BINDINGS",
            "type": "Boolean",
            "default": "false",
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/binding.js",
            "line": 37,
            "description": "Returns true if the provided path is global (e.g., `MyApp.fooController.bar`)\ninstead of local (`foo.bar.baz`).",
            "itemtype": "method",
            "name": "isGlobalPath",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Boolean"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/binding.js",
            "line": 70,
            "description": "This copies the Binding so it can be connected to another object.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "`this`",
                "type": "Ember.Binding"
            },
            "class": "Ember.Binding",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/binding.js",
            "line": 86,
            "description": "This will set `from` property path to the specified value. It will not\nattempt to resolve this property path to an actual object until you\nconnect the binding.\n\nThe binding will search for the property path starting at the root object\nyou pass when you `connect()` the binding. It follows the same rules as\n`get()` - see that method for more information.",
            "itemtype": "method",
            "name": "from",
            "params": [
                {
                    "name": "path",
                    "description": "the property path to connect to",
                    "type": "String"
                }
            ],
            "return": {
                "description": "`this`",
                "type": "Ember.Binding"
            },
            "class": "Ember.Binding",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/binding.js",
            "line": 104,
            "description": "This will set the `to` property path to the specified value. It will not\nattempt to resolve this property path to an actual object until you\nconnect the binding.\n\nThe binding will search for the property path starting at the root object\nyou pass when you `connect()` the binding. It follows the same rules as\n`get()` - see that method for more information.",
            "itemtype": "method",
            "name": "to",
            "params": [
                {
                    "name": "path",
                    "description": "A property path or tuple",
                    "type": "String|Tuple"
                }
            ],
            "return": {
                "description": "`this`",
                "type": "Ember.Binding"
            },
            "class": "Ember.Binding",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/binding.js",
            "line": 122,
            "description": "Configures the binding as one way. A one-way binding will relay changes\non the `from` side to the `to` side, but not the other way around. This\nmeans that if you change the `to` side directly, the `from` side may have\na different value.",
            "itemtype": "method",
            "name": "oneWay",
            "return": {
                "description": "`this`",
                "type": "Ember.Binding"
            },
            "class": "Ember.Binding",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/binding.js",
            "line": 136,
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "string representation of binding",
                "type": "String"
            },
            "class": "Ember.Binding",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/binding.js",
            "line": 149,
            "description": "Attempts to connect this binding instance so that it can receive and relay\nchanges. This method will raise an exception if you have not set the\nfrom/to properties yet.",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "obj",
                    "description": "The root object for this binding.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "`this`",
                "type": "Ember.Binding"
            },
            "class": "Ember.Binding",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/binding.js",
            "line": 178,
            "description": "Disconnects the binding instance. Changes will no longer be relayed. You\nwill not usually need to call this method.",
            "itemtype": "method",
            "name": "disconnect",
            "params": [
                {
                    "name": "obj",
                    "description": "The root object you passed when connecting the binding.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "`this`",
                "type": "Ember.Binding"
            },
            "class": "Ember.Binding",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/binding.js",
            "line": 308,
            "description": "Creates a new Binding instance and makes it apply in a single direction.\nA one-way binding will relay changes on the `from` side object (supplied\nas the `from` argument) the `to` side, but not the other way around.\nThis means that if you change the \"to\" side directly, the \"from\" side may have\na different value.\n\nSee `Binding.oneWay`.",
            "itemtype": "method",
            "name": "oneWay",
            "params": [
                {
                    "name": "from",
                    "description": "from path.",
                    "type": "String"
                },
                {
                    "name": "flag",
                    "description": "(Optional) passing nothing here will make the\n  binding `oneWay`. You can instead pass `false` to disable `oneWay`, making the\n  binding two way again.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "`this`",
                "type": "Ember.Binding"
            },
            "class": "Ember.Binding",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/binding.js",
            "line": 462,
            "description": "Global helper method to create a new binding. Just pass the root object\nalong with a `to` and `from` path to create and connect the binding.",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "obj",
                    "description": "The root object of the transform.",
                    "type": "Object"
                },
                {
                    "name": "to",
                    "description": "The path to the 'to' side of the binding.\n  Must be relative to obj.",
                    "type": "String"
                },
                {
                    "name": "from",
                    "description": "The path to the 'from' side of the binding.\n  Must be relative to obj or a global path.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "binding instance",
                "type": "Ember.Binding"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/binding.js",
            "line": 479,
            "itemtype": "method",
            "name": "oneWay",
            "params": [
                {
                    "name": "obj",
                    "description": "The root object of the transform.",
                    "type": "Object"
                },
                {
                    "name": "to",
                    "description": "The path to the 'to' side of the binding.\n  Must be relative to obj.",
                    "type": "String"
                },
                {
                    "name": "from",
                    "description": "The path to the 'from' side of the binding.\n  Must be relative to obj or a global path.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "binding instance",
                "type": "Ember.Binding"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/computed.js",
            "line": 154,
            "description": "Properties are cacheable by default. Computed property will automatically\ncache the return value of your function until one of the dependent keys changes.\n\nCall `volatile()` to set it into non-cached mode. When in this mode\nthe computed property will not automatically cache the return value.\n\nHowever, if a property is properly observable, there is no reason to disable\ncaching.",
            "itemtype": "method",
            "name": "cacheable",
            "params": [
                {
                    "name": "aFlag",
                    "description": "optional set to `false` to disable caching",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "this",
                "type": "Ember.ComputedProperty"
            },
            "chainable": 1,
            "deprecated": true,
            "deprecationMessage": "All computed properties are cacheble by default. Use `volatile()` instead to opt-out to caching.",
            "class": "Ember.ComputedProperty",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed.js",
            "line": 176,
            "description": "Call on a computed property to set it into non-cached mode. When in this\nmode the computed property will not automatically cache the return value.\n\n```javascript\nvar outsideService = Ember.Object.extend({\n  value: function() {\n    return OutsideService.getValue();\n  }.property().volatile()\n}).create();\n```",
            "itemtype": "method",
            "name": "volatile",
            "return": {
                "description": "this",
                "type": "Ember.ComputedProperty"
            },
            "chainable": 1,
            "class": "Ember.ComputedProperty",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed.js",
            "line": 197,
            "description": "Call on a computed property to set it into read-only mode. When in this\nmode the computed property will throw an error when set.\n\n```javascript\nvar Person = Ember.Object.extend({\n  guid: function() {\n    return 'guid-guid-guid';\n  }.property().readOnly()\n});\n\nvar person = Person.create();\n\nperson.set('guid', 'new-guid'); // will throw an exception\n```",
            "itemtype": "method",
            "name": "readOnly",
            "return": {
                "description": "this",
                "type": "Ember.ComputedProperty"
            },
            "chainable": 1,
            "class": "Ember.ComputedProperty",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed.js",
            "line": 223,
            "description": "Sets the dependent keys on this computed property. Pass any number of\narguments containing key paths that this computed property depends on.\n\n```javascript\nvar President = Ember.Object.extend({\n  fullName: computed(function() {\n    return this.get('firstName') + ' ' + this.get('lastName');\n\n    // Tell Ember that this computed property depends on firstName\n    // and lastName\n  }).property('firstName', 'lastName')\n});\n\nvar president = President.create({\n  firstName: 'Barack',\n  lastName: 'Obama'\n});\n\npresident.get('fullName'); // 'Barack Obama'\n```",
            "itemtype": "method",
            "name": "property",
            "params": [
                {
                    "name": "path",
                    "description": "zero or more property paths",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "this",
                "type": "Ember.ComputedProperty"
            },
            "chainable": 1,
            "class": "Ember.ComputedProperty",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed.js",
            "line": 266,
            "description": "In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For example,\ncomputed property functions may close over variables that are then no longer\navailable for introspection.\n\nYou can pass a hash of these values to a computed property like this:\n\n```\nperson: function() {\n  var personId = this.get('personId');\n  return App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })\n```\n\nThe hash that you pass to the `meta()` function will be saved on the\ncomputed property descriptor under the `_meta` key. Ember runtime\nexposes a public API for retrieving these values from classes,\nvia the `metaForProperty()` function.",
            "itemtype": "method",
            "name": "meta",
            "params": [
                {
                    "name": "meta",
                    "description": "",
                    "type": "Hash"
                }
            ],
            "chainable": 1,
            "class": "Ember.ComputedProperty",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed.js",
            "line": 319,
            "description": "Access the value of the function backing the computed property.\nIf this property has already been cached, return the cached result.\nOtherwise, call the function passing the property name as an argument.\n\n```javascript\nvar Person = Ember.Object.extend({\n  fullName: function(keyName) {\n    // the keyName parameter is 'fullName' in this case.\n    return this.get('firstName') + ' ' + this.get('lastName');\n  }.property('firstName', 'lastName')\n});\n\n\nvar tom = Person.create({\n  firstName: 'Tom',\n  lastName: 'Dale'\n});\n\ntom.get('fullName') // 'Tom Dale'\n```",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "keyName",
                    "description": "The key being accessed.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The return value of the function backing the CP.",
                "type": "Object"
            },
            "class": "Ember.ComputedProperty",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed.js",
            "line": 381,
            "description": "Set the value of a computed property. If the function that backs your\ncomputed property does not accept arguments then the default action for\nsetting would be to define the property on the current object, and set\nthe value of the property to the value being set.\n\nGenerally speaking if you intend for your computed property to be set\nyour backing function should accept either two or three arguments.\n\n```javascript\nvar Person = Ember.Object.extend({\n  // these will be supplied by `create`\n  firstName: null,\n  lastName: null,\n\n  fullName: function(key, value, oldValue) {\n    // getter\n    if (arguments.length === 1) {\n      var firstName = this.get('firstName');\n      var lastName = this.get('lastName');\n\n      return firstName + ' ' + lastName;\n\n    // setter\n    } else {\n      var name = value.split(' ');\n\n      this.set('firstName', name[0]);\n      this.set('lastName', name[1]);\n\n      return value;\n    }\n  }.property('firstName', 'lastName')\n});\n\nvar person = Person.create();\n\nperson.set('fullName', 'Peter Wagenet');\nperson.get('firstName'); // 'Peter'\nperson.get('lastName');  // 'Wagenet'\n```",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "keyName",
                    "description": "The key being accessed.",
                    "type": "String"
                },
                {
                    "name": "newValue",
                    "description": "The new value being assigned.",
                    "type": "Object"
                },
                {
                    "name": "oldValue",
                    "description": "The old value being replaced.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The return value of the function backing the CP.",
                "type": "Object"
            },
            "class": "Ember.ComputedProperty",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed.js",
            "line": 601,
            "description": "Returns the cached value for a property, if one exists.\nThis can be useful for peeking at the value of a computed\nproperty that is generated lazily, without accidentally causing\nit to be created.",
            "itemtype": "method",
            "name": "cacheFor",
            "params": [
                {
                    "name": "obj",
                    "description": "the object whose property you want to check",
                    "type": "Object"
                },
                {
                    "name": "key",
                    "description": "the name of the property whose cached value you want\n  to return",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the cached value",
                "type": "Object"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/computed_macros.js",
            "line": 35,
            "description": "A computed property that returns true if the value of the dependent\nproperty is null, an empty string, empty array, or empty function.\n\nExample\n\n```javascript\nvar ToDoList = Ember.Object.extend({\n  isDone: Ember.computed.empty('todos')\n});\n\nvar todoList = ToDoList.create({\n  todos: ['Unit Test', 'Documentation', 'Release']\n});\n\ntodoList.get('isDone'); // false\ntodoList.get('todos').clear();\ntodoList.get('isDone'); // true\n```",
            "since": "1.6.0",
            "itemtype": "method",
            "name": "empty",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "computed property which negate\nthe original value for property",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed_macros.js",
            "line": 68,
            "description": "A computed property that returns true if the value of the dependent\nproperty is NOT null, an empty string, empty array, or empty function.\n\nExample\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  hasStuff: Ember.computed.notEmpty('backpack')\n});\n\nvar hamster = Hamster.create({ backpack: ['Food', 'Sleeping Bag', 'Tent'] });\n\nhamster.get('hasStuff');         // true\nhamster.get('backpack').clear(); // []\nhamster.get('hasStuff');         // false\n```",
            "itemtype": "method",
            "name": "notEmpty",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "computed property which returns true if\noriginal value for property is not empty.",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed_macros.js",
            "line": 98,
            "description": "A computed property that returns true if the value of the dependent\nproperty is null or undefined. This avoids errors from JSLint complaining\nabout use of ==, which can be technically confusing.\n\nExample\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  isHungry: Ember.computed.none('food')\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('isHungry'); // true\nhamster.set('food', 'Banana');\nhamster.get('isHungry'); // false\nhamster.set('food', null);\nhamster.get('isHungry'); // true\n```",
            "itemtype": "method",
            "name": "none",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "computed property which\nreturns true if original value for property is null or undefined.",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed_macros.js",
            "line": 131,
            "description": "A computed property that returns the inverse boolean value\nof the original value for the dependent property.\n\nExample\n\n```javascript\nvar User = Ember.Object.extend({\n  isAnonymous: Ember.computed.not('loggedIn')\n});\n\nvar user = User.create({loggedIn: false});\n\nuser.get('isAnonymous'); // true\nuser.set('loggedIn', true);\nuser.get('isAnonymous'); // false\n```",
            "itemtype": "method",
            "name": "not",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "computed property which returns\ninverse of the original value for property",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed_macros.js",
            "line": 161,
            "description": "A computed property that converts the provided dependent property\ninto a boolean value.\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  hasBananas: Ember.computed.bool('numBananas')\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('hasBananas'); // false\nhamster.set('numBananas', 0);\nhamster.get('hasBananas'); // false\nhamster.set('numBananas', 1);\nhamster.get('hasBananas'); // true\nhamster.set('numBananas', null);\nhamster.get('hasBananas'); // false\n```",
            "itemtype": "method",
            "name": "bool",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "computed property which converts\nto boolean the original value for property",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed_macros.js",
            "line": 193,
            "description": "A computed property which matches the original value for the\ndependent property against a given RegExp, returning `true`\nif they values matches the RegExp and `false` if it does not.\n\nExample\n\n```javascript\nvar User = Ember.Object.extend({\n  hasValidEmail: Ember.computed.match('email', /^.+@.+\\..+$/)\n});\n\nvar user = User.create({loggedIn: false});\n\nuser.get('hasValidEmail'); // false\nuser.set('email', '');\nuser.get('hasValidEmail'); // false\nuser.set('email', 'ember_hamster@example.com');\nuser.get('hasValidEmail'); // true\n```",
            "itemtype": "method",
            "name": "match",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "regexp",
                    "description": "",
                    "type": "RegExp"
                }
            ],
            "return": {
                "description": "computed property which match\nthe original value for property against a given RegExp",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed_macros.js",
            "line": 229,
            "description": "A computed property that returns true if the provided dependent property\nis equal to the given value.\n\nExample\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  napTime: Ember.computed.equal('state', 'sleepy')\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('napTime'); // false\nhamster.set('state', 'sleepy');\nhamster.get('napTime'); // true\nhamster.set('state', 'hungry');\nhamster.get('napTime'); // false\n```",
            "itemtype": "method",
            "name": "equal",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String|Number|Object"
                }
            ],
            "return": {
                "description": "computed property which returns true if\nthe original value for property is equal to the given value.",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed_macros.js",
            "line": 262,
            "description": "A computed property that returns true if the provided dependent property\nis greater than the provided value.\n\nExample\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  hasTooManyBananas: Ember.computed.gt('numBananas', 10)\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('hasTooManyBananas'); // false\nhamster.set('numBananas', 3);\nhamster.get('hasTooManyBananas'); // false\nhamster.set('numBananas', 11);\nhamster.get('hasTooManyBananas'); // true\n```",
            "itemtype": "method",
            "name": "gt",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "computed property which returns true if\nthe original value for property is greater than given value.",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed_macros.js",
            "line": 295,
            "description": "A computed property that returns true if the provided dependent property\nis greater than or equal to the provided value.\n\nExample\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  hasTooManyBananas: Ember.computed.gte('numBananas', 10)\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('hasTooManyBananas'); // false\nhamster.set('numBananas', 3);\nhamster.get('hasTooManyBananas'); // false\nhamster.set('numBananas', 10);\nhamster.get('hasTooManyBananas'); // true\n```",
            "itemtype": "method",
            "name": "gte",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "computed property which returns true if\nthe original value for property is greater or equal then given value.",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed_macros.js",
            "line": 328,
            "description": "A computed property that returns true if the provided dependent property\nis less than the provided value.\n\nExample\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  needsMoreBananas: Ember.computed.lt('numBananas', 3)\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('needsMoreBananas'); // true\nhamster.set('numBananas', 3);\nhamster.get('needsMoreBananas'); // false\nhamster.set('numBananas', 2);\nhamster.get('needsMoreBananas'); // true\n```",
            "itemtype": "method",
            "name": "lt",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "computed property which returns true if\nthe original value for property is less then given value.",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed_macros.js",
            "line": 361,
            "description": "A computed property that returns true if the provided dependent property\nis less than or equal to the provided value.\n\nExample\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  needsMoreBananas: Ember.computed.lte('numBananas', 3)\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('needsMoreBananas'); // true\nhamster.set('numBananas', 5);\nhamster.get('needsMoreBananas'); // false\nhamster.set('numBananas', 3);\nhamster.get('needsMoreBananas'); // true\n```",
            "itemtype": "method",
            "name": "lte",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "computed property which returns true if\nthe original value for property is less or equal than given value.",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed_macros.js",
            "line": 394,
            "description": "A computed property that performs a logical `and` on the\noriginal values for the provided dependent properties.\n\nExample\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  readyForCamp: Ember.computed.and('hasTent', 'hasBackpack')\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('readyForCamp'); // false\nhamster.set('hasTent', true);\nhamster.get('readyForCamp'); // false\nhamster.set('hasBackpack', true);\nhamster.get('readyForCamp'); // true\nhamster.set('hasBackpack', 'Yes');\nhamster.get('readyForCamp'); // 'Yes'\n```",
            "itemtype": "method",
            "name": "and",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "computed property which performs\na logical `and` on the values of all the original values for properties.",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed_macros.js",
            "line": 433,
            "description": "A computed property which performs a logical `or` on the\noriginal values for the provided dependent properties.\n\nExample\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  readyForRain: Ember.computed.or('hasJacket', 'hasUmbrella')\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('readyForRain'); // false\nhamster.set('hasUmbrella', true);\nhamster.get('readyForRain'); // true\nhamster.set('hasJacket', 'Yes');\nhamster.get('readyForRain'); // 'Yes'\n```",
            "itemtype": "method",
            "name": "or",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "computed property which performs\na logical `or` on the values of all the original values for properties.",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed_macros.js",
            "line": 468,
            "description": "A computed property that returns the first truthy value\nfrom a list of dependent properties.\n\nExample\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  hasClothes: Ember.computed.any('hat', 'shirt')\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('hasClothes'); // null\nhamster.set('shirt', 'Hawaiian Shirt');\nhamster.get('hasClothes'); // 'Hawaiian Shirt'\n```",
            "itemtype": "method",
            "name": "any",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "computed property which returns\nthe first truthy value of given list of properties.",
                "type": "Ember.ComputedProperty"
            },
            "deprecated": true,
            "deprecationMessage": "Use `Ember.computed.or` instead.",
            "class": "Ember.computed",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed_macros.js",
            "line": 502,
            "description": "A computed property that returns the array of values\nfor the provided dependent properties.\n\nExample\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  clothes: Ember.computed.collect('hat', 'shirt')\n});\n\nvar hamster = Hamster.create();\n\nhamster.get('clothes'); // [null, null]\nhamster.set('hat', 'Camp Hat');\nhamster.set('shirt', 'Camp Shirt');\nhamster.get('clothes'); // ['Camp Hat', 'Camp Shirt']\n```",
            "itemtype": "method",
            "name": "collect",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "computed property which maps\nvalues of all passed in properties to an array.",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed_macros.js",
            "line": 541,
            "description": "Creates a new property that is an alias for another property\non an object. Calls to `get` or `set` this property behave as\nthough they were called on the original property.\n\n```javascript\nvar Person = Ember.Object.extend({\n  name: 'Alex Matchneer',\n  nomen: Ember.computed.alias('name')\n});\n\nvar alex = Person.create();\n\nalex.get('nomen'); // 'Alex Matchneer'\nalex.get('name');  // 'Alex Matchneer'\n\nalex.set('nomen', '@machty');\nalex.get('name');  // '@machty'\n```",
            "itemtype": "method",
            "name": "alias",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "computed property which creates an\nalias to the original value for property.",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed_macros.js",
            "line": 568,
            "description": "Where `computed.alias` aliases `get` and `set`, and allows for bidirectional\ndata flow, `computed.oneWay` only provides an aliased `get`. The `set` will\nnot mutate the upstream property, rather causes the current property to\nbecome the value set. This causes the downstream property to permanently\ndiverge from the upstream property.\n\nExample\n\n```javascript\nvar User = Ember.Object.extend({\n  firstName: null,\n  lastName: null,\n  nickName: Ember.computed.oneWay('firstName')\n});\n\nvar teddy = User.create({\n  firstName: 'Teddy',\n  lastName:  'Zeenny'\n});\n\nteddy.get('nickName');              // 'Teddy'\nteddy.set('nickName', 'TeddyBear'); // 'TeddyBear'\nteddy.get('firstName');             // 'Teddy'\n```",
            "itemtype": "method",
            "name": "oneWay",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "computed property which creates a\none way computed property to the original value for property.",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed_macros.js",
            "line": 604,
            "description": "This is a more semantically meaningful alias of `computed.oneWay`,\nwhose name is somewhat ambiguous as to which direction the data flows.",
            "itemtype": "method",
            "name": "reads",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "computed property which creates a\n  one way computed property to the original value for property.",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed_macros.js",
            "line": 615,
            "description": "Where `computed.oneWay` provides oneWay bindings, `computed.readOnly` provides\na readOnly one way binding. Very often when using `computed.oneWay` one does\nnot also want changes to propagate back up, as they will replace the value.\n\nThis prevents the reverse flow, and also throws an exception when it occurs.\n\nExample\n\n```javascript\nvar User = Ember.Object.extend({\n  firstName: null,\n  lastName: null,\n  nickName: Ember.computed.readOnly('firstName')\n});\n\nvar teddy = User.create({\n  firstName: 'Teddy',\n  lastName:  'Zeenny'\n});\n\nteddy.get('nickName');              // 'Teddy'\nteddy.set('nickName', 'TeddyBear'); // throws Exception\n// throw new Ember.Error('Cannot Set: nickName on: <User:ember27288>' );`\nteddy.get('firstName');             // 'Teddy'\n```",
            "itemtype": "method",
            "name": "readOnly",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "computed property which creates a\none way computed property to the original value for property.",
                "type": "Ember.ComputedProperty"
            },
            "since": "1.5.0",
            "class": "Ember.computed",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed_macros.js",
            "line": 653,
            "description": "A computed property that acts like a standard getter and setter,\nbut returns the value at the provided `defaultPath` if the\nproperty itself has not been set to a value\n\nExample\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  wishList: Ember.computed.defaultTo('favoriteFood')\n});\n\nvar hamster = Hamster.create({ favoriteFood: 'Banana' });\n\nhamster.get('wishList');                     // 'Banana'\nhamster.set('wishList', 'More Unit Tests');\nhamster.get('wishList');                     // 'More Unit Tests'\nhamster.get('favoriteFood');                 // 'Banana'\n```",
            "itemtype": "method",
            "name": "defaultTo",
            "params": [
                {
                    "name": "defaultPath",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "computed property which acts like\na standard getter and setter, but defaults to the value from `defaultPath`.",
                "type": "Ember.ComputedProperty"
            },
            "deprecated": true,
            "deprecationMessage": "Use `Ember.computed.oneWay` or custom CP with default instead.",
            "class": "Ember.computed",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/computed_macros.js",
            "line": 691,
            "description": "Creates a new property that is an alias for another property\non an object. Calls to `get` or `set` this property behave as\nthough they were called on the original property, but also\nprint a deprecation warning.",
            "itemtype": "method",
            "name": "deprecatingAlias",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "computed property which creates an\nalias with a deprecation to the original value for property.",
                "type": "Ember.ComputedProperty"
            },
            "since": "1.7.0",
            "class": "Ember.computed",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/core.js",
            "line": 50,
            "itemtype": "property",
            "name": "VERSION",
            "type": "String",
            "default": "'VERSION_STRING_PLACEHOLDER'",
            "static": 1,
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/core.js",
            "line": 58,
            "description": "Standard environmental variables. You can define these in a global `EmberENV`\nvariable before loading Ember to control various configuration settings.\n\nFor backwards compatibility with earlier versions of Ember the global `ENV`\nvariable will be used if `EmberENV` is not defined.",
            "itemtype": "property",
            "name": "ENV",
            "type": "Hash",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/core.js",
            "line": 104,
            "description": "Test that a feature is enabled. Parsed by Ember's build tools to leave\nexperimental features out of beta/stable builds.\n\nYou can define the following configuration options:\n\n* `EmberENV.ENABLE_ALL_FEATURES` - force all features to be enabled.\n* `EmberENV.ENABLE_OPTIONAL_FEATURES` - enable any features that have not been explicitly\n  enabled/disabled.",
            "itemtype": "method",
            "name": "isEnabled",
            "params": [
                {
                    "name": "feature",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "since": "1.1.0",
            "class": "Ember.FEATURES",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/core.js",
            "line": 139,
            "description": "Determines whether Ember should enhance some built-in object prototypes to\nprovide a more friendly API. If enabled, a few methods will be added to\n`Function`, `String`, and `Array`. `Object.prototype` will not be enhanced,\nwhich is the one that causes most trouble for people.\n\nIn general we recommend leaving this option set to true since it rarely\nconflicts with other code. If you need to turn it off however, you can\ndefine an `EmberENV.EXTEND_PROTOTYPES` config to disable it.",
            "itemtype": "property",
            "name": "EXTEND_PROTOTYPES",
            "type": "Boolean",
            "default": "true",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/core.js",
            "line": 160,
            "description": "Determines whether Ember logs a full stack trace during deprecation warnings",
            "itemtype": "property",
            "name": "LOG_STACKTRACE_ON_DEPRECATION",
            "type": "Boolean",
            "default": "true",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/core.js",
            "line": 169,
            "description": "Determines whether Ember should add ECMAScript 5 Array shims to older browsers.",
            "itemtype": "property",
            "name": "SHIM_ES5",
            "type": "Boolean",
            "default": "Ember.EXTEND_PROTOTYPES",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/core.js",
            "line": 178,
            "description": "Determines whether Ember logs info about version of used libraries",
            "itemtype": "property",
            "name": "LOG_VERSION",
            "type": "Boolean",
            "default": "true",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/core.js",
            "line": 187,
            "description": "Empty function. Useful for some operations. Always returns `this`.",
            "itemtype": "method",
            "name": "K",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/deprecate_property.js",
            "line": 12,
            "description": "Used internally to allow changing properties in a backwards compatible way, and print a helpful\ndeprecation warning.",
            "itemtype": "method",
            "name": "deprecateProperty",
            "params": [
                {
                    "name": "object",
                    "description": "The object to add the deprecated property to.",
                    "type": "Object"
                },
                {
                    "name": "deprecatedKey",
                    "description": "The property to add (and print deprecation warnings upon accessing).",
                    "type": "String"
                },
                {
                    "name": "newKey",
                    "description": "The property that will be aliased.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "1.7.0",
            "class": "Ember.EnumerableUtils",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/enumerable_utils.js",
            "line": 19,
            "description": "Calls the map function on the passed object with a specified callback. This\nuses `Ember.ArrayPolyfill`'s-map method when necessary.",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "obj",
                    "description": "The object that should be mapped",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "thisArg",
                    "description": "Value to use as this when executing *callback*",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An array of mapped values.",
                "type": "Array"
            },
            "class": "Ember.EnumerableUtils",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/enumerable_utils.js",
            "line": 34,
            "description": "Calls the forEach function on the passed object with a specified callback. This\nuses `Ember.ArrayPolyfill`'s-forEach method when necessary.",
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to call forEach on",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "thisArg",
                    "description": "Value to use as this when executing *callback*",
                    "type": "Object"
                }
            ],
            "class": "Ember.EnumerableUtils",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/enumerable_utils.js",
            "line": 48,
            "description": "Calls the filter function on the passed object with a specified callback. This\nuses `Ember.ArrayPolyfill`'s-filter method when necessary.",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to call filter on",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "thisArg",
                    "description": "Value to use as this when executing *callback*",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An array containing the filtered values",
                "type": "Array"
            },
            "since": "1.4.0",
            "class": "Ember.EnumerableUtils",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/enumerable_utils.js",
            "line": 64,
            "description": "Calls the indexOf function on the passed object with a specified callback. This\nuses `Ember.ArrayPolyfill`'s-indexOf method when necessary.",
            "itemtype": "method",
            "name": "indexOf",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to call indexOn on",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "index",
                    "description": "The index to start searching from",
                    "type": "Object"
                }
            ],
            "class": "Ember.EnumerableUtils",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/enumerable_utils.js",
            "line": 78,
            "description": "Returns an array of indexes of the first occurrences of the passed elements\non the passed object.\n\n```javascript\n var array = [1, 2, 3, 4, 5];\n Ember.EnumerableUtils.indexesOf(array, [2, 5]); // [1, 4]\n\n var fubar = \"Fubarr\";\n Ember.EnumerableUtils.indexesOf(fubar, ['b', 'r']); // [2, 4]\n```",
            "itemtype": "method",
            "name": "indexesOf",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to check for element indexes",
                    "type": "Object"
                },
                {
                    "name": "elements",
                    "description": "The elements to search for on *obj*",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array of indexes.",
                "type": "Array"
            },
            "class": "Ember.EnumerableUtils",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/enumerable_utils.js",
            "line": 103,
            "description": "Adds an object to an array. If the array already includes the object this\nmethod has no effect.",
            "itemtype": "method",
            "name": "addObject",
            "params": [
                {
                    "name": "array",
                    "description": "The array the passed item should be added to",
                    "type": "Array"
                },
                {
                    "name": "item",
                    "description": "The item to add to the passed array",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "'undefined'"
            },
            "class": "Ember.EnumerableUtils",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/enumerable_utils.js",
            "line": 118,
            "description": "Removes an object from an array. If the array does not contain the passed\nobject this method has no effect.",
            "itemtype": "method",
            "name": "removeObject",
            "params": [
                {
                    "name": "array",
                    "description": "The array to remove the item from.",
                    "type": "Array"
                },
                {
                    "name": "item",
                    "description": "The item to remove from the passed array.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "'undefined'"
            },
            "class": "Ember.EnumerableUtils",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/enumerable_utils.js",
            "line": 157,
            "description": "Replaces objects in an array with the passed objects.\n\n```javascript\n  var array = [1,2,3];\n  Ember.EnumerableUtils.replace(array, 1, 2, [4, 5]); // [1, 4, 5]\n\n  var array = [1,2,3];\n  Ember.EnumerableUtils.replace(array, 1, 1, [4, 5]); // [1, 4, 5, 3]\n\n  var array = [1,2,3];\n  Ember.EnumerableUtils.replace(array, 10, 1, [4, 5]); // [1, 2, 3, 4, 5]\n```",
            "itemtype": "method",
            "name": "replace",
            "params": [
                {
                    "name": "array",
                    "description": "The array the objects should be inserted into.",
                    "type": "Array"
                },
                {
                    "name": "idx",
                    "description": "Starting index in the array to replace. If *idx* >=\nlength, then append to the end of the array.",
                    "type": "Number"
                },
                {
                    "name": "amt",
                    "description": "Number of elements that should be removed from the array,\nstarting at *idx*",
                    "type": "Number"
                },
                {
                    "name": "objects",
                    "description": "An array of zero or more objects that should be\ninserted into the array at *idx*",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The modified array.",
                "type": "Array"
            },
            "class": "Ember.EnumerableUtils",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/enumerable_utils.js",
            "line": 190,
            "description": "Calculates the intersection of two arrays. This method returns a new array\nfilled with the records that the two passed arrays share with each other.\nIf there is no intersection, an empty array will be returned.\n\n```javascript\nvar array1 = [1, 2, 3, 4, 5];\nvar array2 = [1, 3, 5, 6, 7];\n\nEmber.EnumerableUtils.intersection(array1, array2); // [1, 3, 5]\n\nvar array1 = [1, 2, 3];\nvar array2 = [4, 5, 6];\n\nEmber.EnumerableUtils.intersection(array1, array2); // []\n```",
            "itemtype": "method",
            "name": "intersection",
            "params": [
                {
                    "name": "array1",
                    "description": "The first array",
                    "type": "Array"
                },
                {
                    "name": "array2",
                    "description": "The second array",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The intersection of the two passed arrays.",
                "type": "Array"
            },
            "class": "Ember.EnumerableUtils",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/events.js",
            "line": 108,
            "description": "Add an event listener",
            "itemtype": "method",
            "name": "addListener",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "A target object or a function",
                    "type": "Object|Function"
                },
                {
                    "name": "method",
                    "description": "A function or the name of a function to be called on `target`",
                    "type": "Function|String"
                },
                {
                    "name": "once",
                    "description": "A flag whether a function should only be called once",
                    "type": "Boolean"
                }
            ],
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/events.js",
            "line": 146,
            "description": "Remove an event listener\n\nArguments should match those passed to `Ember.addListener`.",
            "itemtype": "method",
            "name": "removeListener",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "A target object or a function",
                    "type": "Object|Function"
                },
                {
                    "name": "method",
                    "description": "A function or the name of a function to be called on `target`",
                    "type": "Function|String"
                }
            ],
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/events.js",
            "line": 193,
            "description": "Suspend listener during callback.\n\nThis should only be used by the target of the event listener\nwhen it is taking an action that would cause the event, e.g.\nan object might suspend its property change listener while it is\nsetting that property.",
            "itemtype": "method",
            "name": "suspendListener",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "A target object or a function",
                    "type": "Object|Function"
                },
                {
                    "name": "method",
                    "description": "A function or the name of a function to be called on `target`",
                    "type": "Function|String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/events.js",
            "line": 230,
            "description": "Suspends multiple listeners during a callback.",
            "itemtype": "method",
            "name": "suspendListeners",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "eventNames",
                    "description": "Array of event names",
                    "type": "Array"
                },
                {
                    "name": "target",
                    "description": "A target object or a function",
                    "type": "Object|Function"
                },
                {
                    "name": "method",
                    "description": "A function or the name of a function to be called on `target`",
                    "type": "Function|String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/events.js",
            "line": 277,
            "description": "Return a list of currently watched events",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "watchedEvents",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/events.js",
            "line": 300,
            "description": "Send an event. The execution of suspended listeners\nis skipped, and once listeners are removed. A listener without\na target is executed on the passed object. If an array of actions\nis not passed, the actions stored on the passed object are invoked.",
            "itemtype": "method",
            "name": "sendEvent",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Optional parameters for each listener.",
                    "type": "Array"
                },
                {
                    "name": "actions",
                    "description": "Optional array of actions (listeners).",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "true"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/events.js",
            "line": 353,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "hasListeners",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/events.js",
            "line": 367,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "listenersFor",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/events.js",
            "line": 390,
            "description": "Define a property as a function that should be executed when\na specified event or events are triggered.\n\n\n``` javascript\nvar Job = Ember.Object.extend({\n  logCompleted: Ember.on('completed', function() {\n    console.log('Job completed!');\n  })\n});\n\nvar job = Job.create();\n\nEmber.sendEvent(job, 'completed'); // Logs 'Job completed!'\n ```",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "eventNames",
                    "description": "",
                    "type": "String",
                    "multiple": true
                },
                {
                    "name": "func",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "func"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/expand_properties.js",
            "line": 11,
            "description": "Expands `pattern`, invoking `callback` for each expansion.\n\nThe only pattern supported is brace-expansion, anything else will be passed\nonce to `callback` directly.\n\nExample\n\n```js\nfunction echo(arg){ console.log(arg); }\n\nEmber.expandProperties('foo.bar', echo);              //=> 'foo.bar'\nEmber.expandProperties('{foo,bar}', echo);            //=> 'foo', 'bar'\nEmber.expandProperties('foo.{bar,baz}', echo);        //=> 'foo.bar', 'foo.baz'\nEmber.expandProperties('{foo,bar}.baz', echo);        //=> '{foo,bar}.baz'\nEmber.expandProperties('foo.{bar,baz}.@each', echo)   //=> 'foo.bar.@each', 'foo.baz.@each'\nEmber.expandProperties('{foo,bar}.{spam,eggs}', echo) //=> 'foo.spam', 'foo.eggs', 'bar.spam', 'bar.eggs'\nEmber.expandProperties('{foo}.bar.{baz}')             //=> 'foo.bar.baz'\n```",
            "itemtype": "method",
            "name": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "pattern",
                    "description": "The property pattern to expand.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback to invoke.  It is invoked once per\nexpansion, and is passed the expansion.",
                    "type": "Function"
                }
            ],
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/get_properties.js",
            "line": 4,
            "description": "To get multiple properties at once, call `Ember.getProperties`\nwith an object followed by a list of strings or an array:\n\n```javascript\nEmber.getProperties(record, 'firstName', 'lastName', 'zipCode');\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```\n\nis equivalent to:\n\n```javascript\nEmber.getProperties(record, ['firstName', 'lastName', 'zipCode']);\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```",
            "itemtype": "method",
            "name": "getProperties",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "list",
                    "description": "of keys to get",
                    "type": "String...|Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/instrumentation.js",
            "line": 75,
            "description": "Notifies event's subscribers, calls `before` and `after` hooks.",
            "itemtype": "method",
            "name": "instrument",
            "params": [
                {
                    "name": "name",
                    "description": "Namespaced event name.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Function that you're instrumenting.",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": "Context that instrument function is called with.",
                    "type": "Object"
                }
            ],
            "class": "Ember.Instrumentation",
            "module": "ember-metal",
            "namespace": "Ember.Instrumentation"
        },
        {
            "file": "packages/ember-metal/lib/instrumentation.js",
            "line": 156,
            "description": "Subscribes to a particular event or instrumented block of code.",
            "itemtype": "method",
            "name": "subscribe",
            "params": [
                {
                    "name": "pattern",
                    "description": "Namespaced event name.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "object",
                    "description": "Before and After hooks.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Subscriber"
            },
            "class": "Ember.Instrumentation",
            "module": "ember-metal",
            "namespace": "Ember.Instrumentation"
        },
        {
            "file": "packages/ember-metal/lib/instrumentation.js",
            "line": 196,
            "description": "Unsubscribes from a particular event or instrumented block of code.",
            "itemtype": "method",
            "name": "unsubscribe",
            "params": [
                {
                    "name": "subscriber",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "Ember.Instrumentation",
            "module": "ember-metal",
            "namespace": "Ember.Instrumentation"
        },
        {
            "file": "packages/ember-metal/lib/instrumentation.js",
            "line": 217,
            "description": "Resets `Ember.Instrumentation` by flushing list of subscribers.",
            "itemtype": "method",
            "name": "reset",
            "class": "Ember.Instrumentation",
            "module": "ember-metal",
            "namespace": "Ember.Instrumentation"
        },
        {
            "file": "packages/ember-metal/lib/is_blank.js",
            "line": 3,
            "description": "A value is blank if it is empty or a whitespace string.\n\n```javascript\nEmber.isBlank();                // true\nEmber.isBlank(null);            // true\nEmber.isBlank(undefined);       // true\nEmber.isBlank('');              // true\nEmber.isBlank([]);              // true\nEmber.isBlank('\\n\\t');          // true\nEmber.isBlank('  ');            // true\nEmber.isBlank({});              // false\nEmber.isBlank('\\n\\t Hello');    // false\nEmber.isBlank('Hello world');   // false\nEmber.isBlank([1,2,3]);         // false\n```",
            "itemtype": "method",
            "name": "isBlank",
            "params": [
                {
                    "name": "obj",
                    "description": "Value to test",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "since": "1.5.0",
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/is_empty.js",
            "line": 4,
            "description": "Verifies that a value is `null` or an empty string, empty array,\nor empty function.\n\nConstrains the rules on `Ember.isNone` by returning true for empty\nstring and empty arrays.\n\n```javascript\nEmber.isEmpty();                // true\nEmber.isEmpty(null);            // true\nEmber.isEmpty(undefined);       // true\nEmber.isEmpty('');              // true\nEmber.isEmpty([]);              // true\nEmber.isEmpty({});              // false\nEmber.isEmpty('Adam Hawkins');  // false\nEmber.isEmpty([0,1,2]);         // false\n```",
            "itemtype": "method",
            "name": "isEmpty",
            "params": [
                {
                    "name": "obj",
                    "description": "Value to test",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/is_none.js",
            "line": 1,
            "description": "Returns true if the passed value is null or undefined. This avoids errors\nfrom JSLint complaining about use of ==, which can be technically\nconfusing.\n\n```javascript\nEmber.isNone();              // true\nEmber.isNone(null);          // true\nEmber.isNone(undefined);     // true\nEmber.isNone('');            // false\nEmber.isNone([]);            // false\nEmber.isNone(function() {});  // false\n```",
            "itemtype": "method",
            "name": "isNone",
            "params": [
                {
                    "name": "obj",
                    "description": "Value to test",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/is_present.js",
            "line": 3,
            "description": "A value is present if it not `isBlank`.\n\n```javascript\nEmber.isPresent();                // false\nEmber.isPresent(null);            // false\nEmber.isPresent(undefined);       // false\nEmber.isPresent('');              // false\nEmber.isPresent([]);              // false\nEmber.isPresent('\\n\\t');          // false\nEmber.isPresent('  ');            // false\nEmber.isPresent({});              // true\nEmber.isPresent('\\n\\t Hello');    // true\nEmber.isPresent('Hello world');   // true\nEmber.isPresent([1,2,3]);         // true\n```",
            "itemtype": "method",
            "name": "isPresent",
            "params": [
                {
                    "name": "obj",
                    "description": "Value to test",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "since": "1.8.0",
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/keys.js",
            "line": 3,
            "description": "Returns all of the keys defined on an object or hash. This is useful\nwhen inspecting objects for debugging. On browsers that support it, this\nuses the native `Object.keys` implementation.",
            "itemtype": "method",
            "name": "keys",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Array containing keys of obj",
                "type": "Array"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/logger.js",
            "line": 58,
            "description": "Logs the arguments to the console.\nYou can pass as many arguments as you want and they will be joined together with a space.\n\n ```javascript\n var foo = 1;\n Ember.Logger.log('log value of foo:', foo);\n // \"log value of foo: 1\" will be printed to the console\n ```",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "arguments",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "Ember.Logger",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/logger.js",
            "line": 74,
            "description": "Prints the arguments to the console with a warning icon.\nYou can pass as many arguments as you want and they will be joined together with a space.\n\n ```javascript\n Ember.Logger.warn('Something happened!');\n // \"Something happened!\" will be printed to the console with a warning icon.\n ```",
            "itemtype": "method",
            "name": "warn",
            "params": [
                {
                    "name": "arguments",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "Ember.Logger",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/logger.js",
            "line": 89,
            "description": "Prints the arguments to the console with an error icon, red text and a stack trace.\nYou can pass as many arguments as you want and they will be joined together with a space.\n\n ```javascript\n Ember.Logger.error('Danger! Danger!');\n // \"Danger! Danger!\" will be printed to the console in red text.\n ```",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "arguments",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "Ember.Logger",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/logger.js",
            "line": 104,
            "description": "Logs the arguments to the console.\nYou can pass as many arguments as you want and they will be joined together with a space.\n\n ```javascript\n var foo = 1;\n Ember.Logger.info('log value of foo:', foo);\n // \"log value of foo: 1\" will be printed to the console\n ```",
            "itemtype": "method",
            "name": "info",
            "params": [
                {
                    "name": "arguments",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "Ember.Logger",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/logger.js",
            "line": 120,
            "description": "Logs the arguments to the console in blue text.\nYou can pass as many arguments as you want and they will be joined together with a space.\n\n ```javascript\n var foo = 1;\n Ember.Logger.debug('log value of foo:', foo);\n // \"log value of foo: 1\" will be printed to the console\n ```",
            "itemtype": "method",
            "name": "debug",
            "params": [
                {
                    "name": "arguments",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "Ember.Logger",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/logger.js",
            "line": 136,
            "description": "If the value passed into `Ember.Logger.assert` is not truthy it will throw an error with a stack trace.\n\n ```javascript\n Ember.Logger.assert(true); // undefined\n Ember.Logger.assert(true === false); // Throws an Assertion failed error.\n ```",
            "itemtype": "method",
            "name": "assert",
            "params": [
                {
                    "name": "bool",
                    "description": "Value to test",
                    "type": "Boolean"
                }
            ],
            "class": "Ember.Logger",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/main.js",
            "line": 403,
            "description": "A function may be assigned to `Ember.onerror` to be called when Ember\ninternals encounter an error. This is useful for specialized error handling\nand reporting code.\n\n```javascript\nEmber.onerror = function(error) {\n  Em.$.ajax('/report-error', 'POST', {\n    stack: error.stack,\n    otherInformation: 'whatever app state you want to provide'\n  });\n};\n```\n\nInternally, `Ember.onerror` is used as Backburner's error handler.",
            "itemtype": "event",
            "name": "onerror",
            "params": [
                {
                    "name": "error",
                    "description": "the error object",
                    "type": "Exception"
                }
            ],
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 78,
            "itemtype": "method",
            "name": "create",
            "static": 1,
            "return": {
                "description": "",
                "type": "Ember.OrderedSet"
            },
            "class": "Ember.OrderedSet",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 91,
            "itemtype": "method",
            "name": "clear",
            "class": "Ember.OrderedSet",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 100,
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "guid",
                    "description": "(optional, and for internal use)"
                }
            ],
            "return": {
                "description": "",
                "type": "Ember.OrderedSet"
            },
            "class": "Ember.OrderedSet",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 119,
            "deprecated": true,
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "_guid",
                    "description": "(optional and for internal use only)"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Ember.OrderedSet",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 136,
            "since": "1.8.0",
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "_guid",
                    "description": "(optional and for internal use only)"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Ember.OrderedSet",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 161,
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Ember.OrderedSet",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 169,
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Ember.OrderedSet",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 183,
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "self",
                    "description": ""
                }
            ],
            "class": "Ember.OrderedSet",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 210,
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Ember.OrderedSet",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 218,
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "",
                "type": "Ember.OrderedSet"
            },
            "class": "Ember.OrderedSet",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 270,
            "itemtype": "method",
            "name": "create",
            "static": 1,
            "class": "Ember.Map",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 282,
            "description": "This property will change as the number of objects in the map changes.",
            "since": "1.8.0",
            "itemtype": "property",
            "name": "size",
            "type": "number",
            "default": "0",
            "class": "Ember.Map",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 292,
            "description": "Retrieve the value associated with a given key.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "the value associated with the key, or `undefined`",
                "type": "*"
            },
            "class": "Ember.Map",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 308,
            "description": "Adds a value to the map. If a value for the given key has already been\nprovided, the new value will replace the old value.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Ember.Map"
            },
            "class": "Ember.Map",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 334,
            "deprecated": true,
            "deprecationMessage": "see delete\nRemoves a value from the map for an associated key.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "true if an item was removed, false otherwise",
                "type": "Boolean"
            },
            "class": "Ember.Map",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 348,
            "description": "Removes a value from the map for an associated key.",
            "since": "1.8.0",
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "true if an item was removed, false otherwise",
                "type": "Boolean"
            },
            "class": "Ember.Map",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 373,
            "description": "Check whether a key is present.",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "true if the item was present, false otherwise",
                "type": "Boolean"
            },
            "class": "Ember.Map",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 384,
            "description": "Iterate over all the keys and values. Calls the function once\nfor each key, passing in value, key, and the map being iterated over,\nin that order.\n\nThe keys are guaranteed to be iterated over in insertion order.",
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "self",
                    "description": "if passed, the `this` value inside the\n  callback. By default, `this` is the map.",
                    "type": "*"
                }
            ],
            "class": "Ember.Map",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 421,
            "itemtype": "method",
            "name": "clear",
            "class": "Ember.Map",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 430,
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "",
                "type": "Ember.Map"
            },
            "class": "Ember.Map",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 455,
            "itemtype": "method",
            "name": "create",
            "static": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "optional": true,
                    "props": [
                        {
                            "name": "defaultValue",
                            "description": "",
                            "type": "*",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "If options are passed, returns\n  `Ember.MapWithDefault` otherwise returns `Ember.Map`",
                "type": "Ember.MapWithDefault|Ember.Map"
            },
            "class": "Ember.MapWithDefault",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 476,
            "description": "Retrieve the value associated with a given key.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "the value associated with the key, or the default value",
                "type": "*"
            },
            "class": "Ember.MapWithDefault",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/map.js",
            "line": 495,
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "",
                "type": "Ember.MapWithDefault"
            },
            "class": "Ember.MapWithDefault",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/merge.js",
            "line": 3,
            "description": "Merge the contents of two objects together into the first object.\n\n```javascript\nEmber.merge({first: 'Tom'}, {last: 'Dale'}); // {first: 'Tom', last: 'Dale'}\nvar a = {first: 'Yehuda'};\nvar b = {last: 'Katz'};\nEmber.merge(a, b); // a == {first: 'Yehuda', last: 'Katz'}, b == {last: 'Katz'}\n```",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "original",
                    "description": "The object to merge into",
                    "type": "Object"
                },
                {
                    "name": "updates",
                    "description": "The object to copy properties from",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/mixin.js",
            "line": 484,
            "itemtype": "method",
            "name": "mixin",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "mixins",
                    "description": "",
                    "multiple": true
                }
            ],
            "return": {
                "description": "obj"
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/mixin.js",
            "line": 588,
            "itemtype": "method",
            "name": "create",
            "static": 1,
            "params": [
                {
                    "name": "arguments",
                    "description": "",
                    "multiple": true
                }
            ],
            "class": "Ember.Mixin",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/mixin.js",
            "line": 607,
            "itemtype": "method",
            "name": "reopen",
            "params": [
                {
                    "name": "arguments",
                    "description": "",
                    "multiple": true
                }
            ],
            "class": "Ember.Mixin",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/mixin.js",
            "line": 642,
            "itemtype": "method",
            "name": "apply",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "applied object"
            },
            "class": "Ember.Mixin",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/mixin.js",
            "line": 670,
            "itemtype": "method",
            "name": "detect",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Ember.Mixin",
            "module": "ember",
            "submodule": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/mixin.js",
            "line": 741,
            "description": "Denotes a required property for a mixin",
            "itemtype": "method",
            "name": "required",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/mixin.js",
            "line": 758,
            "description": "Makes a method available via an additional name.\n\n```javascript\nApp.Person = Ember.Object.extend({\n  name: function() {\n    return 'Tomhuda Katzdale';\n  },\n  moniker: Ember.aliasMethod('name')\n});\n\nvar goodGuy = App.Person.create();\n\ngoodGuy.name();    // 'Tomhuda Katzdale'\ngoodGuy.moniker(); // 'Tomhuda Katzdale'\n```",
            "itemtype": "method",
            "name": "aliasMethod",
            "params": [
                {
                    "name": "methodName",
                    "description": "name of the method to alias",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Ember.Descriptor"
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/mixin.js",
            "line": 788,
            "description": "Specify a method that observes property changes.\n\n```javascript\nEmber.Object.extend({\n  valueObserver: Ember.observer('value', function() {\n    // Executes whenever the \"value\" property changes\n  })\n});\n```\n\nIn the future this method may become asynchronous. If you want to ensure\nsynchronous behavior, use `immediateObserver`.\n\nAlso available as `Function.prototype.observes` if prototype extensions are\nenabled.",
            "itemtype": "method",
            "name": "observer",
            "params": [
                {
                    "name": "propertyNames",
                    "description": "",
                    "type": "String",
                    "multiple": true
                },
                {
                    "name": "func",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "func"
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/mixin.js",
            "line": 839,
            "description": "Specify a method that observes property changes.\n\n```javascript\nEmber.Object.extend({\n  valueObserver: Ember.immediateObserver('value', function() {\n    // Executes whenever the \"value\" property changes\n  })\n});\n```\n\nIn the future, `Ember.observer` may become asynchronous. In this event,\n`Ember.immediateObserver` will maintain the synchronous behavior.\n\nAlso available as `Function.prototype.observesImmediately` if prototype extensions are\nenabled.",
            "itemtype": "method",
            "name": "immediateObserver",
            "params": [
                {
                    "name": "propertyNames",
                    "description": "",
                    "type": "String",
                    "multiple": true
                },
                {
                    "name": "func",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "func"
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/mixin.js",
            "line": 872,
            "description": "When observers fire, they are called with the arguments `obj`, `keyName`.\n\nNote, `@each.property` observer is called per each add or replace of an element\nand it's not called with a specific enumeration item.\n\nA `beforeObserver` fires before a property changes.\n\nA `beforeObserver` is an alternative form of `.observesBefore()`.\n\n```javascript\nApp.PersonView = Ember.View.extend({\n  friends: [{ name: 'Tom' }, { name: 'Stefan' }, { name: 'Kris' }],\n\n  valueWillChange: Ember.beforeObserver('content.value', function(obj, keyName) {\n    this.changingFrom = obj.get(keyName);\n  }),\n\n  valueDidChange: Ember.observer('content.value', function(obj, keyName) {\n      // only run if updating a value already in the DOM\n      if (this.get('state') === 'inDOM') {\n        var color = obj.get(keyName) > this.changingFrom ? 'green' : 'red';\n        // logic\n      }\n  }),\n\n  friendsDidChange: Ember.observer('friends.@each.name', function(obj, keyName) {\n    // some logic\n    // obj.get(keyName) returns friends array\n  })\n});\n```\n\nAlso available as `Function.prototype.observesBefore` if prototype extensions are\nenabled.",
            "itemtype": "method",
            "name": "beforeObserver",
            "params": [
                {
                    "name": "propertyNames",
                    "description": "",
                    "type": "String",
                    "multiple": true
                },
                {
                    "name": "func",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "func"
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/observer.js",
            "line": 28,
            "itemtype": "method",
            "name": "addObserver",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "targetOrMethod",
                    "description": "",
                    "type": "Object|Function"
                },
                {
                    "name": "method",
                    "description": "",
                    "type": "Function|String",
                    "optional": true
                }
            ],
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/observer.js",
            "line": 47,
            "itemtype": "method",
            "name": "removeObserver",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "",
                    "type": "Object|Function"
                },
                {
                    "name": "method",
                    "description": "",
                    "type": "Function|String",
                    "optional": true
                }
            ],
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/observer.js",
            "line": 62,
            "itemtype": "method",
            "name": "addBeforeObserver",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "",
                    "type": "Object|Function"
                },
                {
                    "name": "method",
                    "description": "",
                    "type": "Function|String",
                    "optional": true
                }
            ],
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/observer.js",
            "line": 103,
            "itemtype": "method",
            "name": "removeBeforeObserver",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "",
                    "type": "Object|Function"
                },
                {
                    "name": "method",
                    "description": "",
                    "type": "Function|String",
                    "optional": true
                }
            ],
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/properties.js",
            "line": 48,
            "description": "NOTE: This is a low-level method used by other parts of the API. You almost\nnever want to call this method directly. Instead you should use\n`Ember.mixin()` to define new properties.\n\nDefines a property on an object. This method works much like the ES5\n`Object.defineProperty()` method except that it can also accept computed\nproperties and other special descriptors.\n\nNormally this method takes only three parameters. However if you pass an\ninstance of `Ember.Descriptor` as the third param then you can pass an\noptional value as the fourth parameter. This is often more efficient than\ncreating new descriptor hashes for each property.\n\n## Examples\n\n```javascript\n// ES5 compatible mode\nEmber.defineProperty(contact, 'firstName', {\n  writable: true,\n  configurable: false,\n  enumerable: true,\n  value: 'Charles'\n});\n\n// define a simple property\nEmber.defineProperty(contact, 'lastName', undefined, 'Jolley');\n\n// define a computed property\nEmber.defineProperty(contact, 'fullName', Ember.computed(function() {\n  return this.firstName+' '+this.lastName;\n}).property('firstName', 'lastName'));\n```",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "defineProperty",
            "params": [
                {
                    "name": "obj",
                    "description": "the object to define this property on. This may be a prototype.",
                    "type": "Object"
                },
                {
                    "name": "keyName",
                    "description": "the name of the property",
                    "type": "String"
                },
                {
                    "name": "desc",
                    "description": "an instance of `Ember.Descriptor` (typically a\n  computed property) or an ES5 descriptor.\n  You must provide this or `data` but not both.",
                    "type": "Ember.Descriptor",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "something other than a descriptor, that will\n  become the explicit value of this property.",
                    "type": "*",
                    "optional": true
                }
            ],
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/property_events.js",
            "line": 19,
            "description": "This function is called just before an object property is about to change.\nIt will notify any before observers and prepare caches among other things.\n\nNormally you will not need to call this method directly but if for some\nreason you can't directly watch a property you can invoke this method\nmanually along with `Ember.propertyDidChange()` which you should call just\nafter the property value changes.",
            "itemtype": "method",
            "name": "propertyWillChange",
            "params": [
                {
                    "name": "obj",
                    "description": "The object with the property that will change",
                    "type": "Object"
                },
                {
                    "name": "keyName",
                    "description": "The property key (or path) that will change.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/property_events.js",
            "line": 58,
            "description": "This function is called just after an object property has changed.\nIt will notify any observers and clear caches among other things.\n\nNormally you will not need to call this method directly but if for some\nreason you can't directly watch a property you can invoke this method\nmanually along with `Ember.propertyWillChange()` which you should call just\nbefore the property value changes.",
            "itemtype": "method",
            "name": "propertyDidChange",
            "params": [
                {
                    "name": "obj",
                    "description": "The object with the property that will change",
                    "type": "Object"
                },
                {
                    "name": "keyName",
                    "description": "The property key (or path) that will change.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/property_events.js",
            "line": 231,
            "itemtype": "method",
            "name": "beginPropertyChanges",
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/property_events.js",
            "line": 240,
            "itemtype": "method",
            "name": "endPropertyChanges",
            "access": "private",
            "tagname": "",
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/property_events.js",
            "line": 252,
            "description": "Make a series of property changes together in an\nexception-safe way.\n\n```javascript\nEmber.changeProperties(function() {\n  obj1.set('foo', mayBlowUpWhenSet);\n  obj2.set('bar', baz);\n});\n```",
            "itemtype": "method",
            "name": "changeProperties",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": "",
                    "optional": true
                }
            ],
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/property_get.js",
            "line": 23,
            "description": "Gets the value of a property on an object. If the property is computed,\nthe function will be invoked. If the property is not defined but the\nobject implements the `unknownProperty` method then that will be invoked.\n\nIf you plan to run on IE8 and older browsers then you should use this\nmethod anytime you want to retrieve a property on an object that you don't\nknow for sure is private. (Properties beginning with an underscore '_'\nare considered private.)\n\nOn all newer browsers, you only need to use this method to retrieve\nproperties if the property might not be defined on the object and you want\nto respect the `unknownProperty` handler. Otherwise you can ignore this\nmethod.\n\nNote that if the object itself is `undefined`, this method will throw\nan error.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to retrieve from.",
                    "type": "Object"
                },
                {
                    "name": "keyName",
                    "description": "The property key to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the property value or `null`.",
                "type": "Object"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/property_get.js",
            "line": 101,
            "description": "Normalizes a target/path pair to reflect that actual target/path that should\nbe observed, etc. This takes into account passing in global property\npaths (i.e. a path beginning with a capital letter not defined on the\ntarget).",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "normalizeTuple",
            "params": [
                {
                    "name": "target",
                    "description": "The current target. May be `null`.",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "A path on the target or a global property path.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a temporary array with the normalized target/path pair.",
                "type": "Array"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/property_set.js",
            "line": 16,
            "description": "Sets the value of a property on an object, respecting computed properties\nand notifying observers and other listeners of the change. If the\nproperty is not defined but the object implements the `setUnknownProperty`\nmethod then that will be invoked as well.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to modify.",
                    "type": "Object"
                },
                {
                    "name": "keyName",
                    "description": "The property key to set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to set",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the passed value.",
                "type": "Object"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/property_set.js",
            "line": 141,
            "description": "Error-tolerant form of `Ember.set`. Will not blow up if any part of the\nchain is `undefined`, `null`, or destroyed.\n\nThis is primarily used when syncing bindings, which may try to update after\nan object has been destroyed.",
            "itemtype": "method",
            "name": "trySet",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to modify.",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "The property path to set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to set",
                    "type": "Object"
                }
            ],
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 72,
            "description": "If no run-loop is present, it creates a new one. If a run loop is\npresent it will queue itself to run on the existing run-loops action\nqueue.\n\nPlease note: This is not for normal usage, and should be used sparingly.\n\nIf invoked when not within a run loop:\n\n```javascript\nrun.join(function() {\n  // creates a new run-loop\n});\n```\n\nAlternatively, if called within an existing run loop:\n\n```javascript\nrun(function() {\n  // creates a new run-loop\n  run.join(function() {\n    // joins with the existing run-loop, and queues for invocation on\n    // the existing run-loops action queue.\n  });\n});\n```",
            "itemtype": "method",
            "name": "join",
            "params": [
                {
                    "name": "target",
                    "description": "target of method to call",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "method",
                    "description": "Method to invoke.\n  May be a function or a string. If you pass a string\n  then it will be looked up on the passed target.",
                    "type": "Function|String"
                },
                {
                    "name": "args*",
                    "description": "Any additional arguments you wish to pass to the method.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Return value from invoking the passed function. Please note,\nwhen called within an existing loop, no return value is possible.",
                "type": "Object"
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 113,
            "description": "Allows you to specify which context to call the specified function in while\nadding the execution of that function to the Ember run loop. This ability\nmakes this method a great way to asynchronously integrate third-party libraries\ninto your Ember application.\n\n`run.bind` takes two main arguments, the desired context and the function to\ninvoke in that context. Any additional arguments will be supplied as arguments\nto the function that is passed in.\n\nLet's use the creation of a TinyMCE component as an example. Currently,\nTinyMCE provides a setup configuration option we can use to do some processing\nafter the TinyMCE instance is initialized but before it is actually rendered.\nWe can use that setup option to do some additional setup for our component.\nThe component itself could look something like the following:\n\n```javascript\nApp.RichTextEditorComponent = Ember.Component.extend({\n  initializeTinyMCE: function() {\n    tinymce.init({\n      selector: '#' + this.$().prop('id'),\n      setup: Ember.run.bind(this, this.setupEditor)\n    });\n  }.on('didInsertElement'),\n\n  setupEditor: function(editor) {\n    this.set('editor', editor);\n\n    editor.on('change', function() {\n      console.log('content changed!');\n    });\n  }\n});\n```\n\nIn this example, we use Ember.run.bind to bind the setupEditor message to the\ncontext of the App.RichTextEditorComponent and to have the invocation of that\nmethod be safely handled and executed by the Ember run loop.",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "target",
                    "description": "target of method to call",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "method",
                    "description": "Method to invoke.\n  May be a function or a string. If you pass a string\n  then it will be looked up on the passed target.",
                    "type": "Function|String"
                },
                {
                    "name": "args*",
                    "description": "Any additional arguments you wish to pass to the method.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "returns a new function that will always have a particular context",
                "type": "Function"
            },
            "since": "1.4.0",
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 173,
            "description": "Begins a new RunLoop. Any deferred actions invoked after the begin will\nbe buffered until you invoke a matching call to `run.end()`. This is\na lower-level way to use a RunLoop instead of using `run()`.\n\n```javascript\nrun.begin();\n// code to be executed within a RunLoop\nrun.end();\n```",
            "itemtype": "method",
            "name": "begin",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 191,
            "description": "Ends a RunLoop. This must be called sometime after you call\n`run.begin()` to flush any deferred actions. This is a lower-level way\nto use a RunLoop instead of using `run()`.\n\n```javascript\nrun.begin();\n// code to be executed within a RunLoop\nrun.end();\n```",
            "itemtype": "method",
            "name": "end",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 209,
            "description": "Array of named queues. This array determines the order in which queues\nare flushed at the end of the RunLoop. You can define your own queues by\nsimply adding the queue name to this array. Normally you should not need\nto inspect or modify this property.",
            "itemtype": "property",
            "name": "queues",
            "type": "Array",
            "default": "['sync', 'actions', 'destroy']",
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 220,
            "description": "Adds the passed target/method and any optional arguments to the named\nqueue to be executed at the end of the RunLoop. If you have not already\nstarted a RunLoop when calling this method one will be started for you\nautomatically.\n\nAt the end of a RunLoop, any methods scheduled in this way will be invoked.\nMethods will be invoked in an order matching the named queues defined in\nthe `run.queues` property.\n\n```javascript\nrun.schedule('sync', this, function() {\n  // this will be executed in the first RunLoop queue, when bindings are synced\n  console.log('scheduled on sync queue');\n});\n\nrun.schedule('actions', this, function() {\n  // this will be executed in the 'actions' queue, after bindings have synced.\n  console.log('scheduled on actions queue');\n});\n\n// Note the functions will be run in order based on the run queues order.\n// Output would be:\n//   scheduled on sync queue\n//   scheduled on actions queue\n```",
            "itemtype": "method",
            "name": "schedule",
            "params": [
                {
                    "name": "queue",
                    "description": "The name of the queue to schedule against.\n  Default queues are 'sync' and 'actions'",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "target object to use as the context when invoking a method.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "method",
                    "description": "The method to invoke. If you pass a string it\n  will be resolved on the target object at the time the scheduled item is\n  invoked allowing you to change the target function.",
                    "type": "String|Function"
                },
                {
                    "name": "arguments*",
                    "description": "Optional arguments to be passed to the queued method.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 272,
            "description": "Immediately flushes any events scheduled in the 'sync' queue. Bindings\nuse this queue so this method is a useful way to immediately force all\nbindings in the application to sync.\n\nYou should call this method anytime you need any changed state to propagate\nthroughout the app immediately without repainting the UI (which happens\nin the later 'render' queue added by the `ember-views` package).\n\n```javascript\nrun.sync();\n```",
            "itemtype": "method",
            "name": "sync",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 294,
            "description": "Invokes the passed target/method and optional arguments after a specified\nperiod of time. The last parameter of this method must always be a number\nof milliseconds.\n\nYou should use this method whenever you need to run some action after a\nperiod of time instead of using `setTimeout()`. This method will ensure that\nitems that expire during the same script execution cycle all execute\ntogether, which is often more efficient than using a real setTimeout.\n\n```javascript\nrun.later(myContext, function() {\n  // code here will execute within a RunLoop in about 500ms with this == myContext\n}, 500);\n```",
            "itemtype": "method",
            "name": "later",
            "params": [
                {
                    "name": "target",
                    "description": "target of method to invoke",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "method",
                    "description": "The method to invoke.\n  If you pass a string it will be resolved on the\n  target at the time the method is invoked.",
                    "type": "Function|String"
                },
                {
                    "name": "args*",
                    "description": "Optional arguments to pass to the timeout.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "wait",
                    "description": "Number of milliseconds to wait.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Timer information for use in cancelling, see `run.cancel`.",
                "type": "*"
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 323,
            "description": "Schedule a function to run one time during the current RunLoop. This is equivalent\nto calling `scheduleOnce` with the \"actions\" queue.",
            "itemtype": "method",
            "name": "once",
            "params": [
                {
                    "name": "target",
                    "description": "The target of the method to invoke.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "method",
                    "description": "The method to invoke.\n  If you pass a string it will be resolved on the\n  target at the time the method is invoked.",
                    "type": "Function|String"
                },
                {
                    "name": "args*",
                    "description": "Optional arguments to pass to the timeout.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Timer information for use in cancelling, see `run.cancel`.",
                "type": "Object"
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 346,
            "description": "Schedules a function to run one time in a given queue of the current RunLoop.\nCalling this method with the same queue/target/method combination will have\nno effect (past the initial call).\n\nNote that although you can pass optional arguments these will not be\nconsidered when looking for duplicates. New arguments will replace previous\ncalls.\n\n```javascript\nfunction sayHi() {\n  console.log('hi');\n}\n\nrun(function() {\n  run.scheduleOnce('afterRender', myContext, sayHi);\n  run.scheduleOnce('afterRender', myContext, sayHi);\n  // sayHi will only be executed once, in the afterRender queue of the RunLoop\n});\n```\n\nAlso note that passing an anonymous function to `run.scheduleOnce` will\nnot prevent additional calls with an identical anonymous function from\nscheduling the items multiple times, e.g.:\n\n```javascript\nfunction scheduleIt() {\n  run.scheduleOnce('actions', myContext, function() {\n    console.log('Closure');\n  });\n}\n\nscheduleIt();\nscheduleIt();\n\n// \"Closure\" will print twice, even though we're using `run.scheduleOnce`,\n// because the function we pass to it is anonymous and won't match the\n// previously scheduled operation.\n```\n\nAvailable queues, and their order, can be found at `run.queues`",
            "itemtype": "method",
            "name": "scheduleOnce",
            "params": [
                {
                    "name": "queue",
                    "description": "The name of the queue to schedule against. Default queues are 'sync' and 'actions'.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "target",
                    "description": "The target of the method to invoke.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "method",
                    "description": "The method to invoke.\n  If you pass a string it will be resolved on the\n  target at the time the method is invoked.",
                    "type": "Function|String"
                },
                {
                    "name": "args*",
                    "description": "Optional arguments to pass to the timeout.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Timer information for use in cancelling, see `run.cancel`.",
                "type": "Object"
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 402,
            "description": "Schedules an item to run from within a separate run loop, after\ncontrol has been returned to the system. This is equivalent to calling\n`run.later` with a wait time of 1ms.\n\n```javascript\nrun.next(myContext, function() {\n  // code to be executed in the next run loop,\n  // which will be scheduled after the current one\n});\n```\n\nMultiple operations scheduled with `run.next` will coalesce\ninto the same later run loop, along with any other operations\nscheduled by `run.later` that expire right around the same\ntime that `run.next` operations will fire.\n\nNote that there are often alternatives to using `run.next`.\nFor instance, if you'd like to schedule an operation to happen\nafter all DOM element operations have completed within the current\nrun loop, you can make use of the `afterRender` run loop queue (added\nby the `ember-views` package, along with the preceding `render` queue\nwhere all the DOM element operations happen). Example:\n\n```javascript\nApp.MyCollectionView = Ember.CollectionView.extend({\n  didInsertElement: function() {\n    run.scheduleOnce('afterRender', this, 'processChildElements');\n  },\n  processChildElements: function() {\n    // ... do something with collectionView's child view\n    // elements after they've finished rendering, which\n    // can't be done within the CollectionView's\n    // `didInsertElement` hook because that gets run\n    // before the child elements have been added to the DOM.\n  }\n});\n```\n\nOne benefit of the above approach compared to using `run.next` is\nthat you will be able to perform DOM/CSS operations before unprocessed\nelements are rendered to the screen, which may prevent flickering or\nother artifacts caused by delaying processing until after rendering.\n\nThe other major benefit to the above approach is that `run.next`\nintroduces an element of non-determinism, which can make things much\nharder to test, due to its reliance on `setTimeout`; it's much harder\nto guarantee the order of scheduled operations when they are scheduled\noutside of the current run loop, i.e. with `run.next`.",
            "itemtype": "method",
            "name": "next",
            "params": [
                {
                    "name": "target",
                    "description": "target of method to invoke",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "method",
                    "description": "The method to invoke.\n  If you pass a string it will be resolved on the\n  target at the time the method is invoked.",
                    "type": "Function|String"
                },
                {
                    "name": "args*",
                    "description": "Optional arguments to pass to the timeout.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Timer information for use in cancelling, see `run.cancel`.",
                "type": "Object"
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 466,
            "description": "Cancels a scheduled item. Must be a value returned by `run.later()`,\n`run.once()`, `run.next()`, `run.debounce()`, or\n`run.throttle()`.\n\n```javascript\nvar runNext = run.next(myContext, function() {\n  // will not be executed\n});\n\nrun.cancel(runNext);\n\nvar runLater = run.later(myContext, function() {\n  // will not be executed\n}, 500);\n\nrun.cancel(runLater);\n\nvar runOnce = run.once(myContext, function() {\n  // will not be executed\n});\n\nrun.cancel(runOnce);\n\nvar throttle = run.throttle(myContext, function() {\n  // will not be executed\n}, 1, false);\n\nrun.cancel(throttle);\n\nvar debounce = run.debounce(myContext, function() {\n  // will not be executed\n}, 1);\n\nrun.cancel(debounce);\n\nvar debounceImmediate = run.debounce(myContext, function() {\n  // will be executed since we passed in true (immediate)\n}, 100, true);\n\n// the 100ms delay until this method can be called again will be cancelled\nrun.cancel(debounceImmediate);\n```",
            "itemtype": "method",
            "name": "cancel",
            "params": [
                {
                    "name": "timer",
                    "description": "Timer object to cancel",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if cancelled or false/undefined if it wasn't found",
                "type": "Boolean"
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 518,
            "description": "Delay calling the target method until the debounce period has elapsed\nwith no additional debounce calls. If `debounce` is called again before\nthe specified time has elapsed, the timer is reset and the entire period\nmust pass again before the target method is called.\n\nThis method should be used when an event may be called multiple times\nbut the action should only be called once when the event is done firing.\nA common example is for scroll events where you only want updates to\nhappen once scrolling has ceased.\n\n```javascript\nfunction whoRan() {\n  console.log(this.name + ' ran.');\n}\n\nvar myContext = { name: 'debounce' };\n\nrun.debounce(myContext, whoRan, 150);\n\n// less than 150ms passes\nrun.debounce(myContext, whoRan, 150);\n\n// 150ms passes\n// whoRan is invoked with context myContext\n// console logs 'debounce ran.' one time.\n```\n\nImmediate allows you to run the function immediately, but debounce\nother calls for this function until the wait time has elapsed. If\n`debounce` is called again before the specified time has elapsed,\nthe timer is reset and the entire period must pass again before\nthe method can be called again.\n\n```javascript\nfunction whoRan() {\n  console.log(this.name + ' ran.');\n}\n\nvar myContext = { name: 'debounce' };\n\nrun.debounce(myContext, whoRan, 150, true);\n\n// console logs 'debounce ran.' one time immediately.\n// 100ms passes\nrun.debounce(myContext, whoRan, 150, true);\n\n// 150ms passes and nothing else is logged to the console and\n// the debouncee is no longer being watched\nrun.debounce(myContext, whoRan, 150, true);\n\n// console logs 'debounce ran.' one time immediately.\n// 150ms passes and nothing else is logged to the console and\n// the debouncee is no longer being watched\n\n```",
            "itemtype": "method",
            "name": "debounce",
            "params": [
                {
                    "name": "target",
                    "description": "target of method to invoke",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "method",
                    "description": "The method to invoke.\n  May be a function or a string. If you pass a string\n  then it will be looked up on the passed target.",
                    "type": "Function|String"
                },
                {
                    "name": "args*",
                    "description": "Optional arguments to pass to the timeout.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "wait",
                    "description": "Number of milliseconds to wait.",
                    "type": "Number"
                },
                {
                    "name": "immediate",
                    "description": "Trigger the function on the leading instead\n  of the trailing edge of the wait interval. Defaults to false.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Timer information for use in cancelling, see `run.cancel`.",
                "type": "Array"
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 590,
            "description": "Ensure that the target method is never called more frequently than\nthe specified spacing period. The target method is called immediately.\n\n```javascript\nfunction whoRan() {\n  console.log(this.name + ' ran.');\n}\n\nvar myContext = { name: 'throttle' };\n\nrun.throttle(myContext, whoRan, 150);\n// whoRan is invoked with context myContext\n// console logs 'throttle ran.'\n\n// 50ms passes\nrun.throttle(myContext, whoRan, 150);\n\n// 50ms passes\nrun.throttle(myContext, whoRan, 150);\n\n// 150ms passes\nrun.throttle(myContext, whoRan, 150);\n// whoRan is invoked with context myContext\n// console logs 'throttle ran.'\n```",
            "itemtype": "method",
            "name": "throttle",
            "params": [
                {
                    "name": "target",
                    "description": "target of method to invoke",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "method",
                    "description": "The method to invoke.\n  May be a function or a string. If you pass a string\n  then it will be looked up on the passed target.",
                    "type": "Function|String"
                },
                {
                    "name": "args*",
                    "description": "Optional arguments to pass to the timeout.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "spacing",
                    "description": "Number of milliseconds to space out requests.",
                    "type": "Number"
                },
                {
                    "name": "immediate",
                    "description": "Trigger the function on the leading instead\n  of the trailing edge of the wait interval. Defaults to true.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Timer information for use in cancelling, see `run.cancel`.",
                "type": "Array"
            },
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/run_loop.js",
            "line": 640,
            "description": "Add a new named queue after the specified queue.\n\nThe queue to add will only be added once.",
            "itemtype": "method",
            "name": "_addQueue",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the queue to add.",
                    "type": "String"
                },
                {
                    "name": "after",
                    "description": "the name of the queue to add after.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.run",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/set_properties.js",
            "line": 5,
            "description": "Set a list of properties on an object. These properties are set inside\na single `beginPropertyChanges` and `endPropertyChanges` batch, so\nobservers will be buffered.\n\n```javascript\nvar anObject = Ember.Object.create();\n\nanObject.setProperties({\n  firstName: 'Stanley',\n  lastName: 'Stuart',\n  age: 21\n});\n```",
            "itemtype": "method",
            "name": "setProperties",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "properties",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "obj"
            },
            "class": "Ember",
            "module": "ember-metal",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-metal/lib/utils.js",
            "line": 22,
            "description": "Previously we used `Ember.$.uuid`, however `$.uuid` has been removed from\njQuery master. We'll just bootstrap our own uuid now.",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "the uuid",
                "type": "Number"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/utils.js",
            "line": 31,
            "description": "Generates a universally unique identifier. This method\nis used internally by Ember for assisting with\nthe generation of GUID's and other unique identifiers\nsuch as `bind-attr` data attributes.",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "[description]",
                "type": "Number"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/utils.js",
            "line": 44,
            "description": "Prefix used for guids through out Ember.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "GUID_PREFIX",
            "type": "String",
            "final": 1,
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/utils.js",
            "line": 58,
            "description": "Strongly hint runtimes to intern the provided string.\n\nWhen do I need to use this function?\n\nFor the most part, never. Pre-mature optimization is bad, and often the\nruntime does exactly what you need it to, and more often the trade-off isn't\nworth it.\n\nWhy?\n\nRuntimes store strings in at least 2 different representations:\nRopes and Symbols (interned strings). The Rope provides a memory efficient\ndata-structure for strings created from concatenation or some other string\nmanipulation like splitting.\n\nUnfortunately checking equality of different ropes can be quite costly as\nruntimes must resort to clever string comparison algorithms. These\nalgorithms typically cost in proportion to the length of the string.\nLuckily, this is where the Symbols (interned strings) shine. As Symbols are\nunique by their string content, equality checks can be done by pointer\ncomparison.\n\nHow do I know if my string is a rope or symbol?\n\nTypically (warning general sweeping statement, but truthy in runtimes at\npresent) static strings created as part of the JS source are interned.\nStrings often used for comparisons can be interned at runtime if some\ncriteria are met.  One of these criteria can be the size of the entire rope.\nFor example, in chrome 38 a rope longer then 12 characters will not\nintern, nor will segments of that rope.\n\nSome numbers: http://jsperf.com/eval-vs-keys/8\n\nKnown Trick™",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "interned version of the provided string",
                "type": "String"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/utils.js",
            "line": 108,
            "description": "A unique key used to assign guids and other private metadata to objects.\nIf you inspect an object in your browser debugger you will often see these.\nThey can be safely ignored.\n\nOn browsers that support it, these properties are added with enumeration\ndisabled so they won't show up when you iterate over your properties.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "GUID_KEY",
            "type": "String",
            "final": 1,
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/utils.js",
            "line": 168,
            "description": "Generates a new guid, optionally saving the guid to the object that you\npass in. You will rarely need to use this method. Instead you should\ncall `Ember.guidFor(obj)`, which return an existing guid if available.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "generateGuid",
            "params": [
                {
                    "name": "obj",
                    "description": "Object the guid will be used for. If passed in, the guid will\n  be saved on the object and reused whenever you pass the same object\n  again.\n\n  If no object is passed, just generate a new guid.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "prefix",
                    "description": "Prefix to place in front of the guid. Useful when you want to\n  separate the guid into separate namespaces.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "the guid",
                "type": "String"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/utils.js",
            "line": 206,
            "description": "Returns a unique id for the object. If the object does not yet have a guid,\none will be assigned to it. You can call this on any object,\n`Ember.Object`-based or not, but be aware that it will add a `_guid`\nproperty.\n\nYou can also use this method on DOM Element objects.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "guidFor",
            "params": [
                {
                    "name": "obj",
                    "description": "any object, string, number, Element, or primitive",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the unique guid for this instance.",
                "type": "String"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/utils.js",
            "line": 329,
            "description": "Retrieves the meta hash for an object. If `writable` is true ensures the\nhash is writable for this object as well.\n\nThe meta object contains information about computed property descriptors as\nwell as any watched properties and other information. You generally will\nnot access this information directly but instead work with higher level\nmethods that manipulate this hash indirectly.",
            "itemtype": "method",
            "name": "meta",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to retrieve meta for",
                    "type": "Object"
                },
                {
                    "name": "writable",
                    "description": "Pass `false` if you do not intend to modify\n  the meta hash, allowing the method to avoid making an unnecessary copy.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "the meta hash for an object",
                "type": "Object"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/utils.js",
            "line": 406,
            "deprecated": true,
            "access": "private",
            "tagname": "In order to store defaults for a class, a prototype may need to create\na default meta object, which will be inherited by any objects instantiated\nfrom the class's constructor.\n\nHowever, the properties of that meta object are only shallow-cloned,\nso if a property is a hash (like the event system's `listeners` hash),\nit will by default be shared across all instances of that class.\n\nThis method allows extensions to deeply clone a series of nested hashes or\nother complex objects. For instance, the event system might pass\n`['listeners', 'foo:change', 'ember157']` to `prepareMetaPath`, which will\nwalk down the keys provided.\n\nFor each key, if the key does not exist, it is created. If it already\nexists and it was inherited from its constructor, the constructor's\nkey is cloned.\n\nYou can also pass false for `writable`, which will simply return\nundefined if `prepareMetaPath` discovers any part of the path that\nshared or undefined.",
            "itemtype": "method",
            "name": "metaPath",
            "params": [
                {
                    "name": "obj",
                    "description": "The object whose meta we are examining",
                    "type": "Object"
                },
                {
                    "name": "path",
                    "description": "An array of keys to walk down",
                    "type": "Array"
                },
                {
                    "name": "writable",
                    "description": "whether or not to create a new meta\n  (or meta property) if one does not already exist or if it's\n  shared with its constructor",
                    "type": "Boolean"
                }
            ],
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/utils.js",
            "line": 463,
            "description": "Wraps the passed function so that `this._super` will point to the superFunc\nwhen the function is invoked. This is the primitive we use to implement\ncalls to super.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "wrap",
            "params": [
                {
                    "name": "func",
                    "description": "The function to call",
                    "type": "Function"
                },
                {
                    "name": "superFunc",
                    "description": "The super function.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "wrapped function.",
                "type": "Function"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/utils.js",
            "line": 517,
            "description": "Returns true if the passed object is an array or Array-like.\n\nEmber Array Protocol:\n\n  - the object has an objectAt property\n  - the object is a native Array\n  - the object is an Object, and has a length property\n\nUnlike `Ember.typeOf` this method returns true even if the passed object is\nnot formally array but appears to be array-like (i.e. implements `Ember.Array`)\n\n```javascript\nEmber.isArray();                                          // false\nEmber.isArray([]);                                        // true\nEmber.isArray(Ember.ArrayProxy.create({ content: [] }));  // true\n```",
            "itemtype": "method",
            "name": "isArray",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to test",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if the passed object is an array or Array-like",
                "type": "Boolean"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/utils.js",
            "line": 561,
            "description": "Forces the passed object to be part of an array. If the object is already\nan array or array-like, it will return the object. Otherwise, it will add the object to\nan array. If obj is `null` or `undefined`, it will return an empty array.\n\n```javascript\nEmber.makeArray();            // []\nEmber.makeArray(null);        // []\nEmber.makeArray(undefined);   // []\nEmber.makeArray('lindsay');   // ['lindsay']\nEmber.makeArray([1, 2, 42]);  // [1, 2, 42]\n\nvar controller = Ember.ArrayProxy.create({ content: [] });\n\nEmber.makeArray(controller) === controller;  // true\n```",
            "itemtype": "method",
            "name": "makeArray",
            "params": [
                {
                    "name": "obj",
                    "description": "the object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/utils.js",
            "line": 588,
            "description": "Checks to see if the `methodName` exists on the `obj`.\n\n```javascript\nvar foo = { bar: function() { return 'bar'; }, baz: null };\n\nEmber.canInvoke(foo, 'bar'); // true\nEmber.canInvoke(foo, 'baz'); // false\nEmber.canInvoke(foo, 'bat'); // false\n```",
            "itemtype": "method",
            "name": "canInvoke",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to check for the method",
                    "type": "Object"
                },
                {
                    "name": "methodName",
                    "description": "The method name to check for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/utils.js",
            "line": 609,
            "description": "Checks to see if the `methodName` exists on the `obj`,\nand if it does, invokes it with the arguments passed.\n\n```javascript\nvar d = new Date('03/15/2013');\n\nEmber.tryInvoke(d, 'getTime');              // 1363320000000\nEmber.tryInvoke(d, 'setFullYear', [2014]);  // 1394856000000\nEmber.tryInvoke(d, 'noSuchMethod', [2014]); // undefined\n```",
            "itemtype": "method",
            "name": "tryInvoke",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to check for the method",
                    "type": "Object"
                },
                {
                    "name": "methodName",
                    "description": "The method name to check for",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "The arguments to pass to the method",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "the return value of the invoked method or undefined if it cannot be invoked",
                "type": "*"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/utils.js",
            "line": 650,
            "description": "Provides try/finally functionality, while working\naround Safari's double finally bug.\n\n```javascript\nvar tryable = function() {\n  someResource.lock();\n  runCallback(); // May throw error.\n};\n\nvar finalizer = function() {\n  someResource.unlock();\n};\n\nEmber.tryFinally(tryable, finalizer);\n```",
            "itemtype": "method",
            "name": "tryFinally",
            "params": [
                {
                    "name": "tryable",
                    "description": "The function to run the try callback",
                    "type": "Function"
                },
                {
                    "name": "finalizer",
                    "description": "The function to run the finally callback",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": "The optional calling object. Defaults to 'this'",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The return value is the that of the finalizer,\nunless that value is undefined, in which case it is the return value\nof the tryable",
                "type": "*"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/utils.js",
            "line": 714,
            "description": "Provides try/catch/finally functionality, while working\naround Safari's double finally bug.\n\n```javascript\nvar tryable = function() {\n  for (i = 0, l = listeners.length; i < l; i++) {\n    listener = listeners[i];\n    beforeValues[i] = listener.before(name, time(), payload);\n  }\n\n  return callback.call(binding);\n};\n\nvar catchable = function(e) {\n  payload = payload || {};\n  payload.exception = e;\n};\n\nvar finalizer = function() {\n  for (i = 0, l = listeners.length; i < l; i++) {\n    listener = listeners[i];\n    listener.after(name, time(), payload, beforeValues[i]);\n  }\n};\n\nEmber.tryCatchFinally(tryable, catchable, finalizer);\n```",
            "itemtype": "method",
            "name": "tryCatchFinally",
            "params": [
                {
                    "name": "tryable",
                    "description": "The function to run the try callback",
                    "type": "Function"
                },
                {
                    "name": "catchable",
                    "description": "The function to run the catchable callback",
                    "type": "Function"
                },
                {
                    "name": "finalizer",
                    "description": "The function to run the finally callback",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": "The optional calling object. Defaults to 'this'",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The return value is the that of the finalizer,\nunless that value is undefined, in which case it is the return value\nof the tryable.",
                "type": "*"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/utils.js",
            "line": 808,
            "description": "Returns a consistent type for the passed item.\n\nUse this instead of the built-in `typeof` to get the type of an item.\nIt will return the same result across all browsers and includes a bit\nmore detail. Here is what will be returned:\n\n    | Return Value  | Meaning                                              |\n    |---------------|------------------------------------------------------|\n    | 'string'      | String primitive or String object.                   |\n    | 'number'      | Number primitive or Number object.                   |\n    | 'boolean'     | Boolean primitive or Boolean object.                 |\n    | 'null'        | Null value                                           |\n    | 'undefined'   | Undefined value                                      |\n    | 'function'    | A function                                           |\n    | 'array'       | An instance of Array                                 |\n    | 'regexp'      | An instance of RegExp                                |\n    | 'date'        | An instance of Date                                  |\n    | 'class'       | An Ember class (created using Ember.Object.extend()) |\n    | 'instance'    | An Ember object instance                             |\n    | 'error'       | An instance of the Error object                      |\n    | 'object'      | A JavaScript object not inheriting from Ember.Object |\n\nExamples:\n\n```javascript\nEmber.typeOf();                       // 'undefined'\nEmber.typeOf(null);                   // 'null'\nEmber.typeOf(undefined);              // 'undefined'\nEmber.typeOf('michael');              // 'string'\nEmber.typeOf(new String('michael'));  // 'string'\nEmber.typeOf(101);                    // 'number'\nEmber.typeOf(new Number(101));        // 'number'\nEmber.typeOf(true);                   // 'boolean'\nEmber.typeOf(new Boolean(true));      // 'boolean'\nEmber.typeOf(Ember.makeArray);        // 'function'\nEmber.typeOf([1, 2, 90]);             // 'array'\nEmber.typeOf(/abc/);                  // 'regexp'\nEmber.typeOf(new Date());             // 'date'\nEmber.typeOf(Ember.Object.extend());  // 'class'\nEmber.typeOf(Ember.Object.create());  // 'instance'\nEmber.typeOf(new Error('teamocil'));  // 'error'\n\n// 'normal' JavaScript object\nEmber.typeOf({ a: 'b' });             // 'object'\n```",
            "itemtype": "method",
            "name": "typeOf",
            "params": [
                {
                    "name": "item",
                    "description": "the item to check",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the type",
                "type": "String"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/utils.js",
            "line": 890,
            "description": "Convenience method to inspect an object. This method will attempt to\nconvert the object into a useful string description.\n\nIt is a pretty simple implementation. If you want something more robust,\nuse something like JSDump: https://github.com/NV/jsDump",
            "itemtype": "method",
            "name": "inspect",
            "params": [
                {
                    "name": "obj",
                    "description": "The object you want to inspect.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A description of the object",
                "type": "String"
            },
            "since": "1.4.0",
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/utils.js",
            "line": 932,
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "method",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "args",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/utils.js",
            "line": 950,
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/watching.js",
            "line": 25,
            "description": "Starts watching a property on an object. Whenever the property changes,\ninvokes `Ember.propertyWillChange` and `Ember.propertyDidChange`. This is the\nprimitive used by observers and dependent keys; usually you will never call\nthis method directly but instead use higher level methods like\n`Ember.addObserver()`",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "watch",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "keyName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-metal/lib/watching.js",
            "line": 71,
            "description": "Tears down the meta on an object so that it can be garbage collected.\nMultiple calls will have no effect.",
            "itemtype": "method",
            "name": "destroy",
            "params": [
                {
                    "name": "obj",
                    "description": "the object to destroy",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Ember",
            "module": "ember-metal"
        },
        {
            "file": "packages/ember-routing-htmlbars/lib/helpers/action.js",
            "line": 118,
            "description": "The `{{action}}` helper provides a useful shortcut for registering an HTML\nelement within a template for a single DOM event and forwarding that\ninteraction to the template's controller or specified `target` option.\n\nIf the controller does not implement the specified action, the event is sent\nto the current route, and it bubbles up the route hierarchy from there.\n\nFor more advanced event handling see [Ember.Component](/api/classes/Ember.Component.html)\n\n\n### Use\nGiven the following application Handlebars template on the page\n\n```handlebars\n<div {{action 'anActionName'}}>\n  click me\n</div>\n```\n\nAnd application code\n\n```javascript\nApp.ApplicationController = Ember.Controller.extend({\n  actions: {\n    anActionName: function() {\n    }\n  }\n});\n```\n\nWill result in the following rendered HTML\n\n```html\n<div class=\"ember-view\">\n  <div data-ember-action=\"1\">\n    click me\n  </div>\n</div>\n```\n\nClicking \"click me\" will trigger the `anActionName` action of the\n`App.ApplicationController`. In this case, no additional parameters will be passed.\n\nIf you provide additional parameters to the helper:\n\n```handlebars\n<button {{action 'edit' post}}>Edit</button>\n```\n\nThose parameters will be passed along as arguments to the JavaScript\nfunction implementing the action.\n\n### Event Propagation\n\nEvents triggered through the action helper will automatically have\n`.preventDefault()` called on them. You do not need to do so in your event\nhandlers. If you need to allow event propagation (to handle file inputs for\nexample) you can supply the `preventDefault=false` option to the `{{action}}` helper:\n\n```handlebars\n<div {{action \"sayHello\" preventDefault=false}}>\n  <input type=\"file\" />\n  <input type=\"checkbox\" />\n</div>\n```\n\nTo disable bubbling, pass `bubbles=false` to the helper:\n\n```handlebars\n<button {{action 'edit' post bubbles=false}}>Edit</button>\n```\n\nIf you need the default handler to trigger you should either register your\nown event handler, or use event methods on your view class. See [Ember.View](/api/classes/Ember.View.html)\n'Responding to Browser Events' for more information.\n\n### Specifying DOM event type\n\nBy default the `{{action}}` helper registers for DOM `click` events. You can\nsupply an `on` option to the helper to specify a different DOM event name:\n\n```handlebars\n<div {{action \"anActionName\" on=\"doubleClick\"}}>\n  click me\n</div>\n```\n\nSee `Ember.View` 'Responding to Browser Events' for a list of\nacceptable DOM event names.\n\n### Specifying whitelisted modifier keys\n\nBy default the `{{action}}` helper will ignore click event with pressed modifier\nkeys. You can supply an `allowedKeys` option to specify which keys should not be ignored.\n\n```handlebars\n<div {{action \"anActionName\" allowedKeys=\"alt\"}}>\n  click me\n</div>\n```\n\nThis way the `{{action}}` will fire when clicking with the alt key pressed down.\n\nAlternatively, supply \"any\" to the `allowedKeys` option to accept any combination of modifier keys.\n\n```handlebars\n<div {{action \"anActionName\" allowedKeys=\"any\"}}>\n  click me with any key pressed\n</div>\n```\n\n### Specifying a Target\n\nThere are several possible target objects for `{{action}}` helpers:\n\nIn a typical Ember application, where templates are managed through use of the\n`{{outlet}}` helper, actions will bubble to the current controller, then\nto the current route, and then up the route hierarchy.\n\nAlternatively, a `target` option can be provided to the helper to change\nwhich object will receive the method call. This option must be a path\nto an object, accessible in the current context:\n\n```handlebars\n{{! the application template }}\n<div {{action \"anActionName\" target=view}}>\n  click me\n</div>\n```\n\n```javascript\nApp.ApplicationView = Ember.View.extend({\n  actions: {\n    anActionName: function() {}\n  }\n});\n\n```\n\n### Additional Parameters\n\nYou may specify additional parameters to the `{{action}}` helper. These\nparameters are passed along as the arguments to the JavaScript function\nimplementing the action.\n\n```handlebars\n{{#each person in people}}\n  <div {{action \"edit\" person}}>\n    click me\n  </div>\n{{/each}}\n```\n\nClicking \"click me\" will trigger the `edit` method on the current controller\nwith the value of `person` as a parameter.",
            "itemtype": "method",
            "name": "action",
            "params": [
                {
                    "name": "actionName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "multiple": true
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Hash"
                }
            ],
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-routing-htmlbars"
        },
        {
            "file": "packages/ember-routing-htmlbars/lib/helpers/link-to.js",
            "line": 17,
            "description": "The `{{link-to}}` helper renders a link to the supplied\n`routeName` passing an optionally supplied model to the\nroute as its `model` context of the route. The block\nfor `{{link-to}}` becomes the innerHTML of the rendered\nelement:\n\n```handlebars\n{{#link-to 'photoGallery'}}\n  Great Hamster Photos\n{{/link-to}}\n```\n\nYou can also use an inline form of `{{link-to}}` helper by\npassing the link text as the first argument\nto the helper:\n\n```handlebars\n{{link-to 'Great Hamster Photos' 'photoGallery'}}\n```\n\nBoth will result in:\n\n```html\n<a href=\"/hamster-photos\">\n  Great Hamster Photos\n</a>\n```\n\n### Supplying a tagName\nBy default `{{link-to}}` renders an `<a>` element. This can\nbe overridden for a single use of `{{link-to}}` by supplying\na `tagName` option:\n\n```handlebars\n{{#link-to 'photoGallery' tagName=\"li\"}}\n  Great Hamster Photos\n{{/link-to}}\n```\n\n```html\n<li>\n  Great Hamster Photos\n</li>\n```\n\nTo override this option for your entire application, see\n\"Overriding Application-wide Defaults\".\n\n### Disabling the `link-to` helper\nBy default `{{link-to}}` is enabled.\nany passed value to `disabled` helper property will disable the `link-to` helper.\n\nstatic use: the `disabled` option:\n\n```handlebars\n{{#link-to 'photoGallery' disabled=true}}\n  Great Hamster Photos\n{{/link-to}}\n```\n\ndynamic use: the `disabledWhen` option:\n\n```handlebars\n{{#link-to 'photoGallery' disabledWhen=controller.someProperty}}\n  Great Hamster Photos\n{{/link-to}}\n```\n\nany passed value to `disabled` will disable it except `undefined`.\nto ensure that only `true` disable the `link-to` helper you can\noverride the global behaviour of `Ember.LinkView`.\n\n```javascript\nEmber.LinkView.reopen({\n  disabled: Ember.computed(function(key, value) {\n    if (value !== undefined) {\n      this.set('_isDisabled', value === true);\n    }\n    return value === true ? get(this, 'disabledClass') : false;\n  })\n});\n```\n\nsee \"Overriding Application-wide Defaults\" for more.\n\n### Handling `href`\n`{{link-to}}` will use your application's Router to\nfill the element's `href` property with a url that\nmatches the path to the supplied `routeName` for your\nrouter's configured `Location` scheme, which defaults\nto Ember.HashLocation.\n\n### Handling current route\n`{{link-to}}` will apply a CSS class name of 'active'\nwhen the application's current route matches\nthe supplied routeName. For example, if the application's\ncurrent route is 'photoGallery.recent' the following\nuse of `{{link-to}}`:\n\n```handlebars\n{{#link-to 'photoGallery.recent'}}\n  Great Hamster Photos\n{{/link-to}}\n```\n\nwill result in\n\n```html\n<a href=\"/hamster-photos/this-week\" class=\"active\">\n  Great Hamster Photos\n</a>\n```\n\nThe CSS class name used for active classes can be customized\nfor a single use of `{{link-to}}` by passing an `activeClass`\noption:\n\n```handlebars\n{{#link-to 'photoGallery.recent' activeClass=\"current-url\"}}\n  Great Hamster Photos\n{{/link-to}}\n```\n\n```html\n<a href=\"/hamster-photos/this-week\" class=\"current-url\">\n  Great Hamster Photos\n</a>\n```\n\nTo override this option for your entire application, see\n\"Overriding Application-wide Defaults\".\n\n### Supplying a model\nAn optional model argument can be used for routes whose\npaths contain dynamic segments. This argument will become\nthe model context of the linked route:\n\n```javascript\nApp.Router.map(function() {\n  this.resource(\"photoGallery\", {path: \"hamster-photos/:photo_id\"});\n});\n```\n\n```handlebars\n{{#link-to 'photoGallery' aPhoto}}\n  {{aPhoto.title}}\n{{/link-to}}\n```\n\n```html\n<a href=\"/hamster-photos/42\">\n  Tomster\n</a>\n```\n\n### Supplying multiple models\nFor deep-linking to route paths that contain multiple\ndynamic segments, multiple model arguments can be used.\nAs the router transitions through the route path, each\nsupplied model argument will become the context for the\nroute with the dynamic segments:\n\n```javascript\nApp.Router.map(function() {\n  this.resource(\"photoGallery\", {path: \"hamster-photos/:photo_id\"}, function() {\n    this.route(\"comment\", {path: \"comments/:comment_id\"});\n  });\n});\n```\nThis argument will become the model context of the linked route:\n\n```handlebars\n{{#link-to 'photoGallery.comment' aPhoto comment}}\n  {{comment.body}}\n{{/link-to}}\n```\n\n```html\n<a href=\"/hamster-photos/42/comments/718\">\n  A+++ would snuggle again.\n</a>\n```\n\n### Supplying an explicit dynamic segment value\nIf you don't have a model object available to pass to `{{link-to}}`,\nan optional string or integer argument can be passed for routes whose\npaths contain dynamic segments. This argument will become the value\nof the dynamic segment:\n\n```javascript\nApp.Router.map(function() {\n  this.resource(\"photoGallery\", {path: \"hamster-photos/:photo_id\"});\n});\n```\n\n```handlebars\n{{#link-to 'photoGallery' aPhotoId}}\n  {{aPhoto.title}}\n{{/link-to}}\n```\n\n```html\n<a href=\"/hamster-photos/42\">\n  Tomster\n</a>\n```\n\nWhen transitioning into the linked route, the `model` hook will\nbe triggered with parameters including this passed identifier.\n\n### Allowing Default Action\n\n By default the `{{link-to}}` helper prevents the default browser action\n by calling `preventDefault()` as this sort of action bubbling is normally\n handled internally and we do not want to take the browser to a new URL (for\n example).\n\n If you need to override this behavior specify `preventDefault=false` in\n your template:\n\n```handlebars\n{{#link-to 'photoGallery' aPhotoId preventDefault=false}}\n  {{aPhotoId.title}}\n{{/link-to}}\n```\n\n### Overriding attributes\nYou can override any given property of the Ember.LinkView\nthat is generated by the `{{link-to}}` helper by passing\nkey/value pairs, like so:\n\n```handlebars\n{{#link-to  aPhoto tagName='li' title='Following this link will change your life' classNames='pic sweet'}}\n  Uh-mazing!\n{{/link-to}}\n```\n\nSee [Ember.LinkView](/api/classes/Ember.LinkView.html) for a\ncomplete list of overrideable properties. Be sure to also\ncheck out inherited properties of `LinkView`.\n\n### Overriding Application-wide Defaults\n``{{link-to}}`` creates an instance of Ember.LinkView\nfor rendering. To override options for your entire\napplication, reopen Ember.LinkView and supply the\ndesired values:\n\n``` javascript\nEmber.LinkView.reopen({\n  activeClass: \"is-active\",\n  tagName: 'li'\n})\n```\n\nIt is also possible to override the default event in\nthis manner:\n\n``` javascript\nEmber.LinkView.reopen({\n  eventName: 'customEventName'\n});\n```",
            "itemtype": "method",
            "name": "link-to",
            "params": [
                {
                    "name": "routeName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "multiple": true
                },
                {
                    "name": "options",
                    "description": "Handlebars key/value pairs of options, you can override any property of Ember.LinkView",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "HTML string",
                "type": "String"
            },
            "see": [
                "{Ember.LinkView}"
            ],
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-routing-htmlbars"
        },
        {
            "file": "packages/ember-routing-htmlbars/lib/helpers/link-to.js",
            "line": 342,
            "description": "See [link-to](/api/classes/Ember.Handlebars.helpers.html#method_link-to)",
            "itemtype": "method",
            "name": "linkTo",
            "deprecated": true,
            "params": [
                {
                    "name": "routeName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "HTML string",
                "type": "String"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-routing-htmlbars"
        },
        {
            "file": "packages/ember-routing-htmlbars/lib/helpers/outlet.js",
            "line": 8,
            "description": "The `outlet` helper is a placeholder that the router will fill in with\nthe appropriate template based on the current state of the application.\n\n``` handlebars\n{{outlet}}\n```\n\nBy default, a template based on Ember's naming conventions will be rendered\ninto the `outlet` (e.g. `App.PostsRoute` will render the `posts` template).\n\nYou can render a different template by using the `render()` method in the\nroute's `renderTemplate` hook. The following will render the `favoritePost`\ntemplate into the `outlet`.\n\n``` javascript\nApp.PostsRoute = Ember.Route.extend({\n  renderTemplate: function() {\n    this.render('favoritePost');\n  }\n});\n```\n\nYou can create custom named outlets for more control.\n\n``` handlebars\n{{outlet 'favoritePost'}}\n{{outlet 'posts'}}\n```\n\nThen you can define what template is rendered into each outlet in your\nroute.\n\n\n``` javascript\nApp.PostsRoute = Ember.Route.extend({\n  renderTemplate: function() {\n    this.render('favoritePost', { outlet: 'favoritePost' });\n    this.render('posts', { outlet: 'posts' });\n  }\n});\n```\n\nYou can specify the view that the outlet uses to contain and manage the\ntemplates rendered into it.\n\n``` handlebars\n{{outlet view='sectionContainer'}}\n```\n\n``` javascript\nApp.SectionContainer = Ember.ContainerView.extend({\n  tagName: 'section',\n  classNames: ['special']\n});\n```",
            "itemtype": "method",
            "name": "outlet",
            "params": [
                {
                    "name": "property",
                    "description": "the property on the controller\n  that holds the view for this outlet",
                    "type": "String"
                }
            ],
            "return": {
                "description": "HTML string",
                "type": "String"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-routing-htmlbars"
        },
        {
            "file": "packages/ember-routing-htmlbars/lib/helpers/query-params.js",
            "line": 9,
            "description": "This is a sub-expression to be used in conjunction with the link-to helper.\nIt will supply url query parameters to the target route.\n\nExample\n\n{{#link-to 'posts' (query-params direction=\"asc\")}}Sort{{/link-to}}",
            "itemtype": "method",
            "name": "query-params",
            "params": [
                {
                    "name": "hash",
                    "description": "takes a hash of query parameters",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "HTML string",
                "type": "String"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-routing-htmlbars"
        },
        {
            "file": "packages/ember-routing-htmlbars/lib/helpers/render.js",
            "line": 19,
            "description": "Calling ``{{render}}`` from within a template will insert another\ntemplate that matches the provided name. The inserted template will\naccess its properties on its own controller (rather than the controller\nof the parent template).\n\nIf a view class with the same name exists, the view class also will be used.\n\nNote: A given controller may only be used *once* in your app in this manner.\nA singleton instance of the controller will be created for you.\n\nExample:\n\n```javascript\nApp.NavigationController = Ember.Controller.extend({\n  who: \"world\"\n});\n```\n\n```handlebars\n<!-- navigation.hbs -->\nHello, {{who}}.\n```\n\n```handlebars\n<!-- application.hbs -->\n<h1>My great app</h1>\n{{render \"navigation\"}}\n```\n\n```html\n<h1>My great app</h1>\n<div class='ember-view'>\n  Hello, world.\n</div>\n```\n\nOptionally you may provide a second argument: a property path\nthat will be bound to the `model` property of the controller.\n\nIf a `model` property path is specified, then a new instance of the\ncontroller will be created and `{{render}}` can be used multiple times\nwith the same name.\n\n For example if you had this `author` template.\n\n ```handlebars\n<div class=\"author\">\nWritten by {{firstName}} {{lastName}}.\nTotal Posts: {{postCount}}\n</div>\n```\n\nYou could render it inside the `post` template using the `render` helper.\n\n```handlebars\n<div class=\"post\">\n<h1>{{title}}</h1>\n<div>{{body}}</div>\n{{render \"author\" author}}\n</div>\n ```",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object?"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Hash"
                }
            ],
            "return": {
                "description": "HTML string",
                "type": "String"
            },
            "class": "Ember.Handlebars.helpers",
            "module": "ember",
            "submodule": "ember-routing-htmlbars"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 53,
            "deprecated": true,
            "deprecationMessage": "Use current-when instead.",
            "itemtype": "property",
            "name": "currentWhen",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 59,
            "description": "Used to determine when this LinkView is active.",
            "itemtype": "property",
            "name": "currentWhen",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 66,
            "description": "Sets the `title` attribute of the `LinkView`'s HTML element.",
            "itemtype": "property",
            "name": "title",
            "default": "null",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 74,
            "description": "Sets the `rel` attribute of the `LinkView`'s HTML element.",
            "itemtype": "property",
            "name": "rel",
            "default": "null",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 82,
            "description": "Sets the `tabindex` attribute of the `LinkView`'s HTML element.",
            "itemtype": "property",
            "name": "tabindex",
            "default": "null",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 90,
            "description": "Sets the `target` attribute of the `LinkView`'s HTML element.",
            "since": "1.8.0",
            "itemtype": "property",
            "name": "target",
            "default": "null",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 99,
            "description": "The CSS class to apply to `LinkView`'s element when its `active`\nproperty is `true`.",
            "itemtype": "property",
            "name": "activeClass",
            "type": "String",
            "default": "active",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 109,
            "description": "The CSS class to apply to `LinkView`'s element when its `loading`\nproperty is `true`.",
            "itemtype": "property",
            "name": "loadingClass",
            "type": "String",
            "default": "loading",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 119,
            "description": "The CSS class to apply to a `LinkView`'s element when its `disabled`\nproperty is `true`.",
            "itemtype": "property",
            "name": "disabledClass",
            "type": "String",
            "default": "disabled",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 130,
            "description": "Determines whether the `LinkView` will trigger routing via\nthe `replaceWith` routing strategy.",
            "itemtype": "property",
            "name": "replace",
            "type": "Boolean",
            "default": "false",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 140,
            "description": "By default the `{{link-to}}` helper will bind to the `href` and\n`title` attributes. It's discouraged that you override these defaults,\nhowever you can push onto the array if needed.",
            "itemtype": "property",
            "name": "attributeBindings",
            "type": "Array | String",
            "default": "['href', 'title', 'rel', 'tabindex', 'target']",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 151,
            "description": "By default the `{{link-to}}` helper will bind to the `active`, `loading`, and\n`disabled` classes. It is discouraged to override these directly.",
            "itemtype": "property",
            "name": "classNameBindings",
            "type": "Array",
            "default": "['active', 'loading', 'disabled']",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 161,
            "description": "By default the `{{link-to}}` helper responds to the `click` event. You\ncan override this globally by setting this property to your custom\nevent name.\n\nThis is particularly useful on mobile when one wants to avoid the 300ms\nclick delay using some sort of custom `tap` event.",
            "itemtype": "property",
            "name": "eventName",
            "type": "String",
            "default": "click",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 178,
            "description": "Triggers the `LinkView`'s routing behavior. If\n`eventName` is changed to a value other than `click`\nthe routing behavior will trigger on that custom event\ninstead.",
            "itemtype": "event",
            "name": "click",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 187,
            "description": "An overridable method called when LinkView objects are instantiated.\n\nExample:\n\n```javascript\nApp.MyLinkView = Ember.LinkView.extend({\n  init: function() {\n    this._super.apply(this, arguments);\n    Ember.Logger.log('Event is ' + this.get('eventName'));\n  }\n});\n```\n\nNOTE: If you do override `init` for a framework class like `Ember.View` or\n`Ember.ArrayController`, be sure to call `this._super.apply(this, arguments)` in your\n`init` declaration! If you don't, Ember may not have an opportunity to\ndo important setup work, and you'll see strange behavior in your\napplication.",
            "itemtype": "method",
            "name": "init",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 222,
            "description": "This method is invoked by observers installed during `init` that fire\nwhenever the params change",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_paramsChanged",
            "since": "1.3.0",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 234,
            "description": "This is called to setup observers that will trigger a rerender.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_setupPathObservers",
            "since": "1.3.0",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 268,
            "description": "Accessed as a classname binding to apply the `LinkView`'s `disabledClass`\n    CSS `class` to the element when the link is disabled.\nWhen `true` interactions with the element will not trigger route changes.",
            "itemtype": "property",
            "name": "disabled",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 282,
            "description": "Accessed as a classname binding to apply the `LinkView`'s `activeClass`\nCSS `class` to the element when the link is active.\n\nA `LinkView` is considered active when its `currentWhen` property is `true`\nor the application's current route is the route the `LinkView` would trigger\ntransitions into.\n\nThe `currentWhen` property can match against multiple routes by separating\nroute names using the ` ` (space) character.",
            "itemtype": "property",
            "name": "active",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 324,
            "description": "Accessed as a classname binding to apply the `LinkView`'s `loadingClass`\nCSS `class` to the element when the link is loading.\n\nA `LinkView` is considered loading when it has at least one\nparameter whose value is currently null or undefined. During\nthis time, clicking the link will perform no transition and\nemit a warning that the link is still in a loading state.",
            "itemtype": "property",
            "name": "loading",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 339,
            "description": "Returns the application's main router from the container.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "router",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 352,
            "description": "Event handler that invokes the link, activating the associated route.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_invoke",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 407,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_eagerUpdateUrl",
            "params": [
                {
                    "name": "transition",
                    "description": ""
                },
                {
                    "name": "href",
                    "description": ""
                }
            ],
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 436,
            "description": "Computed property that returns an array of the\nresolved parameters passed to the `link-to` helper,\ne.g.:\n\n```hbs\n{{link-to a b '123' c}}\n```\n\nwill generate a `resolvedParams` of:\n\n```js\n[aObject, bObject, '123', cObject]\n```",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 481,
            "description": "Computed property that returns the current route name,\ndynamic segments, and query params. Returns falsy if\nfor null/undefined params to indicate that the link view\nis still in a loading state.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "",
            "return": {
                "description": "An array with the route name and any dynamic segments",
                "type": "Array"
            },
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 512,
            "description": "Sets the element's `href` attribute to the url for\nthe `LinkView`'s targeted route.\n\nIf the `LinkView`'s `tagName` is changed to a value other\nthan `a`, this property will be ignored.",
            "itemtype": "property",
            "name": "href",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing-views/lib/views/link.js",
            "line": 540,
            "description": "The default href value to use while a link-to is loading.\nOnly applies when tagName is 'a'",
            "itemtype": "property",
            "name": "loadingHref",
            "type": "String",
            "default": "#",
            "class": "Ember.LinkView",
            "module": "ember",
            "submodule": "ember-routing-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/ext/controller.js",
            "line": 23,
            "description": "Defines which query parameters the controller accepts.\nIf you give the names ['category','page'] it will bind\nthe values of these query parameters to the variables\n`this.category` and `this.page`",
            "itemtype": "property",
            "name": "queryParams",
            "access": "public",
            "tagname": "",
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "packages/ember-routing/lib/ext/controller.js",
            "line": 34,
            "itemtype": "property",
            "name": "_qpDelegate",
            "access": "private",
            "tagname": "",
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "packages/ember-routing/lib/ext/controller.js",
            "line": 40,
            "itemtype": "property",
            "name": "_normalizedQueryParams",
            "access": "private",
            "tagname": "",
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "packages/ember-routing/lib/ext/controller.js",
            "line": 64,
            "itemtype": "property",
            "name": "_cacheMeta",
            "access": "private",
            "tagname": "",
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "packages/ember-routing/lib/ext/controller.js",
            "line": 99,
            "itemtype": "method",
            "name": "_updateCacheParams",
            "access": "private",
            "tagname": "",
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "packages/ember-routing/lib/ext/controller.js",
            "line": 120,
            "itemtype": "method",
            "name": "_qpChanged",
            "access": "private",
            "tagname": "",
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "packages/ember-routing/lib/ext/controller.js",
            "line": 144,
            "itemtype": "method",
            "name": "_calculateCacheKey",
            "access": "private",
            "tagname": "",
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "packages/ember-routing/lib/ext/controller.js",
            "line": 159,
            "description": "Transition the application into another route. The route may\nbe either a single route or route path:\n\n```javascript\naController.transitionToRoute('blogPosts');\naController.transitionToRoute('blogPosts.recentEntries');\n```\n\nOptionally supply a model for the route in question. The model\nwill be serialized into the URL using the `serialize` hook of\nthe route:\n\n```javascript\naController.transitionToRoute('blogPost', aPost);\n```\n\nIf a literal is passed (such as a number or a string), it will\nbe treated as an identifier instead. In this case, the `model`\nhook of the route will be triggered:\n\n```javascript\naController.transitionToRoute('blogPost', 1);\n```\n\nMultiple models will be applied last to first recursively up the\nresource tree.\n\n```javascript\nApp.Router.map(function() {\n  this.resource('blogPost', {path:':blogPostId'}, function() {\n    this.resource('blogComment', {path: ':blogCommentId'});\n  });\n});\n\naController.transitionToRoute('blogComment', aPost, aComment);\naController.transitionToRoute('blogComment', 1, 13);\n```\n\nIt is also possible to pass a URL (a string that starts with a\n`/`). This is intended for testing and debugging purposes and\nshould rarely be used in production code.\n\n```javascript\naController.transitionToRoute('/');\naController.transitionToRoute('/blog/post/1/comment/13');\naController.transitionToRoute('/blog/posts?sort=title');\n```\n\nAn options hash with a `queryParams` property may be provided as\nthe final argument to add query parameters to the destination URL.\n\n```javascript\naController.transitionToRoute('blogPost', 1, {\n  queryParams: {showComments: 'true'}\n});\n\n// if you just want to transition the query parameters without changing the route\naController.transitionToRoute({queryParams: {sort: 'date'}});\n```\n\nSee also [replaceRoute](/api/classes/Ember.ControllerMixin.html#method_replaceRoute).",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the route or a URL",
                    "type": "String"
                },
                {
                    "name": "models",
                    "description": "the model(s) or identifier(s) to be used\n  while transitioning to the route.",
                    "type": "...Object"
                },
                {
                    "name": "options",
                    "description": "optional hash with a queryParams property\n  containing a mapping of query parameters",
                    "type": "Object",
                    "optional": true
                }
            ],
            "itemtype": "method",
            "name": "transitionToRoute",
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/ext/controller.js",
            "line": 237,
            "deprecated": true,
            "itemtype": "method",
            "name": "transitionTo",
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/ext/controller.js",
            "line": 247,
            "description": "Transition into another route while replacing the current URL, if possible.\nThis will replace the current history entry instead of adding a new one.\nBeside that, it is identical to `transitionToRoute` in all other respects.\n\n```javascript\naController.replaceRoute('blogPosts');\naController.replaceRoute('blogPosts.recentEntries');\n```\n\nOptionally supply a model for the route in question. The model\nwill be serialized into the URL using the `serialize` hook of\nthe route:\n\n```javascript\naController.replaceRoute('blogPost', aPost);\n```\n\nIf a literal is passed (such as a number or a string), it will\nbe treated as an identifier instead. In this case, the `model`\nhook of the route will be triggered:\n\n```javascript\naController.replaceRoute('blogPost', 1);\n```\n\nMultiple models will be applied last to first recursively up the\nresource tree.\n\n```javascript\nApp.Router.map(function() {\n  this.resource('blogPost', {path:':blogPostId'}, function() {\n    this.resource('blogComment', {path: ':blogCommentId'});\n  });\n});\n\naController.replaceRoute('blogComment', aPost, aComment);\naController.replaceRoute('blogComment', 1, 13);\n```\n\nIt is also possible to pass a URL (a string that starts with a\n`/`). This is intended for testing and debugging purposes and\nshould rarely be used in production code.\n\n```javascript\naController.replaceRoute('/');\naController.replaceRoute('/blog/post/1/comment/13');\n```",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the route or a URL",
                    "type": "String"
                },
                {
                    "name": "models",
                    "description": "the model(s) or identifier(s) to be used\nwhile transitioning to the route.",
                    "type": "...Object"
                }
            ],
            "itemtype": "method",
            "name": "replaceRoute",
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/ext/controller.js",
            "line": 309,
            "deprecated": true,
            "itemtype": "method",
            "name": "replaceWith",
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/api.js",
            "line": 122,
            "description": "This is deprecated in favor of using the container to lookup the location\nimplementation as desired.\n\nFor example:\n\n```javascript\n// Given a location registered as follows:\ncontainer.register('location:history-test', HistoryTestLocation);\n\n// You could create a new instance via:\ncontainer.lookup('location:history-test');\n```",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "an instance of an implementation of the `location` API",
                "type": "Object"
            },
            "deprecated": true,
            "deprecationMessage": "Use the container to lookup the location implementation that you\n need.",
            "class": "Ember.Location",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/api.js",
            "line": 152,
            "description": "This is deprecated in favor of using the container to register the\nlocation implementation as desired.\n\nExample:\n\n```javascript\nApplication.initializer({\n name: \"history-test-location\",\n\n initialize: function(container, application) {\n   application.register('location:history-test', HistoryTestLocation);\n }\n});\n```",
            "itemtype": "method",
            "name": "registerImplementation",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "implementation",
                    "description": "of the `location` API",
                    "type": "Object"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Register your custom location implementation with the\ncontainer directly.",
            "class": "Ember.Location",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/api.js",
            "line": 184,
            "description": "Returns the current `location.hash` by parsing location.href since browsers\ninconsistently URL-decode `location.hash`.\n\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=483304",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getHash",
            "since": "1.4.0",
            "class": "Ember.Location",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/auto_location.js",
            "line": 32,
            "access": "private",
            "tagname": "Attached for mocking in tests",
            "itemtype": "property",
            "name": "location",
            "default": "environment.location",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/auto_location.js",
            "line": 42,
            "access": "private",
            "tagname": "Attached for mocking in tests",
            "since": "1.5.1",
            "itemtype": "property",
            "name": "_history",
            "default": "environment.history",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/auto_location.js",
            "line": 53,
            "access": "private",
            "tagname": "This property is used by router:main to know whether to cancel the routing\nsetup process, which is needed while we redirect the browser.",
            "since": "1.5.1",
            "itemtype": "property",
            "name": "cancelRouterSetup",
            "default": "false",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/auto_location.js",
            "line": 65,
            "access": "private",
            "tagname": "Will be pre-pended to path upon state change.",
            "since": "1.5.1",
            "itemtype": "property",
            "name": "rootURL",
            "default": "'/'",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/auto_location.js",
            "line": 76,
            "access": "private",
            "tagname": "Attached for mocking in tests",
            "since": "1.5.1",
            "itemtype": "property",
            "name": "_HistoryLocation",
            "default": "Ember.HistoryLocation",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/auto_location.js",
            "line": 87,
            "access": "private",
            "tagname": "Attached for mocking in tests",
            "since": "1.5.1",
            "itemtype": "property",
            "name": "_HashLocation",
            "default": "Ember.HashLocation",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/auto_location.js",
            "line": 98,
            "access": "private",
            "tagname": "Attached for mocking in tests",
            "since": "1.5.1",
            "itemtype": "property",
            "name": "_NoneLocation",
            "default": "Ember.NoneLocation",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/auto_location.js",
            "line": 109,
            "access": "private",
            "tagname": "Returns location.origin or builds it if device doesn't support it.",
            "itemtype": "method",
            "name": "_getOrigin",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/auto_location.js",
            "line": 134,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_getSupportsHistory",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/auto_location.js",
            "line": 143,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_getSupportsHashChange",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/auto_location.js",
            "line": 152,
            "access": "private",
            "tagname": "Redirects the browser using location.replace, prepending the location.origin\nto prevent phishing attempts",
            "itemtype": "method",
            "name": "_replacePath",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/auto_location.js",
            "line": 164,
            "since": "1.5.1",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_getRootURL",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/auto_location.js",
            "line": 173,
            "access": "private",
            "tagname": "Returns the current `location.pathname`, normalized for IE inconsistencies.",
            "itemtype": "method",
            "name": "_getPath",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/auto_location.js",
            "line": 190,
            "access": "private",
            "tagname": "Returns normalized location.hash as an alias to Ember.Location._getHash",
            "since": "1.5.1",
            "itemtype": "method",
            "name": "_getHash",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/auto_location.js",
            "line": 200,
            "access": "private",
            "tagname": "Returns location.search",
            "since": "1.5.1",
            "itemtype": "method",
            "name": "_getQuery",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/auto_location.js",
            "line": 212,
            "access": "private",
            "tagname": "Returns the full pathname including query and hash",
            "itemtype": "method",
            "name": "_getFullPath",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/auto_location.js",
            "line": 223,
            "access": "private",
            "tagname": "Returns the current path as it should appear for HistoryLocation supported\nbrowsers. This may very well differ from the real current path (e.g. if it\nstarts off as a hashed URL)",
            "itemtype": "method",
            "name": "_getHistoryPath",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/auto_location.js",
            "line": 272,
            "access": "private",
            "tagname": "Returns the current path as it should appear for HashLocation supported\nbrowsers. This may very well differ from the real current path.",
            "itemtype": "method",
            "name": "_getHashPath",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/auto_location.js",
            "line": 297,
            "description": "Selects the best location option based off browser support and returns an\ninstance of that Location class.",
            "see": [
                "Ember.AutoLocation"
            ],
            "itemtype": "method",
            "name": "create",
            "class": "Ember.AutoLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/hash_location.js",
            "line": 31,
            "access": "private",
            "tagname": "Returns normalized location.hash",
            "since": "1.5.1",
            "itemtype": "method",
            "name": "getHash",
            "class": "Ember.HashLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/hash_location.js",
            "line": 41,
            "description": "Returns the normalized URL, constructed from `location.hash`.\n\ne.g. `#/foo` => `/foo` as well as `#/foo#bar` => `/foo#bar`.\n\nBy convention, hashed paths must begin with a forward slash, otherwise they\nare not treated as a path so we can distinguish intent.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getURL",
            "class": "Ember.HashLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/hash_location.js",
            "line": 71,
            "description": "Set the `location.hash` and remembers what was set. This prevents\n`onUpdateURL` callbacks from triggering when the hash was set by\n`HashLocation`.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setURL",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember.HashLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/hash_location.js",
            "line": 85,
            "description": "Uses location.replace to update the url without a page reload\nor history modification.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "replaceURL",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember.HashLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/hash_location.js",
            "line": 98,
            "description": "Register a callback to be invoked when the hash changes. These\ncallbacks will execute when the user presses the back or forward\nbutton, but not after `setURL` is invoked.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onUpdateURL",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Ember.HashLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/hash_location.js",
            "line": 123,
            "description": "Given a URL, formats it to be placed into the page as part\nof an element's `href` attribute.\n\nThis is used, for example, when using the {{action}} helper\nto generate a URL based on an event.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "formatURL",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember.HashLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/hash_location.js",
            "line": 138,
            "description": "Cleans up the HashLocation event listener.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "willDestroy",
            "class": "Ember.HashLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/history_location.js",
            "line": 33,
            "description": "Used to set state on first call to setURL",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "initState",
            "class": "Ember.HistoryLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/history_location.js",
            "line": 50,
            "description": "Will be pre-pended to path upon state change",
            "itemtype": "property",
            "name": "rootURL",
            "default": "'/'",
            "class": "Ember.HistoryLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/history_location.js",
            "line": 58,
            "description": "Returns the current `location.pathname` without `rootURL` or `baseURL`",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getURL",
            "return": {
                "description": "url",
                "type": "String"
            },
            "class": "Ember.HistoryLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/history_location.js",
            "line": 83,
            "description": "Uses `history.pushState` to update the url without a page reload.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setURL",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember.HistoryLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/history_location.js",
            "line": 99,
            "description": "Uses `history.replaceState` to update the url without a page reload\nor history modification.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "replaceURL",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember.HistoryLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/history_location.js",
            "line": 116,
            "description": "Get the current `history.state`. Checks for if a polyfill is\nrequired and if so fetches this._historyState. The state returned\nfrom getState may be null if an iframe has changed a window's\nhistory.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getState",
            "return": {
                "description": "state",
                "type": "Object"
            },
            "class": "Ember.HistoryLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/history_location.js",
            "line": 134,
            "description": "Pushes a new state.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "pushState",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember.HistoryLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/history_location.js",
            "line": 152,
            "description": "Replaces the current state.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "replaceState",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember.HistoryLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/history_location.js",
            "line": 169,
            "description": "Register a callback to be invoked whenever the browser\nhistory changes, including using forward and back buttons.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onUpdateURL",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Ember.HistoryLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/history_location.js",
            "line": 191,
            "description": "Used when using `{{action}}` helper.  The url is always appended to the rootURL.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "formatURL",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "formatted url",
                "type": "String"
            },
            "class": "Ember.HistoryLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/history_location.js",
            "line": 213,
            "description": "Cleans up the HistoryLocation event listener.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "willDestroy",
            "class": "Ember.HistoryLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/history_location.js",
            "line": 225,
            "access": "private",
            "tagname": "Returns normalized location.hash",
            "itemtype": "method",
            "name": "getHash",
            "class": "Ember.HistoryLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/none_location.js",
            "line": 24,
            "description": "Returns the current path.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getURL",
            "return": {
                "description": "path",
                "type": "String"
            },
            "class": "Ember.NoneLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/none_location.js",
            "line": 35,
            "description": "Set the path and remembers what was set. Using this method\nto change the path will not invoke the `updateURL` callback.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setURL",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember.NoneLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/none_location.js",
            "line": 47,
            "description": "Register a callback to be invoked when the path changes. These\ncallbacks will execute when the user presses the back or forward\nbutton, but not after `setURL` is invoked.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "onUpdateURL",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Ember.NoneLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/none_location.js",
            "line": 60,
            "description": "Sets the path and calls the `updateURL` callback.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "handleURL",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Ember.NoneLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/location/none_location.js",
            "line": 72,
            "description": "Given a URL, formats it to be placed into the page as part\nof an element's `href` attribute.\n\nThis is used, for example, when using the {{action}} helper\nto generate a URL based on an event.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "formatURL",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "url",
                "type": "String"
            },
            "class": "Ember.NoneLocation",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/controller_for.js",
            "line": 6,
            "description": "Finds a controller instance.",
            "itemtype": "method",
            "name": "controllerFor",
            "access": "private",
            "tagname": "",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "packages/ember-routing/lib/system/generate_controller.js",
            "line": 10,
            "description": "Generates a controller factory\n\nThe type of the generated controller factory is derived\nfrom the context. If the context is an array an array controller\nis generated, if an object, an object controller otherwise, a basic\ncontroller is generated.\n\nYou can customize your generated controllers by defining\n`App.ObjectController` or `App.ArrayController`.",
            "itemtype": "method",
            "name": "generateControllerFactory",
            "access": "private",
            "tagname": "",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "packages/ember-routing/lib/system/generate_controller.js",
            "line": 53,
            "description": "Generates and instantiates a controller.\n\nThe type of the generated controller factory is derived\nfrom the context. If the context is an array an array controller\nis generated, if an object, an object controller otherwise, a basic\ncontroller is generated.",
            "itemtype": "method",
            "name": "generateController",
            "access": "private",
            "tagname": "",
            "since": "1.3.0",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-routing"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 46,
            "description": "Configuration hash for this route's queryParams. The possible\nconfiguration options and their defaults are as follows\n(assuming a query param whose URL key is `page`):\n\n```javascript\nqueryParams: {\n  page: {\n    // By default, controller query param properties don't\n    // cause a full transition when they are changed, but\n    // rather only cause the URL to update. Setting\n    // `refreshModel` to true will cause an \"in-place\"\n    // transition to occur, whereby the model hooks for\n    // this route (and any child routes) will re-fire, allowing\n    // you to reload models (e.g., from the server) using the\n    // updated query param values.\n    refreshModel: false,\n\n    // By default, changes to controller query param properties\n    // cause the URL to update via `pushState`, which means an\n    // item will be added to the browser's history, allowing\n    // you to use the back button to restore the app to the\n    // previous state before the query param property was changed.\n    // Setting `replace` to true will use `replaceState` (or its\n    // hash location equivalent), which causes no browser history\n    // item to be added. This options name and default value are\n    // the same as the `link-to` helper's `replace` option.\n    replace: false\n  }\n}\n```",
            "itemtype": "property",
            "name": "queryParams",
            "type": "Hash",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 84,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_qp",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 154,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_names",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 161,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_stashNames",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 194,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_updateSerializedQPValue",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 204,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_activeQPChanged",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 215,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_updatingQPChanged",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 229,
            "description": "Retrieves parameters, for current route using the state.params\nvariable and getQueryParamsFor, using the supplied routeName.",
            "itemtype": "method",
            "name": "paramsFor",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 254,
            "description": "Serializes the query parameter key",
            "itemtype": "method",
            "name": "serializeQueryParamKey",
            "params": [
                {
                    "name": "controllerPropertyName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 264,
            "description": "Serializes value of the query parameter based on defaultValueType",
            "itemtype": "method",
            "name": "serializeQueryParam",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "urlKey",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "defaultValueType",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 282,
            "description": "Deserializes value of the query parameter based on defaultValueType",
            "itemtype": "method",
            "name": "deserializeQueryParam",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "urlKey",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "defaultValueType",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 308,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_fireQueryParamTransition",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 317,
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_optionsForQueryParam",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 326,
            "description": "A hook you can use to reset controller values either when the model\nchanges or the route is exiting.\n\n```javascript\nApp.ArticlesRoute = Ember.Route.extend({\n  // ...\n\n  resetController: function (controller, isExiting, transition) {\n    if (isExiting) {\n      controller.set('page', 1);\n    }\n  }\n});\n```",
            "itemtype": "method",
            "name": "resetController",
            "params": [
                {
                    "name": "controller",
                    "description": "instance",
                    "type": "Controller"
                },
                {
                    "name": "isExiting",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "transition",
                    "description": "",
                    "type": "Object"
                }
            ],
            "since": "1.7.0",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 350,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "exit",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 361,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_reset",
            "since": "1.7.0",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 375,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "enter",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 386,
            "description": "The name of the view to use by default when rendering this routes template.\n\nWhen rendering a template, the route will, by default, determine the\ntemplate and view to use from the name of the route itself. If you need to\ndefine a specific view, set this property.\n\nThis is useful when multiple routes would benefit from using the same view\nbecause it doesn't require a custom `renderTemplate` method. For example,\nthe following routes will all render using the `App.PostsListView` view:\n\n```javascript\nvar PostsList = Ember.Route.extend({\n  viewName: 'postsList'\n});\n\nApp.PostsIndexRoute = PostsList.extend();\nApp.PostsArchivedRoute = PostsList.extend();\n```",
            "itemtype": "property",
            "name": "viewName",
            "type": "String",
            "default": "null",
            "since": "1.4.0",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 413,
            "description": "The name of the template to use by default when rendering this routes\ntemplate.\n\nThis is similar with `viewName`, but is useful when you just want a custom\ntemplate without a view.\n\n```javascript\nvar PostsList = Ember.Route.extend({\n  templateName: 'posts/list'\n});\n\nApp.PostsIndexRoute = PostsList.extend();\nApp.PostsArchivedRoute = PostsList.extend();\n```",
            "itemtype": "property",
            "name": "templateName",
            "type": "String",
            "default": "null",
            "since": "1.4.0",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 436,
            "description": "The name of the controller to associate with this route.\n\nBy default, Ember will lookup a route's controller that matches the name\nof the route (i.e. `App.PostController` for `App.PostRoute`). However,\nif you would like to define a specific controller to use, you can do so\nusing this property.\n\nThis is useful in many ways, as the controller specified will be:\n\n* passed to the `setupController` method.\n* used as the controller for the view being rendered by the route.\n* returned from a call to `controllerFor` for the route.",
            "itemtype": "property",
            "name": "controllerName",
            "type": "String",
            "default": "null",
            "since": "1.4.0",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 457,
            "description": "The `willTransition` action is fired at the beginning of any\nattempted transition with a `Transition` object as the sole\nargument. This action can be used for aborting, redirecting,\nor decorating the transition from the currently active routes.\n\nA good example is preventing navigation when a form is\nhalf-filled out:\n\n```javascript\nApp.ContactFormRoute = Ember.Route.extend({\n  actions: {\n    willTransition: function(transition) {\n      if (this.controller.get('userHasEnteredData')) {\n        this.controller.displayNavigationConfirm();\n        transition.abort();\n      }\n    }\n  }\n});\n```\n\nYou can also redirect elsewhere by calling\n`this.transitionTo('elsewhere')` from within `willTransition`.\nNote that `willTransition` will not be fired for the\nredirecting `transitionTo`, since `willTransition` doesn't\nfire when there is already a transition underway. If you want\nsubsequent `willTransition` actions to fire for the redirecting\ntransition, you must first explicitly call\n`transition.abort()`.",
            "itemtype": "event",
            "name": "willTransition",
            "params": [
                {
                    "name": "transition",
                    "description": "",
                    "type": "Transition"
                }
            ],
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 492,
            "description": "The `didTransition` action is fired after a transition has\nsuccessfully been completed. This occurs after the normal model\nhooks (`beforeModel`, `model`, `afterModel`, `setupController`)\nhave resolved. The `didTransition` action has no arguments,\nhowever, it can be useful for tracking page views or resetting\nstate on the controller.\n\n```javascript\nApp.LoginRoute = Ember.Route.extend({\n  actions: {\n    didTransition: function() {\n      this.controller.get('errors.base').clear();\n      return true; // Bubble the didTransition event\n    }\n  }\n});\n```",
            "itemtype": "event",
            "name": "didTransition",
            "since": "1.2.0",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 515,
            "description": "The `loading` action is fired on the route when a route's `model`\nhook returns a promise that is not already resolved. The current\n`Transition` object is the first parameter and the route that\ntriggered the loading event is the second parameter.\n\n```javascript\nApp.ApplicationRoute = Ember.Route.extend({\n  actions: {\n    loading: function(transition, route) {\n      var view = Ember.View.create({\n        classNames: ['app-loading']\n      })\n      .append();\n\n      this.router.one('didTransition', function() {\n        view.destroy();\n      });\n\n      return true; // Bubble the loading event\n    }\n  }\n});\n```",
            "itemtype": "event",
            "name": "loading",
            "params": [
                {
                    "name": "transition",
                    "description": "",
                    "type": "Transition"
                },
                {
                    "name": "route",
                    "description": "The route that triggered the loading event",
                    "type": "Ember.Route"
                }
            ],
            "since": "1.2.0",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 546,
            "description": "When attempting to transition into a route, any of the hooks\nmay return a promise that rejects, at which point an `error`\naction will be fired on the partially-entered routes, allowing\nfor per-route error handling logic, or shared error handling\nlogic defined on a parent route.\n\nHere is an example of an error handler that will be invoked\nfor rejected promises from the various hooks on the route,\nas well as any unhandled errors from child routes:\n\n```javascript\nApp.AdminRoute = Ember.Route.extend({\n  beforeModel: function() {\n    return Ember.RSVP.reject('bad things!');\n  },\n\n  actions: {\n    error: function(error, transition) {\n      // Assuming we got here due to the error in `beforeModel`,\n      // we can expect that error === \"bad things!\",\n      // but a promise model rejecting would also\n      // call this hook, as would any errors encountered\n      // in `afterModel`.\n\n      // The `error` hook is also provided the failed\n      // `transition`, which can be stored and later\n      // `.retry()`d if desired.\n\n      this.transitionTo('login');\n    }\n  }\n});\n```\n\n`error` actions that bubble up all the way to `ApplicationRoute`\nwill fire a default error handler that logs the error. You can\nspecify your own global default error handler by overriding the\n`error` handler on `ApplicationRoute`:\n\n```javascript\nApp.ApplicationRoute = Ember.Route.extend({\n  actions: {\n    error: function(error, transition) {\n      this.controllerFor('banner').displayError(error.message);\n    }\n  }\n});\n```",
            "itemtype": "event",
            "name": "error",
            "params": [
                {
                    "name": "error",
                    "description": "",
                    "type": "Error"
                },
                {
                    "name": "transition",
                    "description": "",
                    "type": "Transition"
                }
            ],
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 600,
            "description": "This event is triggered when the router enters the route. It is\nnot executed when the model for the route changes.\n\n```javascript\nApp.ApplicationRoute = Ember.Route.extend({\n  collectAnalytics: function(){\n    collectAnalytics();\n  }.on('activate')\n});\n```",
            "itemtype": "event",
            "name": "activate",
            "since": "1.9.0",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 616,
            "description": "This event is triggered when the router completely exits this\nroute. It is not executed when the model for the route changes.\n\n```javascript\nApp.IndexRoute = Ember.Route.extend({\n  trackPageLeaveAnalytics: function(){\n    trackPageLeaveAnalytics();\n  }.on('deactivate')\n});\n```",
            "itemtype": "event",
            "name": "deactivate",
            "since": "1.9.0",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 632,
            "description": "The controller associated with this route.\n\nExample\n\n```javascript\nApp.FormRoute = Ember.Route.extend({\n  actions: {\n    willTransition: function(transition) {\n      if (this.controller.get('userHasEnteredData') &&\n          !confirm('Are you sure you want to abandon progress?')) {\n        transition.abort();\n      } else {\n        // Bubble the `willTransition` action so that\n        // parent routes can decide whether or not to abort.\n        return true;\n      }\n    }\n  }\n});\n```",
            "itemtype": "property",
            "name": "controller",
            "type": "Ember.Controller",
            "since": "1.6.0",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 759,
            "deprecated": true,
            "deprecationMessage": "Please use `actions` instead.",
            "itemtype": "method",
            "name": "events",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 767,
            "description": "This hook is executed when the router completely exits this route. It is\nnot executed when the model for the route changes.",
            "itemtype": "method",
            "name": "deactivate",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 775,
            "description": "This hook is executed when the router enters the route. It is not executed\nwhen the model for the route changes.",
            "itemtype": "method",
            "name": "activate",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 783,
            "description": "Transition the application into another route. The route may\nbe either a single route or route path:\n\n```javascript\nthis.transitionTo('blogPosts');\nthis.transitionTo('blogPosts.recentEntries');\n```\n\nOptionally supply a model for the route in question. The model\nwill be serialized into the URL using the `serialize` hook of\nthe route:\n\n```javascript\nthis.transitionTo('blogPost', aPost);\n```\n\nIf a literal is passed (such as a number or a string), it will\nbe treated as an identifier instead. In this case, the `model`\nhook of the route will be triggered:\n\n```javascript\nthis.transitionTo('blogPost', 1);\n```\n\nMultiple models will be applied last to first recursively up the\nresource tree.\n\n```javascript\nApp.Router.map(function() {\n  this.resource('blogPost', { path:':blogPostId' }, function() {\n    this.resource('blogComment', { path: ':blogCommentId' });\n  });\n});\n\nthis.transitionTo('blogComment', aPost, aComment);\nthis.transitionTo('blogComment', 1, 13);\n```\n\nIt is also possible to pass a URL (a string that starts with a\n`/`). This is intended for testing and debugging purposes and\nshould rarely be used in production code.\n\n```javascript\nthis.transitionTo('/');\nthis.transitionTo('/blog/post/1/comment/13');\nthis.transitionTo('/blog/posts?sort=title');\n```\n\nAn options hash with a `queryParams` property may be provided as\nthe final argument to add query parameters to the destination URL.\n\n```javascript\nthis.transitionTo('blogPost', 1, {\n  queryParams: {showComments: 'true'}\n});\n\n// if you just want to transition the query parameters without changing the route\nthis.transitionTo({queryParams: {sort: 'date'}});\n```\n\nSee also 'replaceWith'.\n\nSimple Transition Example\n\n```javascript\nApp.Router.map(function() {\n  this.route('index');\n  this.route('secret');\n  this.route('fourOhFour', { path: '*:' });\n});\n\nApp.IndexRoute = Ember.Route.extend({\n  actions: {\n    moveToSecret: function(context) {\n      if (authorized()) {\n        this.transitionTo('secret', context);\n      } else {\n        this.transitionTo('fourOhFour');\n      }\n    }\n  }\n});\n```\n\nTransition to a nested route\n\n```javascript\nApp.Router.map(function() {\n  this.resource('articles', { path: '/articles' }, function() {\n    this.route('new');\n  });\n});\n\nApp.IndexRoute = Ember.Route.extend({\n  actions: {\n    transitionToNewArticle: function() {\n      this.transitionTo('articles.new');\n    }\n  }\n});\n```\n\nMultiple Models Example\n\n```javascript\nApp.Router.map(function() {\n  this.route('index');\n\n  this.resource('breakfast', { path: ':breakfastId' }, function() {\n    this.resource('cereal', { path: ':cerealId' });\n  });\n});\n\nApp.IndexRoute = Ember.Route.extend({\n  actions: {\n    moveToChocolateCereal: function() {\n      var cereal = { cerealId: 'ChocolateYumminess' };\n      var breakfast = { breakfastId: 'CerealAndMilk' };\n\n      this.transitionTo('cereal', breakfast, cereal);\n    }\n  }\n});\n```\n\nNested Route with Query String Example\n\n```javascript\nApp.Router.map(function() {\n  this.resource('fruits', function() {\n    this.route('apples');\n  });\n});\n\nApp.IndexRoute = Ember.Route.extend({\n  actions: {\n    transitionToApples: function() {\n      this.transitionTo('fruits.apples', {queryParams: {color: 'red'}});\n    }\n  }\n});\n```",
            "itemtype": "method",
            "name": "transitionTo",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the route or a URL",
                    "type": "String"
                },
                {
                    "name": "models",
                    "description": "the model(s) or identifier(s) to be used while\n  transitioning to the route.",
                    "type": "...Object"
                },
                {
                    "name": "options",
                    "description": "optional hash with a queryParams property\n  containing a mapping of query parameters",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "the transition object associated with this\n  attempted transition",
                "type": "Transition"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 941,
            "description": "Perform a synchronous transition into another route without attempting\nto resolve promises, update the URL, or abort any currently active\nasynchronous transitions (i.e. regular transitions caused by\n`transitionTo` or URL changes).\n\nThis method is handy for performing intermediate transitions on the\nway to a final destination route, and is called internally by the\ndefault implementations of the `error` and `loading` handlers.",
            "itemtype": "method",
            "name": "intermediateTransitionTo",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the route",
                    "type": "String"
                },
                {
                    "name": "models",
                    "description": "the model(s) to be used while transitioning\nto the route.",
                    "type": "...Object"
                }
            ],
            "since": "1.2.0",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 962,
            "description": "Refresh the model on this route and any child routes, firing the\n`beforeModel`, `model`, and `afterModel` hooks in a similar fashion\nto how routes are entered when transitioning in from other route.\nThe current route params (e.g. `article_id`) will be passed in\nto the respective model hooks, and if a different model is returned,\n`setupController` and associated route hooks will re-fire as well.\n\nAn example usage of this method is re-querying the server for the\nlatest information using the same parameters as when the route\nwas first entered.\n\nNote that this will cause `model` hooks to fire even on routes\nthat were provided a model object when the route was initially\nentered.",
            "itemtype": "method",
            "name": "refresh",
            "return": {
                "description": "the transition object associated with this\n  attempted transition",
                "type": "Transition"
            },
            "since": "1.4.0",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 987,
            "description": "Transition into another route while replacing the current URL, if possible.\nThis will replace the current history entry instead of adding a new one.\nBeside that, it is identical to `transitionTo` in all other respects. See\n'transitionTo' for additional information regarding multiple models.\n\nExample\n\n```javascript\nApp.Router.map(function() {\n  this.route('index');\n  this.route('secret');\n});\n\nApp.SecretRoute = Ember.Route.extend({\n  afterModel: function() {\n    if (!authorized()){\n      this.replaceWith('index');\n    }\n  }\n});\n```",
            "itemtype": "method",
            "name": "replaceWith",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the route or a URL",
                    "type": "String"
                },
                {
                    "name": "models",
                    "description": "the model(s) or identifier(s) to be used while\n  transitioning to the route.",
                    "type": "...Object"
                }
            ],
            "return": {
                "description": "the transition object associated with this\n  attempted transition",
                "type": "Transition"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 1022,
            "description": "Sends an action to the router, which will delegate it to the currently\nactive route hierarchy per the bubbling rules explained under `actions`.\n\nExample\n\n```javascript\nApp.Router.map(function() {\n  this.route('index');\n});\n\nApp.ApplicationRoute = Ember.Route.extend({\n  actions: {\n    track: function(arg) {\n      console.log(arg, 'was clicked');\n    }\n  }\n});\n\nApp.IndexRoute = Ember.Route.extend({\n  actions: {\n    trackIfDebug: function(arg) {\n      if (debug) {\n        this.send('track', arg);\n      }\n    }\n  }\n});\n```",
            "itemtype": "method",
            "name": "send",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the action to trigger",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "",
                    "type": "...*"
                }
            ],
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 1069,
            "description": "This hook is the entry point for router.js",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setup",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 1116,
            "description": "This hook is the first of the route entry validation hooks\ncalled when an attempt is made to transition into a route\nor one of its children. It is called before `model` and\n`afterModel`, and is appropriate for cases when:\n\n1) A decision can be made to redirect elsewhere without\n   needing to resolve the model first.\n2) Any async operations need to occur first before the\n   model is attempted to be resolved.\n\nThis hook is provided the current `transition` attempt\nas a parameter, which can be used to `.abort()` the transition,\nsave it for a later `.retry()`, or retrieve values set\non it from a previous hook. You can also just call\n`this.transitionTo` to another route to implicitly\nabort the `transition`.\n\nYou can return a promise from this hook to pause the\ntransition until the promise resolves (or rejects). This could\nbe useful, for instance, for retrieving async code from\nthe server that is required to enter a route.\n\n```javascript\nApp.PostRoute = Ember.Route.extend({\n  beforeModel: function(transition) {\n    if (!App.Post) {\n      return Ember.$.getScript('/models/post.js');\n    }\n  }\n});\n```\n\nIf `App.Post` doesn't exist in the above example,\n`beforeModel` will use jQuery's `getScript`, which\nreturns a promise that resolves after the server has\nsuccessfully retrieved and executed the code from the\nserver. Note that if an error were to occur, it would\nbe passed to the `error` hook on `Ember.Route`, but\nit's also possible to handle errors specific to\n`beforeModel` right from within the hook (to distinguish\nfrom the shared error handling behavior of the `error`\nhook):\n\n```javascript\nApp.PostRoute = Ember.Route.extend({\n  beforeModel: function(transition) {\n    if (!App.Post) {\n      var self = this;\n      return Ember.$.getScript('post.js').then(null, function(e) {\n        self.transitionTo('help');\n\n        // Note that the above transitionTo will implicitly\n        // halt the transition. If you were to return\n        // nothing from this promise reject handler,\n        // according to promise semantics, that would\n        // convert the reject into a resolve and the\n        // transition would continue. To propagate the\n        // error so that it'd be handled by the `error`\n        // hook, you would have to\n        return Ember.RSVP.reject(e);\n      });\n    }\n  }\n});\n```",
            "itemtype": "method",
            "name": "beforeModel",
            "params": [
                {
                    "name": "transition",
                    "description": "",
                    "type": "Transition"
                }
            ],
            "return": {
                "description": "if the value returned from this hook is\n  a promise, the transition will pause until the transition\n  resolves. Otherwise, non-promise return values are not\n  utilized in any way.",
                "type": "Promise"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 1192,
            "description": "This hook is called after this route's model has resolved.\nIt follows identical async/promise semantics to `beforeModel`\nbut is provided the route's resolved model in addition to\nthe `transition`, and is therefore suited to performing\nlogic that can only take place after the model has already\nresolved.\n\n```javascript\nApp.PostsRoute = Ember.Route.extend({\n  afterModel: function(posts, transition) {\n    if (posts.get('length') === 1) {\n      this.transitionTo('post.show', posts.get('firstObject'));\n    }\n  }\n});\n```\n\nRefer to documentation for `beforeModel` for a description\nof transition-pausing semantics when a promise is returned\nfrom this hook.",
            "itemtype": "method",
            "name": "afterModel",
            "params": [
                {
                    "name": "resolvedModel",
                    "description": "the value returned from `model`,\n  or its resolved value if it was a promise",
                    "type": "Object"
                },
                {
                    "name": "transition",
                    "description": "",
                    "type": "Transition"
                }
            ],
            "return": {
                "description": "if the value returned from this hook is\n  a promise, the transition will pause until the transition\n  resolves. Otherwise, non-promise return values are not\n  utilized in any way.",
                "type": "Promise"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 1225,
            "description": "A hook you can implement to optionally redirect to another route.\n\nIf you call `this.transitionTo` from inside of this hook, this route\nwill not be entered in favor of the other hook.\n\n`redirect` and `afterModel` behave very similarly and are\ncalled almost at the same time, but they have an important\ndistinction in the case that, from one of these hooks, a\nredirect into a child route of this route occurs: redirects\nfrom `afterModel` essentially invalidate the current attempt\nto enter this route, and will result in this route's `beforeModel`,\n`model`, and `afterModel` hooks being fired again within\nthe new, redirecting transition. Redirects that occur within\nthe `redirect` hook, on the other hand, will _not_ cause\nthese hooks to be fired again the second time around; in\nother words, by the time the `redirect` hook has been called,\nboth the resolved model and attempted entry into this route\nare considered to be fully validated.",
            "itemtype": "method",
            "name": "redirect",
            "params": [
                {
                    "name": "model",
                    "description": "the model for this route",
                    "type": "Object"
                },
                {
                    "name": "transition",
                    "description": "the transition object associated with the current transition",
                    "type": "Transition"
                }
            ],
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 1251,
            "description": "Called when the context is changed by router.js.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "contextDidChange",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 1261,
            "description": "A hook you can implement to convert the URL into the model for\nthis route.\n\n```javascript\nApp.Router.map(function() {\n  this.resource('post', { path: '/posts/:post_id' });\n});\n```\n\nThe model for the `post` route is `store.find('post', params.post_id)`.\n\nBy default, if your route has a dynamic segment ending in `_id`:\n\n* The model class is determined from the segment (`post_id`'s\n  class is `App.Post`)\n* The find method is called on the model class with the value of\n  the dynamic segment.\n\nNote that for routes with dynamic segments, this hook is not always\nexecuted. If the route is entered through a transition (e.g. when\nusing the `link-to` Handlebars helper or the `transitionTo` method\nof routes), and a model context is already provided this hook\nis not called.\n\nA model context does not include a primitive string or number,\nwhich does cause the model hook to be called.\n\nRoutes without dynamic segments will always execute the model hook.\n\n```javascript\n// no dynamic segment, model hook always called\nthis.transitionTo('posts');\n\n// model passed in, so model hook not called\nthePost = store.find('post', 1);\nthis.transitionTo('post', thePost);\n\n// integer passed in, model hook is called\nthis.transitionTo('post', 1);\n```\n\n\nThis hook follows the asynchronous/promise semantics\ndescribed in the documentation for `beforeModel`. In particular,\nif a promise returned from `model` fails, the error will be\nhandled by the `error` hook on `Ember.Route`.\n\nExample\n\n```javascript\nApp.PostRoute = Ember.Route.extend({\n  model: function(params) {\n    return this.store.find('post', params.post_id);\n  }\n});\n```",
            "itemtype": "method",
            "name": "model",
            "params": [
                {
                    "name": "params",
                    "description": "the parameters extracted from the URL",
                    "type": "Object"
                },
                {
                    "name": "transition",
                    "description": "",
                    "type": "Transition"
                }
            ],
            "return": {
                "description": "the model for this route. If\n  a promise is returned, the transition will pause until\n  the promise resolves, and the resolved value of the promise\n  will be used as the model for this route.",
                "type": "Object|Promise"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 1357,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "params",
                    "description": "the parameters extracted from the URL",
                    "type": "Object"
                },
                {
                    "name": "transition",
                    "description": "",
                    "type": "Transition"
                }
            ],
            "return": {
                "description": "the model for this route.\n\nRouter.js hook.",
                "type": "Object|Promise"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 1370,
            "itemtype": "method",
            "name": "findModel",
            "params": [
                {
                    "name": "type",
                    "description": "the model type",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value passed to find",
                    "type": "Object"
                }
            ],
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 1381,
            "description": "Store property provides a hook for data persistence libraries to inject themselves.\n\nBy default, this store property provides the exact same functionality previously\nin the model hook.\n\nCurrently, the required interface is:\n\n`store.find(modelName, findArguments)`",
            "itemtype": "method",
            "name": "store",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 1417,
            "description": "A hook you can implement to convert the route's model into parameters\nfor the URL.\n\n```javascript\nApp.Router.map(function() {\n  this.resource('post', { path: '/posts/:post_id' });\n});\n\nApp.PostRoute = Ember.Route.extend({\n  model: function(params) {\n    // the server returns `{ id: 12 }`\n    return Ember.$.getJSON('/posts/' + params.post_id);\n  },\n\n  serialize: function(model) {\n    // this will make the URL `/posts/12`\n    return { post_id: model.id };\n  }\n});\n```\n\nThe default `serialize` method will insert the model's `id` into the\nroute's dynamic segment (in this case, `:post_id`) if the segment contains '_id'.\nIf the route has multiple dynamic segments or does not contain '_id', `serialize`\nwill return `Ember.getProperties(model, params)`\n\nThis method is called when `transitionTo` is called with a context\nin order to populate the URL.",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "model",
                    "description": "the route's model",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "an Array of parameter names for the current\n  route (in the example, `['post_id']`.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "the serialized parameters",
                "type": "Object"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 1473,
            "description": "A hook you can use to setup the controller for the current route.\n\nThis method is called with the controller for the current route and the\nmodel supplied by the `model` hook.\n\nBy default, the `setupController` hook sets the `model` property of\nthe controller to the `model`.\n\nIf you implement the `setupController` hook in your Route, it will\nprevent this default behavior. If you want to preserve that behavior\nwhen implementing your `setupController` function, make sure to call\n`_super`:\n\n```javascript\nApp.PhotosRoute = Ember.Route.extend({\n  model: function() {\n    return this.store.find('photo');\n  },\n\n  setupController: function (controller, model) {\n    // Call _super for default behavior\n    this._super(controller, model);\n    // Implement your custom setup after\n    this.controllerFor('application').set('showingPhotos', true);\n  }\n});\n```\n\nThis means that your template will get a proxy for the model as its\ncontext, and you can act as though the model itself was the context.\n\nThe provided controller will be one resolved based on the name\nof this route.\n\nIf no explicit controller is defined, Ember will automatically create\nan appropriate controller for the model.\n\n* if the model is an `Ember.Array` (including record arrays from Ember\n  Data), the controller is an `Ember.ArrayController`.\n* otherwise, the controller is an `Ember.ObjectController`.\n\nAs an example, consider the router:\n\n```javascript\nApp.Router.map(function() {\n  this.resource('post', { path: '/posts/:post_id' });\n});\n```\n\nFor the `post` route, a controller named `App.PostController` would\nbe used if it is defined. If it is not defined, an `Ember.ObjectController`\ninstance would be used.\n\nExample\n\n```javascript\nApp.PostRoute = Ember.Route.extend({\n  setupController: function(controller, model) {\n    controller.set('model', model);\n  }\n});\n```",
            "itemtype": "method",
            "name": "setupController",
            "params": [
                {
                    "name": "controller",
                    "description": "instance",
                    "type": "Controller"
                },
                {
                    "name": "model",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 1547,
            "description": "Returns the controller for a particular route or name.\n\nThe controller instance must already have been created, either through entering the\nassociated route or using `generateController`.\n\n```javascript\nApp.PostRoute = Ember.Route.extend({\n  setupController: function(controller, post) {\n    this._super(controller, post);\n    this.controllerFor('posts').set('currentPost', post);\n  }\n});\n```",
            "itemtype": "method",
            "name": "controllerFor",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the route or controller",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Ember.Controller"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 1589,
            "description": "Generates a controller for a route.\n\nIf the optional model is passed then the controller type is determined automatically,\ne.g., an ArrayController for arrays.\n\nExample\n\n```javascript\nApp.PostRoute = Ember.Route.extend({\n  setupController: function(controller, post) {\n    this._super(controller, post);\n    this.generateController('posts', post);\n  }\n});\n```",
            "itemtype": "method",
            "name": "generateController",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the controller",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "the model to infer the type of the controller (optional)",
                    "type": "Object"
                }
            ],
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 1618,
            "description": "Returns the model of a parent (or any ancestor) route\nin a route hierarchy.  During a transition, all routes\nmust resolve a model object, and if a route\nneeds access to a parent route's model in order to\nresolve a model (or just reuse the model from a parent),\nit can call `this.modelFor(theNameOfParentRoute)` to\nretrieve it.\n\nExample\n\n```javascript\nApp.Router.map(function() {\n    this.resource('post', { path: '/post/:post_id' }, function() {\n        this.resource('comments');\n    });\n});\n\nApp.CommentsRoute = Ember.Route.extend({\n    afterModel: function() {\n        this.set('post', this.modelFor('post'));\n    }\n});\n```",
            "itemtype": "method",
            "name": "modelFor",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the route",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the model object",
                "type": "Object"
            },
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 1663,
            "description": "A hook you can use to render the template for the current route.\n\nThis method is called with the controller for the current route and the\nmodel supplied by the `model` hook. By default, it renders the route's\ntemplate, configured with the controller for the route.\n\nThis method can be overridden to set up and render additional or\nalternative templates.\n\n```javascript\nApp.PostsRoute = Ember.Route.extend({\n  renderTemplate: function(controller, model) {\n    var favController = this.controllerFor('favoritePost');\n\n    // Render the `favoritePost` template into\n    // the outlet `posts`, and display the `favoritePost`\n    // controller.\n    this.render('favoritePost', {\n      outlet: 'posts',\n      controller: favController\n    });\n  }\n});\n```",
            "itemtype": "method",
            "name": "renderTemplate",
            "params": [
                {
                    "name": "controller",
                    "description": "the route's controller",
                    "type": "Object"
                },
                {
                    "name": "model",
                    "description": "the route's model",
                    "type": "Object"
                }
            ],
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 1697,
            "description": "`render` is used to render a template into a region of another template\n(indicated by an `{{outlet}}`). `render` is used both during the entry\nphase of routing (via the `renderTemplate` hook) and later in response to\nuser interaction.\n\nFor example, given the following minimal router and templates:\n\n```javascript\nRouter.map(function() {\n  this.resource('photos');\n});\n```\n\n```handlebars\n<!-- application.hbs -->\n<div class='something-in-the-app-hbs'>\n  {{outlet \"anOutletName\"}}\n</div>\n```\n\n```handlebars\n<!-- photos.hbs -->\n<h1>Photos</h1>\n```\n\nYou can render `photos.hbs` into the `\"anOutletName\"` outlet of\n`application.hbs` by calling `render`:\n\n```javascript\n// posts route\nEmber.Route.extend({\n  renderTemplate: function() {\n    this.render('photos', {\n      into: 'application',\n      outlet: 'anOutletName'\n    })\n  }\n});\n```\n\n`render` additionally allows you to supply which `view`, `controller`, and\n`model` objects should be loaded and associated with the rendered template.\n\n\n```javascript\n// posts route\nEmber.Route.extend({\n  renderTemplate: function(controller, model){\n    this.render('posts', {    // the template to render, referenced by name\n      into: 'application',    // the template to render into, referenced by name\n      outlet: 'anOutletName', // the outlet inside `options.template` to render into.\n      view: 'aViewName',      // the view to use for this template, referenced by name\n      controller: 'someControllerName', // the controller to use for this template, referenced by name\n      model: model            // the model to set on `options.controller`.\n    })\n  }\n});\n```\n\nThe string values provided for the template name, view, and controller\nwill eventually pass through to the resolver for lookup. See\nEmber.Resolver for how these are mapped to JavaScript objects in your\napplication.\n\nNot all options need to be passed to `render`. Default values will be used\nbased on the name of the route specified in the router or the Route's\n`controllerName`, `viewName` and `templateName` properties.\n\nFor example:\n\n```javascript\n// router\nRouter.map(function() {\n  this.route('index');\n  this.resource('post', { path: '/posts/:post_id' });\n});\n```\n\n```javascript\n// post route\nPostRoute = App.Route.extend({\n  renderTemplate: function() {\n    this.render(); // all defaults apply\n  }\n});\n```\n\nThe name of the `PostRoute`, defined by the router, is `post`.\n\nThe following equivalent default options will be applied when\nthe Route calls `render`:\n\n```javascript\n//\nthis.render('post', {  // the template name associated with 'post' Route\n  into: 'application', // the parent route to 'post' Route\n  outlet: 'main',      // {{outlet}} and {{outlet 'main' are synonymous}},\n  view: 'post',        // the view associated with the 'post' Route\n  controller: 'post',  // the controller associated with the 'post' Route\n})\n```\n\nBy default the controller's `model` will be the route's model, so it does not\nneed to be passed unless you wish to change which model is being used.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the template to render",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "the options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "into",
                            "description": "the template to render into,\n                referenced by name. Defaults to the parent template",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "outlet",
                            "description": "the outlet inside `options.template` to render into.\n                Defaults to 'main'",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "controller",
                            "description": "the controller to use for this template,\n                referenced by name or as a controller instance. Defaults to the Route's paired controller",
                            "type": "String|Object",
                            "optional": true
                        },
                        {
                            "name": "model",
                            "description": "the model object to set on `options.controller`.\n                Defaults to the return value of the Route's model hook",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 1834,
            "description": "Disconnects a view that has been rendered into an outlet.\n\nYou may pass any or all of the following options to `disconnectOutlet`:\n\n* `outlet`: the name of the outlet to clear (default: 'main')\n* `parentView`: the name of the view containing the outlet to clear\n   (default: the view rendered by the parent route)\n\nExample:\n\n```javascript\nApp.ApplicationRoute = App.Route.extend({\n  actions: {\n    showModal: function(evt) {\n      this.render(evt.modalName, {\n        outlet: 'modal',\n        into: 'application'\n      });\n    },\n    hideModal: function(evt) {\n      this.disconnectOutlet({\n        outlet: 'modal',\n        parentView: 'application'\n      });\n    }\n  }\n});\n```\n\nAlternatively, you can pass the `outlet` name directly as a string.\n\nExample:\n\n```javascript\nhideModal: function(evt) {\n  this.disconnectOutlet('modal');\n}\n```",
            "itemtype": "method",
            "name": "disconnectOutlet",
            "params": [
                {
                    "name": "options",
                    "description": "the options hash or outlet name",
                    "type": "Object|String"
                }
            ],
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/route.js",
            "line": 1927,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "teardownViews",
            "class": "Ember.Route",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/router.js",
            "line": 46,
            "description": "The `location` property determines the type of URL's that your\napplication will use.\n\nThe following location types are currently available:\n\n* `hash`\n* `history`\n* `none`",
            "itemtype": "property",
            "name": "location",
            "default": "'hash'",
            "see": [
                "{Ember.Location}"
            ],
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/router.js",
            "line": 62,
            "description": "Represents the URL of the root of the application, often '/'. This prefix is\nassumed on all routes defined on this router.",
            "itemtype": "property",
            "name": "rootURL",
            "default": "'/'",
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/router.js",
            "line": 107,
            "description": "Represents the current URL.",
            "itemtype": "method",
            "name": "url",
            "return": {
                "description": "The current URL.",
                "type": "String"
            },
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/router.js",
            "line": 117,
            "description": "Initializes the current router instance and sets up the change handling\nevent listeners used by the instances `location` implementation.\n\nA property named `initialURL` will be used to determine the initial URL.\nIf no value is found `/` will be used.",
            "itemtype": "method",
            "name": "startRouting",
            "access": "private",
            "tagname": "",
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/router.js",
            "line": 164,
            "description": "Handles updating the paths and notifying any listeners of the URL\nchange.\n\nTriggers the router level `didTransition` hook.",
            "itemtype": "method",
            "name": "didTransition",
            "access": "private",
            "tagname": "",
            "since": "1.2.0",
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/router.js",
            "line": 226,
            "description": "Handles notifying any listeners of an impending URL\nchange.\n\nTriggers the router level `willTransition` hook.",
            "itemtype": "method",
            "name": "willTransition",
            "access": "private",
            "tagname": "",
            "since": "1.11.0",
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/router.js",
            "line": 295,
            "description": "Determines if the supplied route is currently active.",
            "itemtype": "method",
            "name": "isActive",
            "params": [
                {
                    "name": "routeName",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/router.js",
            "line": 308,
            "description": "An alternative form of `isActive` that doesn't require\nmanual concatenation of the arguments into a single\narray.",
            "itemtype": "method",
            "name": "isActiveIntent",
            "params": [
                {
                    "name": "routeName",
                    "description": ""
                },
                {
                    "name": "models",
                    "description": ""
                },
                {
                    "name": "queryParams",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "since": "1.7.0",
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/router.js",
            "line": 329,
            "description": "Does this router instance have the given route.",
            "itemtype": "method",
            "name": "hasRoute",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/router.js",
            "line": 340,
            "description": "Resets the state of the router by clearing the current route\nhandlers and deactivating them.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "reset",
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/router.js",
            "line": 554,
            "description": "Returns a merged query params meta object for a given route.\nUseful for asking a route what its known query params are.",
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-routing/lib/system/router.js",
            "line": 892,
            "description": "The `Router.map` function allows you to define mappings from URLs to routes\nand resources in your application. These mappings are defined within the\nsupplied callback function using `this.resource` and `this.route`.\n\n```javascript\nApp.Router.map(function({\n  this.route('about');\n  this.resource('article');\n}));\n```\n\nFor more detailed examples please see\n[the guides](http://emberjs.com/guides/routing/defining-your-routes/).",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "class": "Ember.Router",
            "module": "ember",
            "submodule": "ember-routing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/computed/array_computed.js",
            "line": 53,
            "description": "Creates a computed property which operates on dependent arrays and\nis updated with \"one at a time\" semantics. When items are added or\nremoved from the dependent array(s) an array computed only operates\non the change instead of re-evaluating the entire array. This should\nreturn an array, if you'd like to use \"one at a time\" semantics and\ncompute some value other then an array look at\n`Ember.reduceComputed`.\n\nIf there are more than one arguments the first arguments are\nconsidered to be dependent property keys. The last argument is\nrequired to be an options object. The options object can have the\nfollowing three properties.\n\n`initialize` - An optional initialize function. Typically this will be used\nto set up state on the instanceMeta object.\n\n`removedItem` - A function that is called each time an element is\nremoved from the array.\n\n`addedItem` - A function that is called each time an element is\nadded to the array.\n\n\nThe `initialize` function has the following signature:\n\n```javascript\nfunction(array, changeMeta, instanceMeta)\n```\n\n`array` - The initial value of the arrayComputed, an empty array.\n\n`changeMeta` - An object which contains meta information about the\ncomputed. It contains the following properties:\n\n   - `property` the computed property\n   - `propertyName` the name of the property on the object\n\n`instanceMeta` - An object that can be used to store meta\ninformation needed for calculating your computed. For example a\nunique computed might use this to store the number of times a given\nelement is found in the dependent array.\n\n\nThe `removedItem` and `addedItem` functions both have the following signature:\n\n```javascript\nfunction(accumulatedValue, item, changeMeta, instanceMeta)\n```\n\n`accumulatedValue` - The value returned from the last time\n`removedItem` or `addedItem` was called or an empty array.\n\n`item` - the element added or removed from the array\n\n`changeMeta` - An object which contains meta information about the\nchange. It contains the following properties:\n\n  - `property` the computed property\n  - `propertyName` the name of the property on the object\n  - `index` the index of the added or removed item\n  - `item` the added or removed item: this is exactly the same as\n    the second arg\n  - `arrayChanged` the array that triggered the change. Can be\n    useful when depending on multiple arrays.\n\nFor property changes triggered on an item property change (when\ndepKey is something like `someArray.@each.someProperty`),\n`changeMeta` will also contain the following property:\n\n  - `previousValues` an object whose keys are the properties that changed on\n  the item, and whose values are the item's previous values.\n\n`previousValues` is important Ember coalesces item property changes via\nEmber.run.once. This means that by the time removedItem gets called, item has\nthe new values, but you may need the previous value (eg for sorting &\nfiltering).\n\n`instanceMeta` - An object that can be used to store meta\ninformation needed for calculating your computed. For example a\nunique computed might use this to store the number of times a given\nelement is found in the dependent array.\n\nThe `removedItem` and `addedItem` functions should return the accumulated\nvalue. It is acceptable to not return anything (ie return undefined)\nto invalidate the computation. This is generally not a good idea for\narrayComputed but it's used in eg max and min.\n\nExample\n\n```javascript\nEmber.computed.map = function(dependentKey, callback) {\n  var options = {\n    addedItem: function(array, item, changeMeta, instanceMeta) {\n      var mapped = callback(item);\n      array.insertAt(changeMeta.index, mapped);\n      return array;\n    },\n    removedItem: function(array, item, changeMeta, instanceMeta) {\n      array.removeAt(changeMeta.index, 1);\n      return array;\n    }\n  };\n\n  return Ember.arrayComputed(dependentKey, options);\n};\n```",
            "itemtype": "method",
            "name": "arrayComputed",
            "params": [
                {
                    "name": "dependentKeys*",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember",
            "module": "ember"
        },
        {
            "file": "packages/ember-runtime/lib/computed/reduce_computed.js",
            "line": 657,
            "description": "Creates a computed property which operates on dependent arrays and\nis updated with \"one at a time\" semantics. When items are added or\nremoved from the dependent array(s) a reduce computed only operates\non the change instead of re-evaluating the entire array.\n\nIf there are more than one arguments the first arguments are\nconsidered to be dependent property keys. The last argument is\nrequired to be an options object. The options object can have the\nfollowing four properties:\n\n`initialValue` - A value or function that will be used as the initial\nvalue for the computed. If this property is a function the result of calling\nthe function will be used as the initial value. This property is required.\n\n`initialize` - An optional initialize function. Typically this will be used\nto set up state on the instanceMeta object.\n\n`removedItem` - A function that is called each time an element is removed\nfrom the array.\n\n`addedItem` - A function that is called each time an element is added to\nthe array.\n\n\nThe `initialize` function has the following signature:\n\n```javascript\nfunction(initialValue, changeMeta, instanceMeta)\n```\n\n`initialValue` - The value of the `initialValue` property from the\noptions object.\n\n`changeMeta` - An object which contains meta information about the\ncomputed. It contains the following properties:\n\n   - `property` the computed property\n   - `propertyName` the name of the property on the object\n\n`instanceMeta` - An object that can be used to store meta\ninformation needed for calculating your computed. For example a\nunique computed might use this to store the number of times a given\nelement is found in the dependent array.\n\n\nThe `removedItem` and `addedItem` functions both have the following signature:\n\n```javascript\nfunction(accumulatedValue, item, changeMeta, instanceMeta)\n```\n\n`accumulatedValue` - The value returned from the last time\n`removedItem` or `addedItem` was called or `initialValue`.\n\n`item` - the element added or removed from the array\n\n`changeMeta` - An object which contains meta information about the\nchange. It contains the following properties:\n\n  - `property` the computed property\n  - `propertyName` the name of the property on the object\n  - `index` the index of the added or removed item\n  - `item` the added or removed item: this is exactly the same as\n    the second arg\n  - `arrayChanged` the array that triggered the change. Can be\n    useful when depending on multiple arrays.\n\nFor property changes triggered on an item property change (when\ndepKey is something like `someArray.@each.someProperty`),\n`changeMeta` will also contain the following property:\n\n  - `previousValues` an object whose keys are the properties that changed on\n  the item, and whose values are the item's previous values.\n\n`previousValues` is important Ember coalesces item property changes via\nEmber.run.once. This means that by the time removedItem gets called, item has\nthe new values, but you may need the previous value (eg for sorting &\nfiltering).\n\n`instanceMeta` - An object that can be used to store meta\ninformation needed for calculating your computed. For example a\nunique computed might use this to store the number of times a given\nelement is found in the dependent array.\n\nThe `removedItem` and `addedItem` functions should return the accumulated\nvalue. It is acceptable to not return anything (ie return undefined)\nto invalidate the computation. This is generally not a good idea for\narrayComputed but it's used in eg max and min.\n\nNote that observers will be fired if either of these functions return a value\nthat differs from the accumulated value.  When returning an object that\nmutates in response to array changes, for example an array that maps\neverything from some other array (see `Ember.computed.map`), it is usually\nimportant that the *same* array be returned to avoid accidentally triggering observers.\n\nExample\n\n```javascript\nEmber.computed.max = function(dependentKey) {\n  return Ember.reduceComputed(dependentKey, {\n    initialValue: -Infinity,\n\n    addedItem: function(accumulatedValue, item, changeMeta, instanceMeta) {\n      return Math.max(accumulatedValue, item);\n    },\n\n    removedItem: function(accumulatedValue, item, changeMeta, instanceMeta) {\n      if (item < accumulatedValue) {\n        return accumulatedValue;\n      }\n    }\n  });\n};\n```\n\nDependent keys may refer to `@this` to observe changes to the object itself,\nwhich must be array-like, rather than a property of the object.  This is\nmostly useful for array proxies, to ensure objects are retrieved via\n`objectAtContent`.  This is how you could sort items by properties defined on an item controller.\n\nExample\n\n```javascript\nApp.PeopleController = Ember.ArrayController.extend({\n  itemController: 'person',\n\n  sortedPeople: Ember.computed.sort('@this.@each.reversedName', function(personA, personB) {\n    // `reversedName` isn't defined on Person, but we have access to it via\n    // the item controller App.PersonController.  If we'd used\n    // `content.@each.reversedName` above, we would be getting the objects\n    // directly and not have access to `reversedName`.\n    //\n    var reversedNameA = get(personA, 'reversedName');\n    var reversedNameB = get(personB, 'reversedName');\n\n    return Ember.compare(reversedNameA, reversedNameB);\n  })\n});\n\nApp.PersonController = Ember.ObjectController.extend({\n  reversedName: function() {\n    return reverse(get(this, 'name'));\n  }.property('name')\n});\n```\n\nDependent keys whose values are not arrays are treated as regular\ndependencies: when they change, the computed property is completely\nrecalculated.  It is sometimes useful to have dependent arrays with similar\nsemantics.  Dependent keys which end in `.[]` do not use \"one at a time\"\nsemantics.  When an item is added or removed from such a dependency, the\ncomputed property is completely recomputed.\n\nWhen the computed property is completely recomputed, the `accumulatedValue`\nis discarded, it starts with `initialValue` again, and each item is passed\nto `addedItem` in turn.\n\nExample\n\n```javascript\nEmber.Object.extend({\n  // When `string` is changed, `computed` is completely recomputed.\n  string: 'a string',\n\n  // When an item is added to `array`, `addedItem` is called.\n  array: [],\n\n  // When an item is added to `anotherArray`, `computed` is completely\n  // recomputed.\n  anotherArray: [],\n\n  computed: Ember.reduceComputed('string', 'array', 'anotherArray.[]', {\n    addedItem: addedItemCallback,\n    removedItem: removedItemCallback\n  })\n});\n```",
            "itemtype": "method",
            "name": "reduceComputed",
            "params": [
                {
                    "name": "dependentKeys*",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember",
            "module": "ember"
        },
        {
            "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
            "line": 26,
            "description": "A computed property that returns the sum of the value\nin the dependent array.",
            "itemtype": "method",
            "name": "sum",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "computes the sum of all values in the dependentKey's array",
                "type": "Ember.ComputedProperty"
            },
            "since": "1.4.0",
            "class": "Ember.computed",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
            "line": 51,
            "description": "A computed property that calculates the maximum value in the\ndependent array. This will return `-Infinity` when the dependent\narray is empty.\n\n```javascript\nvar Person = Ember.Object.extend({\n  childAges: Ember.computed.mapBy('children', 'age'),\n  maxChildAge: Ember.computed.max('childAges')\n});\n\nvar lordByron = Person.create({ children: [] });\n\nlordByron.get('maxChildAge'); // -Infinity\nlordByron.get('children').pushObject({\n  name: 'Augusta Ada Byron', age: 7\n});\nlordByron.get('maxChildAge'); // 7\nlordByron.get('children').pushObjects([{\n  name: 'Allegra Byron',\n  age: 5\n}, {\n  name: 'Elizabeth Medora Leigh',\n  age: 8\n}]);\nlordByron.get('maxChildAge'); // 8\n```",
            "itemtype": "method",
            "name": "max",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "computes the largest value in the dependentKey's array",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
            "line": 100,
            "description": "A computed property that calculates the minimum value in the\ndependent array. This will return `Infinity` when the dependent\narray is empty.\n\n```javascript\nvar Person = Ember.Object.extend({\n  childAges: Ember.computed.mapBy('children', 'age'),\n  minChildAge: Ember.computed.min('childAges')\n});\n\nvar lordByron = Person.create({ children: [] });\n\nlordByron.get('minChildAge'); // Infinity\nlordByron.get('children').pushObject({\n  name: 'Augusta Ada Byron', age: 7\n});\nlordByron.get('minChildAge'); // 7\nlordByron.get('children').pushObjects([{\n  name: 'Allegra Byron',\n  age: 5\n}, {\n  name: 'Elizabeth Medora Leigh',\n  age: 8\n}]);\nlordByron.get('minChildAge'); // 5\n```",
            "itemtype": "method",
            "name": "min",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "computes the smallest value in the dependentKey's array",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
            "line": 149,
            "description": "Returns an array mapped via the callback\n\nThe callback method you provide should have the following signature.\n`item` is the current item in the iteration.\n`index` is the integer index of the current item in the iteration.\n\n```javascript\nfunction(item, index);\n```\n\nExample\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  excitingChores: Ember.computed.map('chores', function(chore, index) {\n    return chore.toUpperCase() + '!';\n  })\n});\n\nvar hamster = Hamster.create({\n  chores: ['clean', 'write more unit tests']\n});\n\nhamster.get('excitingChores'); // ['CLEAN!', 'WRITE MORE UNIT TESTS!']\n```",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "an array mapped via the callback",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
            "line": 198,
            "description": "Returns an array mapped to the specified key.\n\n```javascript\nvar Person = Ember.Object.extend({\n  childAges: Ember.computed.mapBy('children', 'age')\n});\n\nvar lordByron = Person.create({ children: [] });\n\nlordByron.get('childAges'); // []\nlordByron.get('children').pushObject({ name: 'Augusta Ada Byron', age: 7 });\nlordByron.get('childAges'); // [7]\nlordByron.get('children').pushObjects([{\n  name: 'Allegra Byron',\n  age: 5\n}, {\n  name: 'Elizabeth Medora Leigh',\n  age: 8\n}]);\nlordByron.get('childAges'); // [7, 5, 8]\n```",
            "itemtype": "method",
            "name": "mapBy",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "propertyKey",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "an array mapped to the specified key",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
            "line": 232,
            "itemtype": "method",
            "name": "mapProperty",
            "deprecated": true,
            "deprecationMessage": "Use `Ember.computed.mapBy` instead",
            "params": [
                {
                    "name": "dependentKey",
                    "description": ""
                },
                {
                    "name": "propertyKey",
                    "description": ""
                }
            ],
            "class": "Ember.computed",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
            "line": 241,
            "description": "Filters the array by the callback.\n\nThe callback method you provide should have the following signature.\n`item` is the current item in the iteration.\n`index` is the integer index of the current item in the iteration.\n`array` is the dependant array itself.\n\n```javascript\nfunction(item, index, array);\n```\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  remainingChores: Ember.computed.filter('chores', function(chore, index, array) {\n    return !chore.done;\n  })\n});\n\nvar hamster = Hamster.create({\n  chores: [\n    { name: 'cook', done: true },\n    { name: 'clean', done: true },\n    { name: 'write more unit tests', done: false }\n  ]\n});\n\nhamster.get('remainingChores'); // [{name: 'write more unit tests', done: false}]\n```",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "the filtered array",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
            "line": 308,
            "description": "Filters the array by the property and value\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  remainingChores: Ember.computed.filterBy('chores', 'done', false)\n});\n\nvar hamster = Hamster.create({\n  chores: [\n    { name: 'cook', done: true },\n    { name: 'clean', done: true },\n    { name: 'write more unit tests', done: false }\n  ]\n});\n\nhamster.get('remainingChores'); // [{ name: 'write more unit tests', done: false }]\n```",
            "itemtype": "method",
            "name": "filterBy",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "propertyKey",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "the filtered array",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
            "line": 350,
            "itemtype": "method",
            "name": "filterProperty",
            "params": [
                {
                    "name": "dependentKey",
                    "description": ""
                },
                {
                    "name": "propertyKey",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Use `Ember.computed.filterBy` instead",
            "class": "Ember.computed",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
            "line": 360,
            "description": "A computed property which returns a new array with all the unique\nelements from one or more dependent arrays.\n\nExample\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  uniqueFruits: Ember.computed.uniq('fruits')\n});\n\nvar hamster = Hamster.create({\n  fruits: [\n    'banana',\n    'grape',\n    'kale',\n    'banana'\n  ]\n});\n\nhamster.get('uniqueFruits'); // ['banana', 'grape', 'kale']\n```",
            "itemtype": "method",
            "name": "uniq",
            "params": [
                {
                    "name": "propertyKey",
                    "description": "",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "computes a new array with all the\nunique elements from the dependent array",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
            "line": 424,
            "description": "Alias for [Ember.computed.uniq](/api/#method_computed_uniq).",
            "itemtype": "method",
            "name": "union",
            "params": [
                {
                    "name": "propertyKey",
                    "description": "",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "computes a new array with all the\nunique elements from the dependent array",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
            "line": 435,
            "description": "A computed property which returns a new array with all the duplicated\nelements from two or more dependent arrays.\n\nExample\n\n```javascript\nvar obj = Ember.Object.createWithMixins({\n  adaFriends: ['Charles Babbage', 'John Hobhouse', 'William King', 'Mary Somerville'],\n  charlesFriends: ['William King', 'Mary Somerville', 'Ada Lovelace', 'George Peacock'],\n  friendsInCommon: Ember.computed.intersect('adaFriends', 'charlesFriends')\n});\n\nobj.get('friendsInCommon'); // ['William King', 'Mary Somerville']\n```",
            "itemtype": "method",
            "name": "intersect",
            "params": [
                {
                    "name": "propertyKey",
                    "description": "",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "computes a new array with all the\nduplicated elements from the dependent arrays",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
            "line": 515,
            "description": "A computed property which returns a new array with all the\nproperties from the first dependent array that are not in the second\ndependent array.\n\nExample\n\n```javascript\nvar Hamster = Ember.Object.extend({\n  likes: ['banana', 'grape', 'kale'],\n  wants: Ember.computed.setDiff('likes', 'fruits')\n});\n\nvar hamster = Hamster.create({\n  fruits: [\n    'grape',\n    'kale',\n  ]\n});\n\nhamster.get('wants'); // ['banana']\n```",
            "itemtype": "method",
            "name": "setDiff",
            "params": [
                {
                    "name": "setAProperty",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "setBProperty",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "computes a new array with all the\nitems from the first dependent array that are not in the second\ndependent array",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/computed/reduce_computed_macros.js",
            "line": 626,
            "description": "A computed property which returns a new array with all the\nproperties from the first dependent array sorted based on a property\nor sort function.\n\nThe callback method you provide should have the following signature:\n\n```javascript\nfunction(itemA, itemB);\n```\n\n- `itemA` the first item to compare.\n- `itemB` the second item to compare.\n\nThis function should return negative number (e.g. `-1`) when `itemA` should come before\n`itemB`. It should return positive number (e.g. `1`) when `itemA` should come after\n`itemB`. If the `itemA` and `itemB` are equal this function should return `0`.\n\nTherefore, if this function is comparing some numeric values, simple `itemA - itemB` or\n`itemA.get( 'foo' ) - itemB.get( 'foo' )` can be used instead of series of `if`.\n\nExample\n\n```javascript\nvar ToDoList = Ember.Object.extend({\n  // using standard ascending sort\n  todosSorting: ['name'],\n  sortedTodos: Ember.computed.sort('todos', 'todosSorting'),\n\n  // using descending sort\n  todosSortingDesc: ['name:desc'],\n  sortedTodosDesc: Ember.computed.sort('todos', 'todosSortingDesc'),\n\n  // using a custom sort function\n  priorityTodos: Ember.computed.sort('todos', function(a, b){\n    if (a.priority > b.priority) {\n      return 1;\n    } else if (a.priority < b.priority) {\n      return -1;\n    }\n\n    return 0;\n  })\n});\n\nvar todoList = ToDoList.create({todos: [\n  { name: 'Unit Test', priority: 2 },\n  { name: 'Documentation', priority: 3 },\n  { name: 'Release', priority: 1 }\n]});\n\ntodoList.get('sortedTodos');      // [{ name:'Documentation', priority:3 }, { name:'Release', priority:1 }, { name:'Unit Test', priority:2 }]\ntodoList.get('sortedTodosDesc');  // [{ name:'Unit Test', priority:2 }, { name:'Release', priority:1 }, { name:'Documentation', priority:3 }]\ntodoList.get('priorityTodos');    // [{ name:'Release', priority:1 }, { name:'Unit Test', priority:2 }, { name:'Documentation', priority:3 }]\n```",
            "itemtype": "method",
            "name": "sort",
            "params": [
                {
                    "name": "dependentKey",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "sortDefinition",
                    "description": "a dependent key to an\narray of sort properties (add `:desc` to the arrays sort properties to sort descending) or a function to use when sorting",
                    "type": "String or Function"
                }
            ],
            "return": {
                "description": "computes a new sorted array based\non the sort property array or callback function",
                "type": "Ember.ComputedProperty"
            },
            "class": "Ember.computed",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/controllers/array_controller.js",
            "line": 108,
            "description": "A string containing the controller name used to wrap items.\n\nFor example:\n\n```javascript\nApp.MyArrayController = Ember.ArrayController.extend({\n  itemController: 'myItem' // use App.MyItemController\n});\n```",
            "itemtype": "property",
            "name": "itemController",
            "type": "String",
            "default": "null",
            "class": "Ember.ArrayController",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/controllers/array_controller.js",
            "line": 125,
            "description": "Return the name of the controller to wrap items, or `null` if items should\nbe returned directly.  The default implementation simply returns the\n`itemController` property, but subclasses can override this method to return\ndifferent controllers for different objects.\n\nFor example:\n\n```javascript\nApp.MyArrayController = Ember.ArrayController.extend({\n  lookupItemController: function( object ) {\n    if (object.get('isSpecial')) {\n      return \"special\"; // use App.SpecialController\n    } else {\n      return \"regular\"; // use App.RegularController\n    }\n  }\n});\n```",
            "itemtype": "method",
            "name": "lookupItemController",
            "params": [
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Ember.ArrayController",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/controllers/array_controller.js",
            "line": 221,
            "description": "Flag to mark as being \"virtual\". Used to keep this instance\nfrom participating in the parentController hierarchy.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_isVirtual",
            "type": "Boolean",
            "class": "Ember.ArrayController",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/controllers/controller.js",
            "line": 24,
            "description": "Creates a property that lazily looks up another controller in the container.\nCan only be used when defining another controller.\n\nExample:\n\n```javascript\nApp.PostController = Ember.Controller.extend({\n  posts: Ember.inject.controller()\n});\n```\n\nThis example will create a `posts` property on the `post` controller that\nlooks up the `posts` controller in the container, making it easy to\nreference other controllers. This is functionally equivalent to:\n\n```javascript\nApp.PostController = Ember.Controller.extend({\n  needs: 'posts',\n  posts: Ember.computed.alias('controllers.posts')\n});\n```",
            "itemtype": "method",
            "name": "controller",
            "since": "1.10.0",
            "params": [
                {
                    "name": "name",
                    "description": "(optional) name of the controller to inject, defaults\n       to the property's name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "injection descriptor instance",
                "type": "Ember.InjectedProperty"
            },
            "class": "Ember.inject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/ext/function.js",
            "line": 16,
            "description": "The `property` extension of Javascript's Function prototype is available\nwhen `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Function` is\n`true`, which is the default.\n\nComputed properties allow you to treat a function like a property:\n\n```javascript\nMyApp.President = Ember.Object.extend({\n  firstName: '',\n  lastName:  '',\n\n  fullName: function() {\n    return this.get('firstName') + ' ' + this.get('lastName');\n  }.property() // Call this flag to mark the function as a property\n});\n\nvar president = MyApp.President.create({\n  firstName: 'Barack',\n  lastName: 'Obama'\n});\n\npresident.get('fullName'); // 'Barack Obama'\n```\n\nTreating a function like a property is useful because they can work with\nbindings, just like any other property.\n\nMany computed properties have dependencies on other properties. For\nexample, in the above example, the `fullName` property depends on\n`firstName` and `lastName` to determine its value. You can tell Ember\nabout these dependencies like this:\n\n```javascript\nMyApp.President = Ember.Object.extend({\n  firstName: '',\n  lastName:  '',\n\n  fullName: function() {\n    return this.get('firstName') + ' ' + this.get('lastName');\n\n    // Tell Ember.js that this computed property depends on firstName\n    // and lastName\n  }.property('firstName', 'lastName')\n});\n```\n\nMake sure you list these dependencies so Ember knows when to update\nbindings that connect to a computed property. Changing a dependency\nwill not immediately trigger an update of the computed property, but\nwill instead clear the cache so that it is updated when the next `get`\nis called on the property.\n\nSee [Ember.ComputedProperty](/api/classes/Ember.ComputedProperty.html), [Ember.computed](/api/#method_computed).",
            "itemtype": "method",
            "name": "property",
            "class": "Function",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/ext/function.js",
            "line": 81,
            "description": "The `observes` extension of Javascript's Function prototype is available\nwhen `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Function` is\ntrue, which is the default.\n\nYou can observe property changes simply by adding the `observes`\ncall to the end of your method declarations in classes that you write.\nFor example:\n\n```javascript\nEmber.Object.extend({\n  valueObserver: function() {\n    // Executes whenever the \"value\" property changes\n  }.observes('value')\n});\n```\n\nIn the future this method may become asynchronous. If you want to ensure\nsynchronous behavior, use `observesImmediately`.\n\nSee `Ember.observer`.",
            "itemtype": "method",
            "name": "observes",
            "class": "Function",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/ext/function.js",
            "line": 115,
            "description": "The `observesImmediately` extension of Javascript's Function prototype is\navailable when `Ember.EXTEND_PROTOTYPES` or\n`Ember.EXTEND_PROTOTYPES.Function` is true, which is the default.\n\nYou can observe property changes simply by adding the `observesImmediately`\ncall to the end of your method declarations in classes that you write.\nFor example:\n\n```javascript\nEmber.Object.extend({\n  valueObserver: function() {\n    // Executes immediately after the \"value\" property changes\n  }.observesImmediately('value')\n});\n```\n\nIn the future, `observes` may become asynchronous. In this event,\n`observesImmediately` will maintain the synchronous behavior.\n\nSee `Ember.immediateObserver`.",
            "itemtype": "method",
            "name": "observesImmediately",
            "class": "Function",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/ext/function.js",
            "line": 155,
            "description": "The `observesBefore` extension of Javascript's Function prototype is\navailable when `Ember.EXTEND_PROTOTYPES` or\n`Ember.EXTEND_PROTOTYPES.Function` is true, which is the default.\n\nYou can get notified when a property change is about to happen by\nby adding the `observesBefore` call to the end of your method\ndeclarations in classes that you write. For example:\n\n```javascript\nEmber.Object.extend({\n  valueObserver: function() {\n    // Executes whenever the \"value\" property is about to change\n  }.observesBefore('value')\n});\n```\n\nSee `Ember.beforeObserver`.",
            "itemtype": "method",
            "name": "observesBefore",
            "class": "Function",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/ext/function.js",
            "line": 192,
            "description": "The `on` extension of Javascript's Function prototype is available\nwhen `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Function` is\ntrue, which is the default.\n\nYou can listen for events simply by adding the `on` call to the end of\nyour method declarations in classes or mixins that you write. For example:\n\n```javascript\nEmber.Mixin.create({\n  doSomethingWithElement: function() {\n    // Executes whenever the \"didInsertElement\" event fires\n  }.on('didInsertElement')\n});\n```\n\nSee `Ember.on`.",
            "itemtype": "method",
            "name": "on",
            "class": "Function",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/ext/string.js",
            "line": 23,
            "description": "See [Ember.String.fmt](/api/classes/Ember.String.html#method_fmt).",
            "itemtype": "method",
            "name": "fmt",
            "class": "String",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/ext/string.js",
            "line": 33,
            "description": "See [Ember.String.w](/api/classes/Ember.String.html#method_w).",
            "itemtype": "method",
            "name": "w",
            "class": "String",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/ext/string.js",
            "line": 43,
            "description": "See [Ember.String.loc](/api/classes/Ember.String.html#method_loc).",
            "itemtype": "method",
            "name": "loc",
            "class": "String",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/ext/string.js",
            "line": 53,
            "description": "See [Ember.String.camelize](/api/classes/Ember.String.html#method_camelize).",
            "itemtype": "method",
            "name": "camelize",
            "class": "String",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/ext/string.js",
            "line": 63,
            "description": "See [Ember.String.decamelize](/api/classes/Ember.String.html#method_decamelize).",
            "itemtype": "method",
            "name": "decamelize",
            "class": "String",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/ext/string.js",
            "line": 73,
            "description": "See [Ember.String.dasherize](/api/classes/Ember.String.html#method_dasherize).",
            "itemtype": "method",
            "name": "dasherize",
            "class": "String",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/ext/string.js",
            "line": 83,
            "description": "See [Ember.String.underscore](/api/classes/Ember.String.html#method_underscore).",
            "itemtype": "method",
            "name": "underscore",
            "class": "String",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/ext/string.js",
            "line": 93,
            "description": "See [Ember.String.classify](/api/classes/Ember.String.html#method_classify).",
            "itemtype": "method",
            "name": "classify",
            "class": "String",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/ext/string.js",
            "line": 103,
            "description": "See [Ember.String.capitalize](/api/classes/Ember.String.html#method_capitalize).",
            "itemtype": "method",
            "name": "capitalize",
            "class": "String",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/-proxy.js",
            "line": 45,
            "description": "The object whose properties will be forwarded.",
            "itemtype": "property",
            "name": "content",
            "type": "Ember.Object",
            "default": "null",
            "class": "Ember.ProxyMixin",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/action_handler.js",
            "line": 28,
            "description": "The collection of functions, keyed by name, available on this\n`ActionHandler` as action targets.\n\nThese functions will be invoked when a matching `{{action}}` is triggered\nfrom within a template and the application's current route is this route.\n\nActions can also be invoked from other parts of your application\nvia `ActionHandler#send`.\n\nThe `actions` hash will inherit action handlers from\nthe `actions` hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:\n\n```js\nApp.CanDisplayBanner = Ember.Mixin.create({\n  actions: {\n    displayBanner: function(msg) {\n      // ...\n    }\n  }\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\n  actions: {\n    playMusic: function() {\n      // ...\n    }\n  }\n});\n\n// `WelcomeRoute`, when active, will be able to respond\n// to both actions, since the actions hash is merged rather\n// then replaced when extending mixins / parent classes.\nthis.send('displayBanner');\nthis.send('playMusic');\n```\n\nWithin a Controller, Route, View or Component's action handler,\nthe value of the `this` context is the Controller, Route, View or\nComponent object:\n\n```js\nApp.SongRoute = Ember.Route.extend({\n  actions: {\n    myAction: function() {\n      this.controllerFor(\"song\");\n      this.transitionTo(\"other.route\");\n      ...\n    }\n  }\n});\n```\n\nIt is also possible to call `this._super.apply(this, arguments)` from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:\n\nTake for example the following routes:\n\n```js\nApp.DebugRoute = Ember.Mixin.create({\n  actions: {\n    debugRouteInformation: function() {\n      console.debug(\"trololo\");\n    }\n  }\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\n  actions: {\n    debugRouteInformation: function() {\n      // also call the debugRouteInformation of mixed in App.DebugRoute\n      this._super.apply(this, arguments);\n\n      // show additional annoyance\n      window.alert(...);\n    }\n  }\n});\n```\n\n## Bubbling\n\nBy default, an action will stop bubbling once a handler defined\non the `actions` hash handles it. To continue bubbling the action,\nyou must return `true` from the handler:\n\n```js\nApp.Router.map(function() {\n  this.resource(\"album\", function() {\n    this.route(\"song\");\n  });\n});\n\nApp.AlbumRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: function() {\n    }\n  }\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\n  actions: {\n    startPlaying: function() {\n      // ...\n\n      if (actionShouldAlsoBeTriggeredOnParentRoute) {\n        return true;\n      }\n    }\n  }\n});\n```",
            "itemtype": "property",
            "name": "actions",
            "type": "Hash",
            "default": "null",
            "class": "Ember.ActionHandler",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/action_handler.js",
            "line": 148,
            "description": "Moves `actions` to `_actions` at extend time. Note that this currently\nmodifies the mixin themselves, which is technically dubious but\nis practically of little consequence. This may change in the future.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "willMergeMixin",
            "class": "Ember.ActionHandler",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/action_handler.js",
            "line": 178,
            "description": "Triggers a named action on the `ActionHandler`. Any parameters\nsupplied after the `actionName` string will be passed as arguments\nto the action target function.\n\nIf the `ActionHandler` has its `target` property set, actions may\nbubble to the `target`. Bubbling happens when an `actionName` can\nnot be found in the `ActionHandler`'s `actions` hash or if the\naction target function returns `true`.\n\nExample\n\n```js\nApp.WelcomeRoute = Ember.Route.extend({\n  actions: {\n    playTheme: function() {\n       this.send('playMusic', 'theme.mp3');\n    },\n    playMusic: function(track) {\n      // ...\n    }\n  }\n});\n```",
            "itemtype": "method",
            "name": "send",
            "params": [
                {
                    "name": "actionName",
                    "description": "The action to trigger",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "a context to send with the action",
                    "type": "*"
                }
            ],
            "class": "Ember.ActionHandler",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/array.js",
            "line": 95,
            "description": "Your array must support the `length` property. Your replace methods should\nset this property whenever it changes.",
            "itemtype": "property",
            "name": "length",
            "type": "Number",
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/array.js",
            "line": 103,
            "description": "Returns the object at the given `index`. If the given `index` is negative\nor is greater or equal than the array length, returns `undefined`.\n\nThis is one of the primitives you must implement to support `Ember.Array`.\nIf your object supports retrieving the value of an array item using `get()`\n(i.e. `myArray.get(0)`), then you do not need to implement this method\nyourself.\n\n```javascript\nvar arr = ['a', 'b', 'c', 'd'];\n\narr.objectAt(0);   // 'a'\narr.objectAt(3);   // 'd'\narr.objectAt(-1);  // undefined\narr.objectAt(4);   // undefined\narr.objectAt(5);   // undefined\n```",
            "itemtype": "method",
            "name": "objectAt",
            "params": [
                {
                    "name": "idx",
                    "description": "The index of the item to return.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "item at index or undefined",
                "type": "*"
            },
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/array.js",
            "line": 134,
            "description": "This returns the objects at the specified indexes, using `objectAt`.\n\n```javascript\nvar arr = ['a', 'b', 'c', 'd'];\n\narr.objectsAt([0, 1, 2]);  // ['a', 'b', 'c']\narr.objectsAt([2, 3, 4]);  // ['c', 'd', undefined]\n```",
            "itemtype": "method",
            "name": "objectsAt",
            "params": [
                {
                    "name": "indexes",
                    "description": "An array of indexes of items to return.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/array.js",
            "line": 161,
            "description": "This is the handler for the special array content property. If you get\nthis property, it will return this. If you set this property to a new\narray, it will replace the current content.\n\nThis property overrides the default property defined in `Ember.Enumerable`.",
            "itemtype": "property",
            "name": "[]",
            "return": {
                "description": "this"
            },
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/array.js",
            "line": 193,
            "description": "Returns a new array that is a slice of the receiver. This implementation\nuses the observable array methods to retrieve the objects for the new\nslice.\n\n```javascript\nvar arr = ['red', 'green', 'blue'];\n\narr.slice(0);       // ['red', 'green', 'blue']\narr.slice(0, 2);    // ['red', 'green']\narr.slice(1, 100);  // ['green', 'blue']\n```",
            "itemtype": "method",
            "name": "slice",
            "params": [
                {
                    "name": "beginIndex",
                    "description": "(Optional) index to begin slicing from.",
                    "type": "Integer"
                },
                {
                    "name": "endIndex",
                    "description": "(Optional) index to end the slice at (but not included).",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "New array with specified slice",
                "type": "Array"
            },
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/array.js",
            "line": 238,
            "description": "Returns the index of the given object's first occurrence.\nIf no `startAt` argument is given, the starting location to\nsearch is 0. If it's negative, will count backward from\nthe end of the array. Returns -1 if no match is found.\n\n```javascript\nvar arr = ['a', 'b', 'c', 'd', 'a'];\n\narr.indexOf('a');       //  0\narr.indexOf('z');       // -1\narr.indexOf('a', 2);    //  4\narr.indexOf('a', -1);   //  4\narr.indexOf('b', 3);    // -1\narr.indexOf('a', 100);  // -1\n```",
            "itemtype": "method",
            "name": "indexOf",
            "params": [
                {
                    "name": "object",
                    "description": "the item to search for",
                    "type": "Object"
                },
                {
                    "name": "startAt",
                    "description": "optional starting location to search, default 0",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "index or -1 if not found",
                "type": "Number"
            },
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/array.js",
            "line": 281,
            "description": "Returns the index of the given object's last occurrence.\nIf no `startAt` argument is given, the search starts from\nthe last position. If it's negative, will count backward\nfrom the end of the array. Returns -1 if no match is found.\n\n```javascript\nvar arr = ['a', 'b', 'c', 'd', 'a'];\n\narr.lastIndexOf('a');       //  4\narr.lastIndexOf('z');       // -1\narr.lastIndexOf('a', 2);    //  0\narr.lastIndexOf('a', -1);   //  4\narr.lastIndexOf('b', 3);    //  1\narr.lastIndexOf('a', 100);  //  4\n```",
            "itemtype": "method",
            "name": "lastIndexOf",
            "params": [
                {
                    "name": "object",
                    "description": "the item to search for",
                    "type": "Object"
                },
                {
                    "name": "startAt",
                    "description": "optional starting location to search, default 0",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "index or -1 if not found",
                "type": "Number"
            },
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/array.js",
            "line": 328,
            "description": "Adds an array observer to the receiving array. The array observer object\nnormally must implement two methods:\n\n* `arrayWillChange(observedObj, start, removeCount, addCount)` - This method will be\n  called just before the array is modified.\n* `arrayDidChange(observedObj, start, removeCount, addCount)` - This method will be\n  called just after the array is modified.\n\nBoth callbacks will be passed the observed object, starting index of the\nchange as well a a count of the items to be removed and added. You can use\nthese callbacks to optionally inspect the array during the change, clear\ncaches, or do any other bookkeeping necessary.\n\nIn addition to passing a target, you can also include an options hash\nwhich you can use to override the method names that will be invoked on the\ntarget.",
            "itemtype": "method",
            "name": "addArrayObserver",
            "params": [
                {
                    "name": "target",
                    "description": "The observer object.",
                    "type": "Object"
                },
                {
                    "name": "opts",
                    "description": "Optional hash of configuration options including\n  `willChange` and `didChange` option.",
                    "type": "Hash"
                }
            ],
            "return": {
                "description": "receiver",
                "type": "Ember.Array"
            },
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/array.js",
            "line": 357,
            "description": "Removes an array observer from the object if the observer is current\nregistered. Calling this method multiple times with the same object will\nhave no effect.",
            "itemtype": "method",
            "name": "removeArrayObserver",
            "params": [
                {
                    "name": "target",
                    "description": "The object observing the array.",
                    "type": "Object"
                },
                {
                    "name": "opts",
                    "description": "Optional hash of configuration options including\n  `willChange` and `didChange` option.",
                    "type": "Hash"
                }
            ],
            "return": {
                "description": "receiver",
                "type": "Ember.Array"
            },
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/array.js",
            "line": 372,
            "description": "Becomes true whenever the array currently has observers watching changes\non the array.",
            "itemtype": "property",
            "name": "hasArrayObservers",
            "type": "Boolean",
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/array.js",
            "line": 382,
            "description": "If you are implementing an object that supports `Ember.Array`, call this\nmethod just before the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.",
            "itemtype": "method",
            "name": "arrayContentWillChange",
            "params": [
                {
                    "name": "startIdx",
                    "description": "The starting index in the array that will change.",
                    "type": "Number"
                },
                {
                    "name": "removeAmt",
                    "description": "The number of items that will be removed. If you\n  pass `null` assumes 0",
                    "type": "Number"
                },
                {
                    "name": "addAmt",
                    "description": "The number of items that will be added. If you\n  pass `null` assumes 0.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "receiver",
                "type": "Ember.Array"
            },
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/array.js",
            "line": 436,
            "description": "If you are implementing an object that supports `Ember.Array`, call this\nmethod just after the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.",
            "itemtype": "method",
            "name": "arrayContentDidChange",
            "params": [
                {
                    "name": "startIdx",
                    "description": "The starting index in the array that did change.",
                    "type": "Number"
                },
                {
                    "name": "removeAmt",
                    "description": "The number of items that were removed. If you\n  pass `null` assumes 0",
                    "type": "Number"
                },
                {
                    "name": "addAmt",
                    "description": "The number of items that were added. If you\n  pass `null` assumes 0.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "receiver",
                "type": "Ember.Array"
            },
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/array.js",
            "line": 502,
            "description": "Returns a special object that can be used to observe individual properties\non the array. Just get an equivalent property on this object and it will\nreturn an enumerable that maps automatically to the named key on the\nmember objects.\n\nIf you merely want to watch for any items being added or removed to the array,\nuse the `[]` property instead of `@each`.",
            "itemtype": "property",
            "name": "@each",
            "class": "Ember.Array",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/comparable.js",
            "line": 23,
            "description": "Override to return the result of the comparison of the two parameters. The\ncompare method should return:\n\n- `-1` if `a < b`\n- `0` if `a == b`\n- `1` if `a > b`\n\nDefault implementation raises an exception.",
            "itemtype": "method",
            "name": "compare",
            "params": [
                {
                    "name": "a",
                    "description": "the first object to compare",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "the second object to compare",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the result of the comparison",
                "type": "Integer"
            },
            "class": "Ember.Comparable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/controller.js",
            "line": 19,
            "description": "The object to which actions from the view should be sent.\n\nFor example, when a Handlebars template uses the `{{action}}` helper,\nit will attempt to send the action to the view's controller's `target`.\n\nBy default, the value of the target property is set to the router, and\nis injected when a controller is instantiated. This injection is defined\nin Ember.Application#buildContainer, and is applied as part of the\napplications initialization process. It can also be set after a controller\nhas been instantiated, for instance when using the render helper in a\ntemplate, or when a controller is used as an `itemController`. In most\ncases the `target` property will automatically be set to the logical\nconsumer of actions for the controller.",
            "itemtype": "property",
            "name": "target",
            "default": "null",
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/controller.js",
            "line": 45,
            "description": "The controller's current model. When retrieving or modifying a controller's\nmodel, this property should be used instead of the `content` property.",
            "itemtype": "property",
            "name": "model",
            "access": "public",
            "tagname": "",
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/controller.js",
            "line": 54,
            "access": "private",
            "tagname": "",
            "class": "Ember.ControllerMixin",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/controller_content_model_alias_deprecation.js",
            "line": 19,
            "access": "private",
            "tagname": "Moves `content` to `model`  at extend time if a `model` is not also specified.\n\nNote that this currently modifies the mixin themselves, which is technically\ndubious but is practically of little consequence. This may change in the\nfuture.",
            "itemtype": "method",
            "name": "willMergeMixin",
            "since": "1.4.0",
            "class": "Ember.Copyable",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/copyable.js",
            "line": 30,
            "description": "Override to return a copy of the receiver. Default implementation raises\nan exception.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "deep",
                    "description": "if `true`, a deep copy of the object should be made",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "copy of receiver",
                "type": "Object"
            },
            "class": "Ember.Copyable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/copyable.js",
            "line": 40,
            "description": "If the object implements `Ember.Freezable`, then this will return a new\ncopy if the object is not frozen and the receiver if the object is frozen.\n\nRaises an exception if you try to call this method on a object that does\nnot support freezing.\n\nYou should use this method whenever you want a copy of a freezable object\nsince a freezable object can simply return itself without actually\nconsuming more memory.",
            "itemtype": "method",
            "name": "frozenCopy",
            "return": {
                "description": "copy of receiver or receiver",
                "type": "Object"
            },
            "class": "Ember.Copyable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/deferred.js",
            "line": 18,
            "description": "Add handlers to be called when the Deferred object is resolved or rejected.",
            "itemtype": "method",
            "name": "then",
            "params": [
                {
                    "name": "resolve",
                    "description": "a callback function to be called when done",
                    "type": "Function"
                },
                {
                    "name": "reject",
                    "description": "a callback function to be called when failed",
                    "type": "Function"
                }
            ],
            "class": "Ember.Deferred",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/deferred.js",
            "line": 43,
            "description": "Resolve a Deferred object and call any `doneCallbacks` with the given args.",
            "itemtype": "method",
            "name": "resolve",
            "class": "Ember.Deferred",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/deferred.js",
            "line": 61,
            "description": "Reject a Deferred object and call any `failCallbacks` with the given args.",
            "itemtype": "method",
            "name": "reject",
            "class": "Ember.Deferred",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 96,
            "description": "Implement this method to make your class enumerable.\n\nThis method will be called repeatedly during enumeration. The index value\nwill always begin with 0 and increment monotonically. You don't have to\nrely on the index value to determine what object to return, but you should\nalways check the value and start from the beginning when you see the\nrequested index is 0.\n\nThe `previousObject` is the object that was returned from the last call\nto `nextObject` for the current iteration. This is a useful way to\nmanage iteration if you are tracing a linked list, for example.\n\nFinally the context parameter will always contain a hash you can use as\na \"scratchpad\" to maintain any other state you need in order to iterate\nproperly. The context object is reused and is not reset between\niterations so make sure you setup the context with a fresh state whenever\nthe index parameter is 0.\n\nGenerally iterators will continue to call `nextObject` until the index\nreaches the your current length-1. If you run out of data before this\ntime for some reason, you should simply return undefined.\n\nThe default implementation of this method simply looks up the index.\nThis works great on any Array-like objects.",
            "itemtype": "method",
            "name": "nextObject",
            "params": [
                {
                    "name": "index",
                    "description": "the current index of the iteration",
                    "type": "Number"
                },
                {
                    "name": "previousObject",
                    "description": "the value returned by the last call to\n  `nextObject`.",
                    "type": "Object"
                },
                {
                    "name": "context",
                    "description": "a context object you can use to maintain state.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the next object in the iteration or undefined",
                "type": "Object"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 131,
            "description": "Helper method returns the first object from a collection. This is usually\nused by bindings and other parts of the framework to extract a single\nobject if the enumerable contains only one item.\n\nIf you override this method, you should implement it so that it will\nalways return the same value each time it is called. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return `undefined`.\n\n```javascript\nvar arr = ['a', 'b', 'c'];\narr.get('firstObject');  // 'a'\n\nvar arr = [];\narr.get('firstObject');  // undefined\n```",
            "itemtype": "property",
            "name": "firstObject",
            "return": {
                "description": "the object or undefined",
                "type": "Object"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 166,
            "description": "Helper method returns the last object from a collection. If your enumerable\ncontains only one object, this method should always return that object.\nIf your enumerable is empty, this method should return `undefined`.\n\n```javascript\nvar arr = ['a', 'b', 'c'];\narr.get('lastObject');  // 'c'\n\nvar arr = [];\narr.get('lastObject');  // undefined\n```",
            "itemtype": "property",
            "name": "lastObject",
            "return": {
                "description": "the last object or undefined",
                "type": "Object"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 204,
            "description": "Returns `true` if the passed object can be found in the receiver. The\ndefault version will iterate through the enumerable until the object\nis found. You may want to override this with a more efficient version.\n\n```javascript\nvar arr = ['a', 'b', 'c'];\n\narr.contains('a'); // true\narr.contains('z'); // false\n```",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to search for.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "`true` if object is found in enumerable.",
                "type": "Boolean"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 228,
            "description": "Iterates through the enumerable, calling the passed function on each\nitem. This method corresponds to the `forEach()` method defined in\nJavaScript 1.6.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, enumerable);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.",
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "target",
                    "description": "The target object to use",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "receiver",
                "type": "Object"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 278,
            "description": "Alias for `mapBy`",
            "itemtype": "method",
            "name": "getEach",
            "params": [
                {
                    "name": "key",
                    "description": "name of the property",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The mapped array.",
                "type": "Array"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 287,
            "description": "Sets the value on the named property for each member. This is more\nefficient than using other methods defined on this helper. If the object\nimplements Ember.Observable, the value will be changed to `set(),` otherwise\nit will be set directly. `null` objects are skipped.",
            "itemtype": "method",
            "name": "setEach",
            "params": [
                {
                    "name": "key",
                    "description": "The key to set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The object to set",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "receiver",
                "type": "Object"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 304,
            "description": "Maps all of the items in the enumeration to another value, returning\na new array. This method corresponds to `map()` defined in JavaScript 1.6.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, enumerable);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\n\nIt should return the mapped value.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "target",
                    "description": "The target object to use",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The mapped array.",
                "type": "Array"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 340,
            "description": "Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.",
            "itemtype": "method",
            "name": "mapBy",
            "params": [
                {
                    "name": "key",
                    "description": "name of the property",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The mapped array.",
                "type": "Array"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 354,
            "description": "Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.",
            "itemtype": "method",
            "name": "mapProperty",
            "params": [
                {
                    "name": "key",
                    "description": "name of the property",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The mapped array.",
                "type": "Array"
            },
            "deprecated": true,
            "deprecationMessage": "Use `mapBy` instead",
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 366,
            "description": "Returns an array with all of the items in the enumeration that the passed\nfunction returns true for. This method corresponds to `filter()` defined in\nJavaScript 1.6.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, enumerable);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\n\nIt should return `true` to include the item in the results, `false`\notherwise.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "target",
                    "description": "The target object to use",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "A filtered array.",
                "type": "Array"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 406,
            "description": "Returns an array with all of the items in the enumeration where the passed\nfunction returns true. This method is the inverse of filter().\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, enumerable);\n```\n\n- *item* is the current item in the iteration.\n- *index* is the current index in the iteration\n- *enumerable* is the enumerable object itself.\n\nIt should return the a falsey value to include the item in the results.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as \"this\" on the context. This is a good way\nto give your iterator function access to the current object.",
            "itemtype": "method",
            "name": "reject",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "target",
                    "description": "The target object to use",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "A rejected array.",
                "type": "Array"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 438,
            "description": "Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to `true`.",
            "itemtype": "method",
            "name": "filterBy",
            "params": [
                {
                    "name": "key",
                    "description": "the property to test",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "optional value to test against.",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "filtered array",
                "type": "Array"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 452,
            "description": "Returns an array with just the items with the matched property. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to `true`.",
            "itemtype": "method",
            "name": "filterProperty",
            "params": [
                {
                    "name": "key",
                    "description": "the property to test",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "optional value to test against.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "filtered array",
                "type": "Array"
            },
            "deprecated": true,
            "deprecationMessage": "Use `filterBy` instead",
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 465,
            "description": "Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.",
            "itemtype": "method",
            "name": "rejectBy",
            "params": [
                {
                    "name": "key",
                    "description": "the property to test",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "optional value to test against.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "rejected array",
                "type": "Array"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 489,
            "description": "Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.",
            "itemtype": "method",
            "name": "rejectProperty",
            "params": [
                {
                    "name": "key",
                    "description": "the property to test",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "optional value to test against.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "rejected array",
                "type": "Array"
            },
            "deprecated": true,
            "deprecationMessage": "Use `rejectBy` instead",
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 502,
            "description": "Returns the first item in the array for which the callback returns true.\nThis method works similar to the `filter()` method defined in JavaScript 1.6\nexcept that it will stop working on the array once a match is found.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, enumerable);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\n\nIt should return the `true` to include the item in the results, `false`\notherwise.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "target",
                    "description": "The target object to use",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Found item or `undefined`.",
                "type": "Object"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 558,
            "description": "Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to `true`.\n\nThis method works much like the more generic `find()` method.",
            "itemtype": "method",
            "name": "findBy",
            "params": [
                {
                    "name": "key",
                    "description": "the property to test",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "optional value to test against.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "found item or `undefined`",
                "type": "Object"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 574,
            "description": "Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to `true`.\n\nThis method works much like the more generic `find()` method.",
            "itemtype": "method",
            "name": "findProperty",
            "params": [
                {
                    "name": "key",
                    "description": "the property to test",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "optional value to test against.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "found item or `undefined`",
                "type": "Object"
            },
            "deprecated": true,
            "deprecationMessage": "Use `findBy` instead",
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 589,
            "description": "Returns `true` if the passed function returns true for every item in the\nenumeration. This corresponds with the `every()` method in JavaScript 1.6.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, enumerable);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\n\nIt should return the `true` or `false`.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.\n\nExample Usage:\n\n```javascript\nif (people.every(isEngineer)) {\n  Paychecks.addBigBonus();\n}\n```",
            "itemtype": "method",
            "name": "every",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "target",
                    "description": "The target object to use",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 629,
            "itemtype": "method",
            "name": "everyBy",
            "params": [
                {
                    "name": "key",
                    "description": "the property to test",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "optional value to test against.",
                    "type": "String",
                    "optional": true
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Use `isEvery` instead",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 638,
            "itemtype": "method",
            "name": "everyProperty",
            "params": [
                {
                    "name": "key",
                    "description": "the property to test",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "optional value to test against.",
                    "type": "String",
                    "optional": true
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Use `isEvery` instead",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 647,
            "description": "Returns `true` if the passed property resolves to `true` for all items in\nthe enumerable. This method is often simpler/faster than using a callback.",
            "itemtype": "method",
            "name": "isEvery",
            "params": [
                {
                    "name": "key",
                    "description": "the property to test",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "optional value to test against.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "since": "1.3.0",
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 661,
            "description": "Returns `true` if the passed function returns true for any item in the\nenumeration. This corresponds with the `some()` method in JavaScript 1.6.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, enumerable);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\n\nIt should return the `true` to include the item in the results, `false`\notherwise.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.\n\nUsage Example:\n\n```javascript\nif (people.any(isManager)) {\n  Paychecks.addBiggerBonus();\n}\n```",
            "itemtype": "method",
            "name": "any",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "target",
                    "description": "The target object to use",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "`true` if the passed function returns `true` for any item",
                "type": "Boolean"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 718,
            "description": "Returns `true` if the passed function returns true for any item in the\nenumeration. This corresponds with the `some()` method in JavaScript 1.6.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, enumerable);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\n\nIt should return the `true` to include the item in the results, `false`\notherwise.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.\n\nUsage Example:\n\n```javascript\nif (people.some(isManager)) {\n  Paychecks.addBiggerBonus();\n}\n```",
            "itemtype": "method",
            "name": "some",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "target",
                    "description": "The target object to use",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "`true` if the passed function returns `true` for any item",
                "type": "Boolean"
            },
            "deprecated": true,
            "deprecationMessage": "Use `any` instead",
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 756,
            "description": "Returns `true` if the passed property resolves to `true` for any item in\nthe enumerable. This method is often simpler/faster than using a callback.",
            "itemtype": "method",
            "name": "isAny",
            "params": [
                {
                    "name": "key",
                    "description": "the property to test",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "optional value to test against.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "since": "1.3.0",
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 770,
            "itemtype": "method",
            "name": "anyBy",
            "params": [
                {
                    "name": "key",
                    "description": "the property to test",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "optional value to test against.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "deprecated": true,
            "deprecationMessage": "Use `isAny` instead",
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 779,
            "itemtype": "method",
            "name": "someProperty",
            "params": [
                {
                    "name": "key",
                    "description": "the property to test",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "optional value to test against.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "deprecated": true,
            "deprecationMessage": "Use `isAny` instead",
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 788,
            "description": "This will combine the values of the enumerator into a single value. It\nis a useful way to collect a summary value from an enumeration. This\ncorresponds to the `reduce()` method defined in JavaScript 1.8.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(previousValue, item, index, enumerable);\n```\n\n- `previousValue` is the value returned by the last call to the iterator.\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `enumerable` is the enumerable object itself.\n\nReturn the new cumulative value.\n\nIn addition to the callback you can also pass an `initialValue`. An error\nwill be raised if you do not pass an initial value and the enumerator is\nempty.\n\nNote that unlike the other methods, this method does not allow you to\npass a target object to set as this for the callback. It's part of the\nspec. Sorry.",
            "itemtype": "method",
            "name": "reduce",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "initialValue",
                    "description": "Initial value for the reduce",
                    "type": "Object"
                },
                {
                    "name": "reducerProperty",
                    "description": "internal use only.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The reduced value.",
                "type": "Object"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 835,
            "description": "Invokes the named method on every object in the receiver that\nimplements it. This method corresponds to the implementation in\nPrototype 1.6.",
            "itemtype": "method",
            "name": "invoke",
            "params": [
                {
                    "name": "methodName",
                    "description": "the name of the method",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "optional arguments to pass as well.",
                    "type": "Object..."
                }
            ],
            "return": {
                "description": "return values from calling invoke.",
                "type": "Array"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 864,
            "description": "Simply converts the enumerable into a genuine array. The order is not\nguaranteed. Corresponds to the method implemented by Prototype.",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "the enumerable as an array.",
                "type": "Array"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 881,
            "description": "Returns a copy of the array with all `null` and `undefined` elements removed.\n\n```javascript\nvar arr = ['a', null, 'c', undefined];\narr.compact();  // ['a', 'c']\n```",
            "itemtype": "method",
            "name": "compact",
            "return": {
                "description": "the array without null and undefined elements.",
                "type": "Array"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 898,
            "description": "Returns a new enumerable that excludes the passed value. The default\nimplementation returns an array regardless of the receiver type unless\nthe receiver does not contain the value.\n\n```javascript\nvar arr = ['a', 'b', 'a', 'c'];\narr.without('a');  // ['b', 'c']\n```",
            "itemtype": "method",
            "name": "without",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Ember.Enumerable"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 928,
            "description": "Returns a new enumerable that contains only unique values. The default\nimplementation returns an array regardless of the receiver type.\n\n```javascript\nvar arr = ['a', 'a', 'b', 'b'];\narr.uniq();  // ['a', 'b']\n```\n\nThis only works on primitive data types, e.g. Strings, Numbers, etc.",
            "itemtype": "method",
            "name": "uniq",
            "return": {
                "description": "",
                "type": "Ember.Enumerable"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 954,
            "description": "This property will trigger anytime the enumerable's content changes.\nYou can observe this property to be notified of changes to the enumerable's\ncontent.\n\nFor plain enumerables, this property is read only. `Array` overrides\nthis method.",
            "itemtype": "property",
            "name": "[]",
            "type": "Array",
            "return": {
                "description": "this"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 974,
            "description": "Registers an enumerable observer. Must implement `Ember.EnumerableObserver`\nmixin.",
            "itemtype": "method",
            "name": "addEnumerableObserver",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "opts",
                    "description": "",
                    "type": "Hash",
                    "optional": true
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 1002,
            "description": "Removes a registered enumerable observer.",
            "itemtype": "method",
            "name": "removeEnumerableObserver",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "opts",
                    "description": "",
                    "type": "Hash",
                    "optional": true
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 1029,
            "description": "Becomes true whenever the array currently has observers watching changes\non the array.",
            "itemtype": "property",
            "name": "hasEnumerableObservers",
            "type": "Boolean",
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 1041,
            "description": "Invoke this method just before the contents of your enumerable will\nchange. You can either omit the parameters completely or pass the objects\nto be removed or added if available or just a count.",
            "itemtype": "method",
            "name": "enumerableContentWillChange",
            "params": [
                {
                    "name": "removing",
                    "description": "An enumerable of the objects to\n  be removed or the number of items to be removed.",
                    "type": "Ember.Enumerable|Number"
                },
                {
                    "name": "adding",
                    "description": "An enumerable of the objects to be\n  added or the number of items to be added.",
                    "type": "Ember.Enumerable|Number"
                }
            ],
            "chainable": 1,
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 1093,
            "description": "Invoke this method when the contents of your enumerable has changed.\nThis will notify any observers watching for content changes. If you are\nimplementing an ordered enumerable (such as an array), also pass the\nstart and end values where the content changed so that it can be used to\nnotify range observers.",
            "itemtype": "method",
            "name": "enumerableContentDidChange",
            "params": [
                {
                    "name": "removing",
                    "description": "An enumerable of the objects to\n  be removed or the number of items to be removed.",
                    "type": "Ember.Enumerable|Number"
                },
                {
                    "name": "adding",
                    "description": "An enumerable of the objects to\n  be added or the number of items to be added.",
                    "type": "Ember.Enumerable|Number"
                }
            ],
            "chainable": 1,
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/enumerable.js",
            "line": 1147,
            "description": "Converts the enumerable into an array and sorts by the keys\nspecified in the argument.\n\nYou may provide multiple arguments to sort by multiple properties.",
            "itemtype": "method",
            "name": "sortBy",
            "params": [
                {
                    "name": "property",
                    "description": "name(s) to sort on",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The sorted array.",
                "type": "Array"
            },
            "since": "1.2.0",
            "class": "Ember.Enumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/evented.js",
            "line": 51,
            "description": "Subscribes to a named event with given function.\n\n```javascript\nperson.on('didLoad', function() {\n  // fired once the person has loaded\n});\n```\n\nAn optional target can be passed in as the 2nd argument that will\nbe set as the \"this\" for the callback. This is a good way to give your\nfunction access to the object triggering the event. When the target\nparameter is used the callback becomes the third argument.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "The \"this\" binding for the callback",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "method",
                    "description": "The callback to execute",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "Ember.Evented",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/evented.js",
            "line": 76,
            "description": "Subscribes a function to a named event and then cancels the subscription\nafter the first time the event is triggered. It is good to use ``one`` when\nyou only care about the first time an event has taken place.\n\nThis function takes an optional 2nd argument that will become the \"this\"\nvalue for the callback. If this argument is passed then the 3rd argument\nbecomes the function.",
            "itemtype": "method",
            "name": "one",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "The \"this\" binding for the callback",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "method",
                    "description": "The callback to execute",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "Ember.Evented",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/evented.js",
            "line": 101,
            "description": "Triggers a named event for the object. Any additional arguments\nwill be passed as parameters to the functions that are subscribed to the\nevent.\n\n```javascript\nperson.on('didEat', function(food) {\n  console.log('person ate some ' + food);\n});\n\nperson.trigger('didEat', 'broccoli');\n\n// outputs: person ate some broccoli\n```",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Optional arguments to pass on",
                    "type": "Object..."
                }
            ],
            "class": "Ember.Evented",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/evented.js",
            "line": 130,
            "description": "Cancels subscription for given name, target, and method.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the event",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "The target of the subscription",
                    "type": "Object"
                },
                {
                    "name": "method",
                    "description": "The function of the subscription",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "Ember.Evented",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/evented.js",
            "line": 144,
            "description": "Checks to see if object has any subscriptions for named event.",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the event",
                    "type": "String"
                }
            ],
            "return": {
                "description": "does the object have a subscription for event",
                "type": "Boolean"
            },
            "class": "Ember.Evented",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/freezable.js",
            "line": 68,
            "description": "Set to `true` when the object is frozen. Use this property to detect\nwhether your object is frozen or not.",
            "itemtype": "property",
            "name": "isFrozen",
            "type": "Boolean",
            "class": "Ember.Freezable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/freezable.js",
            "line": 77,
            "description": "Freezes the object. Once this method has been called the object should\nno longer allow any properties to be edited.",
            "itemtype": "method",
            "name": "freeze",
            "return": {
                "description": "receiver",
                "type": "Object"
            },
            "class": "Ember.Freezable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
            "line": 53,
            "description": "__Required.__ You must implement this method to apply this mixin.\n\nThis is one of the primitives you must implement to support `Ember.Array`.\nYou should replace amt objects started at idx with the objects in the\npassed array. You should also call `this.enumerableContentDidChange()`",
            "itemtype": "method",
            "name": "replace",
            "params": [
                {
                    "name": "idx",
                    "description": "Starting index in the array to replace. If\n  idx >= length, then append to the end of the array.",
                    "type": "Number"
                },
                {
                    "name": "amt",
                    "description": "Number of elements that should be removed from\n  the array, starting at *idx*.",
                    "type": "Number"
                },
                {
                    "name": "objects",
                    "description": "An array of zero or more objects that should be\n  inserted into the array at *idx*",
                    "type": "Array"
                }
            ],
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
            "line": 70,
            "description": "Remove all elements from the array. This is useful if you\nwant to reuse an existing array without having to recreate it.\n\n```javascript\nvar colors = [\"red\", \"green\", \"blue\"];\ncolor.length();   //  3\ncolors.clear();   //  []\ncolors.length();  //  0\n```",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "An empty Array.",
                "type": "Ember.Array"
            },
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
            "line": 94,
            "description": "This will use the primitive `replace()` method to insert an object at the\nspecified index.\n\n```javascript\nvar colors = [\"red\", \"green\", \"blue\"];\ncolors.insertAt(2, \"yellow\");  // [\"red\", \"green\", \"yellow\", \"blue\"]\ncolors.insertAt(5, \"orange\");  // Error: Index out of range\n```",
            "itemtype": "method",
            "name": "insertAt",
            "params": [
                {
                    "name": "idx",
                    "description": "index of insert the object at.",
                    "type": "Number"
                },
                {
                    "name": "object",
                    "description": "object to insert",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "receiver",
                "type": "Ember.Array"
            },
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
            "line": 118,
            "description": "Remove an object at the specified index using the `replace()` primitive\nmethod. You can pass either a single index, or a start and a length.\n\nIf you pass a start and length that is beyond the\nlength this method will throw an `OUT_OF_RANGE_EXCEPTION`.\n\n```javascript\nvar colors = [\"red\", \"green\", \"blue\", \"yellow\", \"orange\"];\ncolors.removeAt(0);     // [\"green\", \"blue\", \"yellow\", \"orange\"]\ncolors.removeAt(2, 2);  // [\"green\", \"blue\"]\ncolors.removeAt(4, 2);  // Error: Index out of range\n```",
            "itemtype": "method",
            "name": "removeAt",
            "params": [
                {
                    "name": "start",
                    "description": "index, start of range",
                    "type": "Number"
                },
                {
                    "name": "len",
                    "description": "length of passing range",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "receiver",
                "type": "Ember.Array"
            },
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
            "line": 155,
            "description": "Push the object onto the end of the array. Works just like `push()` but it\nis KVO-compliant.\n\n```javascript\nvar colors = [\"red\", \"green\"];\ncolors.pushObject(\"black\");     // [\"red\", \"green\", \"black\"]\ncolors.pushObject([\"yellow\"]);  // [\"red\", \"green\", [\"yellow\"]]\n```",
            "itemtype": "method",
            "name": "pushObject",
            "params": [
                {
                    "name": "obj",
                    "description": "object to push",
                    "type": "*"
                }
            ],
            "return": {
                "description": "object same object passed as a param"
            },
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
            "line": 174,
            "description": "Add the objects in the passed numerable to the end of the array. Defers\nnotifying observers of the change until all objects are added.\n\n```javascript\nvar colors = [\"red\"];\ncolors.pushObjects([\"yellow\", \"orange\"]);  // [\"red\", \"yellow\", \"orange\"]\n```",
            "itemtype": "method",
            "name": "pushObjects",
            "params": [
                {
                    "name": "objects",
                    "description": "the objects to add",
                    "type": "Ember.Enumerable"
                }
            ],
            "return": {
                "description": "receiver",
                "type": "Ember.Array"
            },
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
            "line": 195,
            "description": "Pop object from array or nil if none are left. Works just like `pop()` but\nit is KVO-compliant.\n\n```javascript\nvar colors = [\"red\", \"green\", \"blue\"];\ncolors.popObject();   // \"blue\"\nconsole.log(colors);  // [\"red\", \"green\"]\n```",
            "itemtype": "method",
            "name": "popObject",
            "return": {
                "description": "object"
            },
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
            "line": 219,
            "description": "Shift an object from start of array or nil if none are left. Works just\nlike `shift()` but it is KVO-compliant.\n\n```javascript\nvar colors = [\"red\", \"green\", \"blue\"];\ncolors.shiftObject();  // \"red\"\nconsole.log(colors);   // [\"green\", \"blue\"]\n```",
            "itemtype": "method",
            "name": "shiftObject",
            "return": {
                "description": "object"
            },
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
            "line": 242,
            "description": "Unshift an object to start of array. Works just like `unshift()` but it is\nKVO-compliant.\n\n```javascript\nvar colors = [\"red\"];\ncolors.unshiftObject(\"yellow\");    // [\"yellow\", \"red\"]\ncolors.unshiftObject([\"black\"]);   // [[\"black\"], \"yellow\", \"red\"]\n```",
            "itemtype": "method",
            "name": "unshiftObject",
            "params": [
                {
                    "name": "obj",
                    "description": "object to unshift",
                    "type": "*"
                }
            ],
            "return": {
                "description": "object same object passed as a param"
            },
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
            "line": 261,
            "description": "Adds the named objects to the beginning of the array. Defers notifying\nobservers until all objects have been added.\n\n```javascript\nvar colors = [\"red\"];\ncolors.unshiftObjects([\"black\", \"white\"]);   // [\"black\", \"white\", \"red\"]\ncolors.unshiftObjects(\"yellow\"); // Type Error: 'undefined' is not a function\n```",
            "itemtype": "method",
            "name": "unshiftObjects",
            "params": [
                {
                    "name": "objects",
                    "description": "the objects to add",
                    "type": "Ember.Enumerable"
                }
            ],
            "return": {
                "description": "receiver",
                "type": "Ember.Array"
            },
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
            "line": 280,
            "description": "Reverse objects in the array. Works just like `reverse()` but it is\nKVO-compliant.",
            "itemtype": "method",
            "name": "reverseObjects",
            "return": {
                "description": "receiver",
                "type": "Ember.Array"
            },
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
            "line": 298,
            "description": "Replace all the receiver's content with content of the argument.\nIf argument is an empty array receiver will be cleared.\n\n```javascript\nvar colors = [\"red\", \"green\", \"blue\"];\ncolors.setObjects([\"black\", \"white\"]);  // [\"black\", \"white\"]\ncolors.setObjects([]);                  // []\n```",
            "itemtype": "method",
            "name": "setObjects",
            "params": [
                {
                    "name": "objects",
                    "description": "array whose content will be used for replacing\n    the content of the receiver",
                    "type": "Ember.Array"
                }
            ],
            "return": {
                "description": "receiver with the new content",
                "type": "Ember.Array"
            },
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
            "line": 327,
            "description": "Remove all occurrences of an object in the array.\n\n```javascript\nvar cities = [\"Chicago\", \"Berlin\", \"Lima\", \"Chicago\"];\ncities.removeObject(\"Chicago\");  // [\"Berlin\", \"Lima\"]\ncities.removeObject(\"Lima\");     // [\"Berlin\"]\ncities.removeObject(\"Tokyo\")     // [\"Berlin\"]\n```",
            "itemtype": "method",
            "name": "removeObject",
            "params": [
                {
                    "name": "obj",
                    "description": "object to remove",
                    "type": "*"
                }
            ],
            "return": {
                "description": "receiver",
                "type": "Ember.Array"
            },
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/mutable_array.js",
            "line": 353,
            "description": "Push the object onto the end of the array if it is not already\npresent in the array.\n\n```javascript\nvar cities = [\"Chicago\", \"Berlin\"];\ncities.addObject(\"Lima\");    // [\"Chicago\", \"Berlin\", \"Lima\"]\ncities.addObject(\"Berlin\");  // [\"Chicago\", \"Berlin\", \"Lima\"]\n```",
            "itemtype": "method",
            "name": "addObject",
            "params": [
                {
                    "name": "obj",
                    "description": "object to add, if not already present",
                    "type": "*"
                }
            ],
            "return": {
                "description": "receiver",
                "type": "Ember.Array"
            },
            "class": "Ember.MutableArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/mutable_enumerable.js",
            "line": 52,
            "description": "__Required.__ You must implement this method to apply this mixin.\n\nAttempts to add the passed object to the receiver if the object is not\nalready present in the collection. If the object is present, this method\nhas no effect.\n\nIf the passed object is of a type not supported by the receiver,\nthen this method should raise an exception.",
            "itemtype": "method",
            "name": "addObject",
            "params": [
                {
                    "name": "object",
                    "description": "The object to add to the enumerable.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the passed object",
                "type": "Object"
            },
            "class": "Ember.MutableEnumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/mutable_enumerable.js",
            "line": 68,
            "description": "Adds each object in the passed enumerable to the receiver.",
            "itemtype": "method",
            "name": "addObjects",
            "params": [
                {
                    "name": "objects",
                    "description": "the objects to add.",
                    "type": "Ember.Enumerable"
                }
            ],
            "return": {
                "description": "receiver",
                "type": "Object"
            },
            "class": "Ember.MutableEnumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/mutable_enumerable.js",
            "line": 82,
            "description": "__Required.__ You must implement this method to apply this mixin.\n\nAttempts to remove the passed object from the receiver collection if the\nobject is present in the collection. If the object is not present,\nthis method has no effect.\n\nIf the passed object is of a type not supported by the receiver,\nthen this method should raise an exception.",
            "itemtype": "method",
            "name": "removeObject",
            "params": [
                {
                    "name": "object",
                    "description": "The object to remove from the enumerable.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the passed object",
                "type": "Object"
            },
            "class": "Ember.MutableEnumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/mutable_enumerable.js",
            "line": 99,
            "description": "Removes each object in the passed enumerable from the receiver.",
            "itemtype": "method",
            "name": "removeObjects",
            "params": [
                {
                    "name": "objects",
                    "description": "the objects to remove",
                    "type": "Ember.Enumerable"
                }
            ],
            "return": {
                "description": "receiver",
                "type": "Object"
            },
            "class": "Ember.MutableEnumerable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/observable.js",
            "line": 101,
            "description": "Retrieves the value of a property from the object.\n\nThis method is usually similar to using `object[keyName]` or `object.keyName`,\nhowever it supports both computed properties and the unknownProperty\nhandler.\n\nBecause `get` unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.\n\n### Computed Properties\n\nComputed properties are methods defined with the `property` modifier\ndeclared at the end, such as:\n\n```javascript\nfullName: function() {\n  return this.get('firstName') + ' ' + this.get('lastName');\n}.property('firstName', 'lastName')\n```\n\nWhen you call `get` on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.\n\n### Unknown Properties\n\nLikewise, if you try to call `get` on a property whose value is\n`undefined`, the `unknownProperty()` method will be called on the object.\nIf this method returns any value other than `undefined`, it will be returned\ninstead. This allows you to implement \"virtual\" properties that are\nnot defined upfront.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "keyName",
                    "description": "The property to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The property value or undefined.",
                "type": "Object"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/observable.js",
            "line": 143,
            "description": "To get the values of multiple properties at once, call `getProperties`\nwith a list of strings or an array:\n\n```javascript\nrecord.getProperties('firstName', 'lastName', 'zipCode');\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```\n\nis equivalent to:\n\n```javascript\nrecord.getProperties(['firstName', 'lastName', 'zipCode']);\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```",
            "itemtype": "method",
            "name": "getProperties",
            "params": [
                {
                    "name": "list",
                    "description": "of keys to get",
                    "type": "String...|Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Hash"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/observable.js",
            "line": 167,
            "description": "Sets the provided key or path to the value.\n\nThis method is generally very similar to calling `object[key] = value` or\n`object.key = value`, except that it provides support for computed\nproperties, the `setUnknownProperty()` method and property observers.\n\n### Computed Properties\n\nIf you try to set a value on a key that has a computed property handler\ndefined (see the `get()` method for an example), then `set()` will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.\n\n### Unknown Properties\n\nIf you try to set a value on a key that is undefined in the target\nobject, then the `setUnknownProperty()` handler will be called instead. This\ngives you an opportunity to implement complex \"virtual\" properties that\nare not predefined on the object. If `setUnknownProperty()` returns\nundefined, then `set()` will simply set the value on the object.\n\n### Property Observers\n\nIn addition to changing the property, `set()` will also register a property\nchange with the object. Unless you have placed this call inside of a\n`beginPropertyChanges()` and `endPropertyChanges(),` any \"local\" observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any \"remote\" observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.\n\n### Chaining\n\nIn addition to property changes, `set()` returns the value of the object\nitself so you can do chaining like this:\n\n```javascript\nrecord.set('firstName', 'Charles').set('lastName', 'Jolley');\n```",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "keyName",
                    "description": "The property to set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to set or `null`.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Ember.Observable"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/observable.js",
            "line": 221,
            "description": "Sets a list of properties at once. These properties are set inside\na single `beginPropertyChanges` and `endPropertyChanges` batch, so\nobservers will be buffered.\n\n```javascript\nrecord.setProperties({ firstName: 'Charles', lastName: 'Jolley' });\n```",
            "itemtype": "method",
            "name": "setProperties",
            "params": [
                {
                    "name": "hash",
                    "description": "the hash of keys and values to set",
                    "type": "Hash"
                }
            ],
            "return": {
                "description": "",
                "type": "Ember.Observable"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/observable.js",
            "line": 238,
            "description": "Begins a grouping of property changes.\n\nYou can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n`endPropertyChanges()` to deliver the deferred change notifications and end\ndeferring.",
            "itemtype": "method",
            "name": "beginPropertyChanges",
            "return": {
                "description": "",
                "type": "Ember.Observable"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/observable.js",
            "line": 257,
            "description": "Ends a grouping of property changes.\n\nYou can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n`beginPropertyChanges()` at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.",
            "itemtype": "method",
            "name": "endPropertyChanges",
            "return": {
                "description": "",
                "type": "Ember.Observable"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/observable.js",
            "line": 275,
            "description": "Notify the observer system that a property is about to change.\n\nSometimes you need to change a value directly or indirectly without\nactually calling `get()` or `set()` on it. In this case, you can use this\nmethod and `propertyDidChange()` instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.\n\nNote that you must always call `propertyWillChange` and `propertyDidChange`\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.",
            "itemtype": "method",
            "name": "propertyWillChange",
            "params": [
                {
                    "name": "keyName",
                    "description": "The property key that is about to change.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Ember.Observable"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/observable.js",
            "line": 298,
            "description": "Notify the observer system that a property has just changed.\n\nSometimes you need to change a value directly or indirectly without\nactually calling `get()` or `set()` on it. In this case, you can use this\nmethod and `propertyWillChange()` instead. Calling these two methods\ntogether will notify all observers that the property has potentially\nchanged value.\n\nNote that you must always call `propertyWillChange` and `propertyDidChange`\nas a pair. If you do not, it may get the property change groups out of\norder and cause notifications to be delivered more often than you would\nlike.",
            "itemtype": "method",
            "name": "propertyDidChange",
            "params": [
                {
                    "name": "keyName",
                    "description": "The property key that has just changed.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Ember.Observable"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/observable.js",
            "line": 321,
            "description": "Convenience method to call `propertyWillChange` and `propertyDidChange` in\nsuccession.",
            "itemtype": "method",
            "name": "notifyPropertyChange",
            "params": [
                {
                    "name": "keyName",
                    "description": "The property key to be notified about.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Ember.Observable"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/observable.js",
            "line": 344,
            "description": "Adds an observer on a property.\n\nThis is the core method used to register an observer for a property.\n\nOnce you call this method, any time the key's value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.\n\nYou can also pass an optional context parameter to this method. The\ncontext will be passed to your observer method whenever it is triggered.\nNote that if you add the same target/method pair on a key multiple times\nwith different context parameters, your observer will only be called once\nwith the last context you passed.\n\n### Observer Methods\n\nObserver methods you pass should generally have the following signature if\nyou do not pass a `context` parameter:\n\n```javascript\nfooDidChange: function(sender, key, value, rev) { };\n```\n\nThe sender is the object that changed. The key is the property that\nchanges. The value property is currently reserved and unused. The rev\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.\n\nIf you pass a `context` parameter, the context will be passed before the\nrevision like so:\n\n```javascript\nfooDidChange: function(sender, key, value, context, rev) { };\n```\n\nUsually you will not need the value, context or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren't interested in\nany of these values, to write an observer that has no parameters at all.",
            "itemtype": "method",
            "name": "addObserver",
            "params": [
                {
                    "name": "key",
                    "description": "The key to observer",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "The target object to invoke",
                    "type": "Object"
                },
                {
                    "name": "method",
                    "description": "The method to invoke.",
                    "type": "String|Function"
                }
            ],
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/observable.js",
            "line": 395,
            "description": "Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to `addObserver()` and your\ntarget will no longer receive notifications.",
            "itemtype": "method",
            "name": "removeObserver",
            "params": [
                {
                    "name": "key",
                    "description": "The key to observer",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "The target object to invoke",
                    "type": "Object"
                },
                {
                    "name": "method",
                    "description": "The method to invoke.",
                    "type": "String|Function"
                }
            ],
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/observable.js",
            "line": 409,
            "description": "Returns `true` if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.",
            "itemtype": "method",
            "name": "hasObserverFor",
            "params": [
                {
                    "name": "key",
                    "description": "Key to check",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/observable.js",
            "line": 423,
            "description": "Retrieves the value of a property, or a default value in the case that the\nproperty returns `undefined`.\n\n```javascript\nperson.getWithDefault('lastName', 'Doe');\n```",
            "itemtype": "method",
            "name": "getWithDefault",
            "params": [
                {
                    "name": "keyName",
                    "description": "The name of the property to retrieve",
                    "type": "String"
                },
                {
                    "name": "defaultValue",
                    "description": "The value to return if the property value is undefined",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The property value or the defaultValue.",
                "type": "Object"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/observable.js",
            "line": 440,
            "description": "Set the value of a property to the current value plus some amount.\n\n```javascript\nperson.incrementProperty('age');\nteam.incrementProperty('score', 2);\n```",
            "itemtype": "method",
            "name": "incrementProperty",
            "params": [
                {
                    "name": "keyName",
                    "description": "The name of the property to increment",
                    "type": "String"
                },
                {
                    "name": "increment",
                    "description": "The amount to increment by. Defaults to 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The new property value",
                "type": "Number"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/observable.js",
            "line": 460,
            "description": "Set the value of a property to the current value minus some amount.\n\n```javascript\nplayer.decrementProperty('lives');\norc.decrementProperty('health', 5);\n```",
            "itemtype": "method",
            "name": "decrementProperty",
            "params": [
                {
                    "name": "keyName",
                    "description": "The name of the property to decrement",
                    "type": "String"
                },
                {
                    "name": "decrement",
                    "description": "The amount to decrement by. Defaults to 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The new property value",
                "type": "Number"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/observable.js",
            "line": 480,
            "description": "Set the value of a boolean property to the opposite of its\ncurrent value.\n\n```javascript\nstarship.toggleProperty('warpDriveEngaged');\n```",
            "itemtype": "method",
            "name": "toggleProperty",
            "params": [
                {
                    "name": "keyName",
                    "description": "The name of the property to toggle",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The new property value",
                "type": "Object"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/observable.js",
            "line": 497,
            "description": "Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.",
            "itemtype": "method",
            "name": "cacheFor",
            "params": [
                {
                    "name": "keyName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The cached value of the computed property, if any",
                "type": "Object"
            },
            "class": "Ember.Observable",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/promise_proxy.js",
            "line": 102,
            "description": "If the proxied promise is rejected this will contain the reason\nprovided.",
            "itemtype": "property",
            "name": "reason",
            "default": "null",
            "class": "Ember.PromiseProxyMixin",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/promise_proxy.js",
            "line": 111,
            "description": "Once the proxied promise has settled this will become `false`.",
            "itemtype": "property",
            "name": "isPending",
            "default": "true",
            "class": "Ember.PromiseProxyMixin",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/promise_proxy.js",
            "line": 119,
            "description": "Once the proxied promise has settled this will become `true`.",
            "itemtype": "property",
            "name": "isSettled",
            "default": "false",
            "class": "Ember.PromiseProxyMixin",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/promise_proxy.js",
            "line": 127,
            "description": "Will become `true` if the proxied promise is rejected.",
            "itemtype": "property",
            "name": "isRejected",
            "default": "false",
            "class": "Ember.PromiseProxyMixin",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/promise_proxy.js",
            "line": 135,
            "description": "Will become `true` if the proxied promise is fulfilled.",
            "itemtype": "property",
            "name": "isFulfilled",
            "default": "false",
            "class": "Ember.PromiseProxyMixin",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/promise_proxy.js",
            "line": 143,
            "description": "The promise whose fulfillment value is being proxied by this object.\n\nThis property must be specified upon creation, and should not be\nchanged once created.\n\nExample:\n\n```javascript\nEmber.ObjectController.extend(Ember.PromiseProxyMixin).create({\n  promise: <thenable>\n});\n```",
            "itemtype": "property",
            "name": "promise",
            "class": "Ember.PromiseProxyMixin",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/promise_proxy.js",
            "line": 167,
            "description": "An alias to the proxied promise's `then`.\n\nSee RSVP.Promise.then.",
            "itemtype": "method",
            "name": "then",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "RSVP.Promise"
            },
            "class": "Ember.PromiseProxyMixin",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/promise_proxy.js",
            "line": 178,
            "description": "An alias to the proxied promise's `catch`.\n\nSee RSVP.Promise.catch.",
            "itemtype": "method",
            "name": "catch",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "RSVP.Promise"
            },
            "since": "1.3.0",
            "class": "Ember.PromiseProxyMixin",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/promise_proxy.js",
            "line": 190,
            "description": "An alias to the proxied promise's `finally`.\n\nSee RSVP.Promise.finally.",
            "itemtype": "method",
            "name": "finally",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "RSVP.Promise"
            },
            "since": "1.3.0",
            "class": "Ember.PromiseProxyMixin",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/sortable.js",
            "line": 78,
            "description": "Specifies which properties dictate the `arrangedContent`'s sort order.\n\nWhen specifying multiple properties the sorting will use properties\nfrom the `sortProperties` array prioritized from first to last.",
            "itemtype": "property",
            "name": "sortProperties",
            "type": "Array",
            "class": "Ember.SortableMixin",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/sortable.js",
            "line": 88,
            "description": "Specifies the `arrangedContent`'s sort direction.\nSorts the content in ascending order by default. Set to `false` to\nuse descending order.",
            "itemtype": "property",
            "name": "sortAscending",
            "type": "Boolean",
            "default": "true",
            "class": "Ember.SortableMixin",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/sortable.js",
            "line": 98,
            "description": "The function used to compare two values. You can override this if you\nwant to do custom comparisons. Functions must be of the type expected by\nArray#sort, i.e.,\n\n*  return 0 if the two parameters are equal,\n*  return a negative value if the first parameter is smaller than the second or\n*  return a positive value otherwise:\n\n```javascript\nfunction(x, y) { // These are assumed to be integers\n  if (x === y)\n    return 0;\n  return x < y ? -1 : 1;\n}\n```",
            "itemtype": "property",
            "name": "sortFunction",
            "type": "{Function}",
            "default": "Ember.compare",
            "class": "Ember.SortableMixin",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/sortable.js",
            "line": 158,
            "description": "Overrides the default `arrangedContent` from `ArrayProxy` in order to sort by `sortFunction`.\nAlso sets up observers for each `sortProperty` on each item in the content Array.",
            "itemtype": "property",
            "name": "arrangedContent",
            "class": "Ember.SortableMixin",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/mixins/target_action_support.js",
            "line": 58,
            "description": "Send an `action` with an `actionContext` to a `target`. The action, actionContext\nand target will be retrieved from properties of the object. For example:\n\n```javascript\nApp.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  target: Ember.computed.alias('controller'),\n  action: 'save',\n  actionContext: Ember.computed.alias('context'),\n  click: function() {\n    this.triggerAction(); // Sends the `save` action, along with the current context\n                          // to the current controller\n  }\n});\n```\n\nThe `target`, `action`, and `actionContext` can be provided as properties of\nan optional object argument to `triggerAction` as well.\n\n```javascript\nApp.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  click: function() {\n    this.triggerAction({\n      action: 'save',\n      target: this.get('controller'),\n      actionContext: this.get('context')\n    }); // Sends the `save` action, along with the current context\n        // to the current controller\n  }\n});\n```\n\nThe `actionContext` defaults to the object you are mixing `TargetActionSupport` into.\nBut `target` and `action` must be specified either as properties or with the argument\nto `triggerAction`, or a combination:\n\n```javascript\nApp.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  target: Ember.computed.alias('controller'),\n  click: function() {\n    this.triggerAction({\n      action: 'save'\n    }); // Sends the `save` action, along with a reference to `this`,\n        // to the current controller\n  }\n});\n```",
            "itemtype": "method",
            "name": "triggerAction",
            "params": [
                {
                    "name": "opts",
                    "description": "(optional, with the optional keys action, target and/or actionContext)",
                    "type": "Hash"
                }
            ],
            "return": {
                "description": "true if the action was sent successfully and did not return false",
                "type": "Boolean"
            },
            "class": "Ember.TargetActionSupport",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/array_proxy.js",
            "line": 73,
            "description": "The content array. Must be an object that implements `Ember.Array` and/or\n`Ember.MutableArray.`",
            "itemtype": "property",
            "name": "content",
            "type": "Ember.Array",
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/array_proxy.js",
            "line": 82,
            "description": "The array that the proxy pretends to be. In the default `ArrayProxy`\nimplementation, this and `content` are the same. Subclasses of `ArrayProxy`\ncan override this property to provide things like sorting and filtering.",
            "itemtype": "property",
            "name": "arrangedContent",
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/array_proxy.js",
            "line": 91,
            "description": "Should actually retrieve the object at the specified index from the\ncontent. You can override this method in subclasses to transform the\ncontent item to something new.\n\nThis method will only be called if content is non-`null`.",
            "itemtype": "method",
            "name": "objectAtContent",
            "params": [
                {
                    "name": "idx",
                    "description": "The index to retrieve.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the value or undefined if none found",
                "type": "Object"
            },
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/array_proxy.js",
            "line": 106,
            "description": "Should actually replace the specified objects on the content array.\nYou can override this method in subclasses to transform the content item\ninto something new.\n\nThis method will only be called if content is non-`null`.",
            "itemtype": "method",
            "name": "replaceContent",
            "params": [
                {
                    "name": "idx",
                    "description": "The starting index",
                    "type": "Number"
                },
                {
                    "name": "amt",
                    "description": "The number of items to remove from the content.",
                    "type": "Number"
                },
                {
                    "name": "objects",
                    "description": "Optional array of objects to insert or null if no\n  objects.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/array_proxy.js",
            "line": 124,
            "description": "Invoked when the content property is about to change. Notifies observers that the\nentire array content will change.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_contentWillChange",
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/array_proxy.js",
            "line": 146,
            "description": "Override to implement content array `willChange` observer.",
            "itemtype": "method",
            "name": "contentArrayWillChange",
            "params": [
                {
                    "name": "contentArray",
                    "description": "the content array",
                    "type": "Ember.Array"
                },
                {
                    "name": "start",
                    "description": "starting index of the change",
                    "type": "Number"
                },
                {
                    "name": "removeCount",
                    "description": "count of items removed",
                    "type": "Number"
                },
                {
                    "name": "addCount",
                    "description": "count of items added",
                    "type": "Number"
                }
            ],
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/array_proxy.js",
            "line": 158,
            "description": "Override to implement content array `didChange` observer.",
            "itemtype": "method",
            "name": "contentArrayDidChange",
            "params": [
                {
                    "name": "contentArray",
                    "description": "the content array",
                    "type": "Ember.Array"
                },
                {
                    "name": "start",
                    "description": "starting index of the change",
                    "type": "Number"
                },
                {
                    "name": "removeCount",
                    "description": "count of items removed",
                    "type": "Number"
                },
                {
                    "name": "addCount",
                    "description": "count of items added",
                    "type": "Number"
                }
            ],
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/array_proxy.js",
            "line": 170,
            "description": "Invoked when the content property changes. Notifies observers that the\nentire array content has changed.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_contentDidChange",
            "class": "Ember.ArrayProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/core_object.js",
            "line": 242,
            "description": "An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.\n\nExample:\n\n```javascript\nApp.Person = Ember.Object.extend({\n  init: function() {\n    alert('Name is ' + this.get('name'));\n  }\n});\n\nvar steve = App.Person.create({\n  name: \"Steve\"\n});\n\n// alerts 'Name is Steve'.\n```\n\nNOTE: If you do override `init` for a framework class like `Ember.View` or\n`Ember.ArrayController`, be sure to call `this._super.apply(this, arguments)` in your\n`init` declaration! If you don't, Ember may not have an opportunity to\ndo important setup work, and you'll see strange behavior in your\napplication.",
            "itemtype": "method",
            "name": "init",
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/core_object.js",
            "line": 276,
            "description": "Defines the properties that will be concatenated from the superclass\n(instead of overridden).\n\nBy default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property's value by combining the superclass' property\nvalue with the subclass' value. An example of this in use within Ember\nis the `classNames` property of `Ember.View`.\n\nHere is some sample code showing the difference between a concatenated\nproperty and a normal one:\n\n```javascript\nApp.BarView = Ember.View.extend({\n  someNonConcatenatedProperty: ['bar'],\n  classNames: ['bar']\n});\n\nApp.FooBarView = App.BarView.extend({\n  someNonConcatenatedProperty: ['foo'],\n  classNames: ['foo']\n});\n\nvar fooBarView = App.FooBarView.create();\nfooBarView.get('someNonConcatenatedProperty'); // ['foo']\nfooBarView.get('classNames'); // ['ember-view', 'bar', 'foo']\n```\n\nThis behavior extends to object creation as well. Continuing the\nabove example:\n\n```javascript\nvar view = App.FooBarView.create({\n  someNonConcatenatedProperty: ['baz'],\n  classNames: ['baz']\n})\nview.get('someNonConcatenatedProperty'); // ['baz']\nview.get('classNames'); // ['ember-view', 'bar', 'foo', 'baz']\n```\nAdding a single property that is not an array will just add it in the array:\n\n```javascript\nvar view = App.FooBarView.create({\n  classNames: 'baz'\n})\nview.get('classNames'); // ['ember-view', 'bar', 'foo', 'baz']\n```\n\nUsing the `concatenatedProperties` property, we can tell Ember to mix the\ncontent of the properties.\n\nIn `Ember.View` the `classNameBindings` and `attributeBindings` properties\nare also concatenated, in addition to `classNames`.\n\nThis feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).",
            "itemtype": "property",
            "name": "concatenatedProperties",
            "type": "Array",
            "default": "null",
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/core_object.js",
            "line": 344,
            "description": "Destroyed object property flag.\n\nif this property is `true` the observers and bindings were already\nremoved by the effect of calling the `destroy()` method.",
            "itemtype": "property",
            "name": "isDestroyed",
            "default": "false",
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/core_object.js",
            "line": 355,
            "description": "Destruction scheduled flag. The `destroy()` method has been called.\n\nThe object stays intact until the end of the run loop at which point\nthe `isDestroyed` flag is set.",
            "itemtype": "property",
            "name": "isDestroying",
            "default": "false",
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/core_object.js",
            "line": 366,
            "description": "Destroys an object by setting the `isDestroyed` flag and removing its\nmetadata, which effectively destroys observers and bindings.\n\nIf you try to set a property on a destroyed object, an exception will be\nraised.\n\nNote that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.",
            "itemtype": "method",
            "name": "destroy",
            "return": {
                "description": "receiver",
                "type": "Ember.Object"
            },
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/core_object.js",
            "line": 388,
            "description": "Override to implement teardown.",
            "itemtype": "method",
            "name": "willDestroy",
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/core_object.js",
            "line": 395,
            "description": "Invoked by the run loop to actually destroy the object. This is\nscheduled for execution by the `destroy` method.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_scheduledDestroy",
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/core_object.js",
            "line": 414,
            "description": "Returns a string representation which attempts to provide more information\nthan Javascript's `toString` typically does, in a generic way for all Ember\nobjects.\n\n```javascript\nApp.Person = Em.Object.extend()\nperson = App.Person.create()\nperson.toString() //=> \"<App.Person:ember1024>\"\n```\n\nIf the object's class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:\n\n   ```javascript\nStudent = App.Person.extend()\nstudent = Student.create()\nstudent.toString() //=> \"<(subclass of App.Person):ember1025>\"\n```\n\nIf the method `toStringExtension` is defined, its return value will be\nincluded in the output.\n\n```javascript\nApp.Teacher = App.Person.extend({\n  toStringExtension: function() {\n    return this.get('fullName');\n  }\n});\nteacher = App.Teacher.create()\nteacher.toString(); //=> \"<App.Teacher:ember1026:Tom Dale>\"\n```",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "string representation",
                "type": "String"
            },
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/core_object.js",
            "line": 478,
            "description": "Creates a new subclass.\n\n```javascript\nApp.Person = Ember.Object.extend({\n  say: function(thing) {\n    alert(thing);\n   }\n});\n```\n\nThis defines a new subclass of Ember.Object: `App.Person`. It contains one method: `say()`.\n\nYou can also create a subclass from any existing class by calling its `extend()`  method. For example, you might want to create a subclass of Ember's built-in `Ember.View` class:\n\n```javascript\nApp.PersonView = Ember.View.extend({\n  tagName: 'li',\n  classNameBindings: ['isAdministrator']\n});\n```\n\nWhen defining a subclass, you can override methods but still access the implementation of your parent class by calling the special `_super()` method:\n\n```javascript\nApp.Person = Ember.Object.extend({\n  say: function(thing) {\n    var name = this.get('name');\n    alert(name + ' says: ' + thing);\n  }\n});\n\nApp.Soldier = App.Person.extend({\n  say: function(thing) {\n    this._super(thing + \", sir!\");\n  },\n  march: function(numberOfHours) {\n    alert(this.get('name') + ' marches for ' + numberOfHours + ' hours.')\n  }\n});\n\nvar yehuda = App.Soldier.create({\n  name: \"Yehuda Katz\"\n});\n\nyehuda.say(\"Yes\");  // alerts \"Yehuda Katz says: Yes, sir!\"\n```\n\nThe `create()` on line #17 creates an *instance* of the `App.Soldier` class. The `extend()` on line #8 creates a *subclass* of `App.Person`. Any instance of the `App.Person` class will *not* have the `march()` method.\n\nYou can also pass `Mixin` classes to add additional properties to the subclass.\n\n```javascript\nApp.Person = Ember.Object.extend({\n  say: function(thing) {\n    alert(this.get('name') + ' says: ' + thing);\n  }\n});\n\nApp.SingingMixin = Mixin.create({\n  sing: function(thing){\n    alert(this.get('name') + ' sings: la la la ' + thing);\n  }\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\n  dance: function() {\n    alert(this.get('name') + ' dances: tap tap tap tap ');\n  }\n});\n```\n\nThe `App.BroadwayStar` class contains three methods: `say()`, `sing()`, and `dance()`.",
            "itemtype": "method",
            "name": "extend",
            "static": 1,
            "params": [
                {
                    "name": "mixins",
                    "description": "One or more Mixin classes",
                    "type": "Mixin",
                    "optional": true,
                    "multiple": true
                },
                {
                    "name": "arguments",
                    "description": "Object containing values to use within the new class",
                    "type": "Object",
                    "optional": true,
                    "multiple": true
                }
            ],
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/core_object.js",
            "line": 581,
            "description": "Equivalent to doing `extend(arguments).create()`.\nIf possible use the normal `create` method instead.",
            "itemtype": "method",
            "name": "createWithMixins",
            "static": 1,
            "params": [
                {
                    "name": "arguments",
                    "description": "",
                    "optional": true,
                    "multiple": true
                }
            ],
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/core_object.js",
            "line": 602,
            "description": "Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.\n\n```javascript\nApp.Person = Ember.Object.extend({\n  helloWorld: function() {\n    alert(\"Hi, my name is \" + this.get('name'));\n  }\n});\n\nvar tom = App.Person.create({\n  name: 'Tom Dale'\n});\n\ntom.helloWorld(); // alerts \"Hi, my name is Tom Dale\".\n```\n\n`create` will call the `init` function if defined during\n`Ember.AnyObject.extend`\n\nIf no arguments are passed to `create`, it will not set values to the new\ninstance during initialization:\n\n```javascript\nvar noName = App.Person.create();\nnoName.helloWorld(); // alerts undefined\n```\n\nNOTE: For performance reasons, you cannot declare methods or computed\nproperties during `create`. You should instead declare methods and computed\nproperties when using `extend` or use the `createWithMixins` shorthand.",
            "itemtype": "method",
            "name": "create",
            "static": 1,
            "params": [
                {
                    "name": "arguments",
                    "description": "",
                    "optional": true,
                    "multiple": true
                }
            ],
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/core_object.js",
            "line": 652,
            "description": "Augments a constructor's prototype with additional\nproperties and functions:\n\n```javascript\nMyObject = Ember.Object.extend({\n  name: 'an object'\n});\n\no = MyObject.create();\no.get('name'); // 'an object'\n\nMyObject.reopen({\n  say: function(msg){\n    console.log(msg);\n  }\n})\n\no2 = MyObject.create();\no2.say(\"hello\"); // logs \"hello\"\n\no.say(\"goodbye\"); // logs \"goodbye\"\n```\n\nTo add functions and properties to the constructor itself,\nsee `reopenClass`",
            "itemtype": "method",
            "name": "reopen",
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/core_object.js",
            "line": 696,
            "description": "Augments a constructor's own properties and functions:\n\n```javascript\nMyObject = Ember.Object.extend({\n  name: 'an object'\n});\n\nMyObject.reopenClass({\n  canBuild: false\n});\n\nMyObject.canBuild; // false\no = MyObject.create();\n```\n\nIn other words, this creates static properties and functions for the class. These are only available on the class\nand not on any instance of that class.\n\n```javascript\nApp.Person = Ember.Object.extend({\n  name : \"\",\n  sayHello : function() {\n    alert(\"Hello. My name is \" + this.get('name'));\n  }\n});\n\nApp.Person.reopenClass({\n  species : \"Homo sapiens\",\n  createPerson: function(newPersonsName){\n    return App.Person.create({\n      name:newPersonsName\n    });\n  }\n});\n\nvar tom = App.Person.create({\n  name : \"Tom Dale\"\n});\nvar yehuda = App.Person.createPerson(\"Yehuda Katz\");\n\ntom.sayHello(); // \"Hello. My name is Tom Dale\"\nyehuda.sayHello(); // \"Hello. My name is Yehuda Katz\"\nalert(App.Person.species); // \"Homo sapiens\"\n```\n\nNote that `species` and `createPerson` are *not* valid on the `tom` and `yehuda`\nvariables. They are only valid on `App.Person`.\n\nTo add functions and properties to instances of\na constructor by extending the constructor's prototype\nsee `reopen`",
            "itemtype": "method",
            "name": "reopenClass",
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/core_object.js",
            "line": 778,
            "description": "In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.\n\nYou can pass a hash of these values to a computed property like this:\n\n```javascript\nperson: function() {\n  var personId = this.get('personId');\n  return App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })\n```\n\nOnce you've done this, you can retrieve the values saved to the computed\nproperty from your class like this:\n\n```javascript\nMyClass.metaForProperty('person');\n```\n\nThis will return the original hash that was passed to `meta()`.",
            "static": 1,
            "itemtype": "method",
            "name": "metaForProperty",
            "params": [
                {
                    "name": "key",
                    "description": "property name",
                    "type": "String"
                }
            ],
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/core_object.js",
            "line": 834,
            "description": "Iterate over each computed property for the class, passing its name\nand any associated metadata (see `metaForProperty`) to the callback.",
            "static": 1,
            "itemtype": "method",
            "name": "eachComputedProperty",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/core_object.js",
            "line": 862,
            "description": "Provides lookup-time type validation for injected properties.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_onLookup",
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/core_object.js",
            "line": 871,
            "description": "Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.",
            "itemtype": "method",
            "name": "_lazyInjections",
            "return": {
                "description": "Hash of all lazy injected property keys to container names",
                "type": "Object"
            },
            "class": "Ember.CoreObject",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/each_proxy.js",
            "line": 128,
            "description": "You can directly access mapped properties by simply requesting them.\nThe `unknownProperty` handler will generate an EachArray of each item.",
            "itemtype": "method",
            "name": "unknownProperty",
            "params": [
                {
                    "name": "keyName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "Ember.EachProxy",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/lazy_load.js",
            "line": 15,
            "description": "Detects when a specific package of Ember (e.g. 'Ember.Handlebars')\nhas fully loaded and is available for extension.\n\nThe provided `callback` will be called with the `name` passed\nresolved from a string into the object:\n\n``` javascript\nEmber.onLoad('Ember.Handlebars' function(hbars) {\n  hbars.registerHelper(...);\n});\n```",
            "itemtype": "method",
            "name": "onLoad",
            "params": [
                {
                    "name": "name",
                    "description": "name of hook",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "callback to be called",
                    "type": "Function"
                }
            ],
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/system/lazy_load.js",
            "line": 44,
            "description": "Called when an Ember.js package (e.g Ember.Handlebars) has finished\nloading. Triggers any callbacks registered for this event.",
            "itemtype": "method",
            "name": "runLoadHooks",
            "params": [
                {
                    "name": "name",
                    "description": "name of hook",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "object to pass to callbacks",
                    "type": "Object"
                }
            ],
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/system/native_array.js",
            "line": 113,
            "description": "Creates an `Ember.NativeArray` from an Array like object.\nDoes not modify the original object. Ember.A is not needed if\n`Ember.EXTEND_PROTOTYPES` is `true` (the default value). However,\nit is recommended that you use Ember.A when creating addons for\nember or when you can not guarantee that `Ember.EXTEND_PROTOTYPES`\nwill be `true`.\n\nExample\n\n```js\nvar Pagination = Ember.CollectionView.extend({\n  tagName: 'ul',\n  classNames: ['pagination'],\n\n  init: function() {\n    this._super.apply(this, arguments);\n    if (!this.get('content')) {\n      this.set('content', Ember.A());\n    }\n  }\n});\n```",
            "itemtype": "method",
            "name": "A",
            "return": {
                "description": "",
                "type": "Ember.NativeArray"
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/system/native_array.js",
            "line": 146,
            "description": "Activates the mixin on the Array.prototype if not already applied. Calling\nthis method more than once is safe. This will be called when ember is loaded\nunless you have `Ember.EXTEND_PROTOTYPES` or `Ember.EXTEND_PROTOTYPES.Array`\nset to `false`.\n\nExample\n\n```js\nif (Ember.EXTEND_PROTOTYPES === true || Ember.EXTEND_PROTOTYPES.Array) {\n  Ember.NativeArray.activate();\n}\n```",
            "itemtype": "method",
            "name": "activate",
            "static": 1,
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Ember.NativeArray",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/service.js",
            "line": 5,
            "description": "Creates a property that lazily looks up a service in the container. There\nare no restrictions as to what objects a service can be injected into.\n\nExample:\n\n```javascript\nApp.ApplicationRoute = Ember.Route.extend({\n  authManager: Ember.inject.service('auth'),\n\n  model: function() {\n    return this.get('authManager').findCurrentUser();\n  }\n});\n```\n\nThis example will create an `authManager` property on the application route\nthat looks up the `auth` service in the container, making it easily\naccessible in the `model` hook.",
            "itemtype": "method",
            "name": "service",
            "since": "1.10.0",
            "params": [
                {
                    "name": "name",
                    "description": "(optional) name of the service to inject, defaults to\n       the property's name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "injection descriptor instance",
                "type": "Ember.InjectedProperty"
            },
            "class": "Ember.inject",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/set.js",
            "line": 132,
            "description": "This property will change as the number of objects in the set changes.",
            "itemtype": "property",
            "name": "length",
            "type": "number",
            "default": "0",
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/set.js",
            "line": 141,
            "description": "Clears the set. This is useful if you want to reuse an existing set\nwithout having to recreate it.\n\n```javascript\nvar colors = new Ember.Set([\"red\", \"green\", \"blue\"]);\ncolors.length;  // 3\ncolors.clear();\ncolors.length;  // 0\n```",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "An empty Set",
                "type": "Ember.Set"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/set.js",
            "line": 182,
            "description": "Returns true if the passed object is also an enumerable that contains the\nsame objects as the receiver.\n\n```javascript\nvar colors = [\"red\", \"green\", \"blue\"],\n    same_colors = new Ember.Set(colors);\n\nsame_colors.isEqual(colors);               // true\nsame_colors.isEqual([\"purple\", \"brown\"]);  // false\n```",
            "itemtype": "method",
            "name": "isEqual",
            "params": [
                {
                    "name": "obj",
                    "description": "the other object.",
                    "type": "Ember.Set"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/set.js",
            "line": 218,
            "description": "Adds an object to the set. Only non-`null` objects can be added to a set\nand those can only be added once. If the object is already in the set or\nthe passed value is null this method will have no effect.\n\nThis is an alias for `Ember.MutableEnumerable.addObject()`.\n\n```javascript\nvar colors = new Ember.Set();\ncolors.add(\"blue\");     // [\"blue\"]\ncolors.add(\"blue\");     // [\"blue\"]\ncolors.add(\"red\");      // [\"blue\", \"red\"]\ncolors.add(null);       // [\"blue\", \"red\"]\ncolors.add(undefined);  // [\"blue\", \"red\"]\n```",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to add.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The set itself.",
                "type": "Ember.Set"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/set.js",
            "line": 240,
            "description": "Removes the object from the set if it is found. If you pass a `null` value\nor an object that is already not in the set, this method will have no\neffect. This is an alias for `Ember.MutableEnumerable.removeObject()`.\n\n```javascript\nvar colors = new Ember.Set([\"red\", \"green\", \"blue\"]);\ncolors.remove(\"red\");     // [\"blue\", \"green\"]\ncolors.remove(\"purple\");  // [\"blue\", \"green\"]\ncolors.remove(null);      // [\"blue\", \"green\"]\n```",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to remove",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The set itself.",
                "type": "Ember.Set"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/set.js",
            "line": 258,
            "description": "Removes the last element from the set and returns it, or `null` if it's empty.\n\n```javascript\nvar colors = new Ember.Set([\"green\", \"blue\"]);\ncolors.pop();  // \"blue\"\ncolors.pop();  // \"green\"\ncolors.pop();  // null\n```",
            "itemtype": "method",
            "name": "pop",
            "return": {
                "description": "The removed object from the set or null.",
                "type": "Object"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/set.js",
            "line": 281,
            "description": "Inserts the given object on to the end of the set. It returns\nthe set itself.\n\nThis is an alias for `Ember.MutableEnumerable.addObject()`.\n\n```javascript\nvar colors = new Ember.Set();\ncolors.push(\"red\");   // [\"red\"]\ncolors.push(\"green\"); // [\"red\", \"green\"]\ncolors.push(\"blue\");  // [\"red\", \"green\", \"blue\"]\n```",
            "itemtype": "method",
            "name": "push",
            "return": {
                "description": "The set itself.",
                "type": "Ember.Set"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/set.js",
            "line": 299,
            "description": "Removes the last element from the set and returns it, or `null` if it's empty.\n\nThis is an alias for `Ember.Set.pop()`.\n\n```javascript\nvar colors = new Ember.Set([\"green\", \"blue\"]);\ncolors.shift();  // \"blue\"\ncolors.shift();  // \"green\"\ncolors.shift();  // null\n```",
            "itemtype": "method",
            "name": "shift",
            "return": {
                "description": "The removed object from the set or null.",
                "type": "Object"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/set.js",
            "line": 316,
            "description": "Inserts the given object on to the end of the set. It returns\nthe set itself.\n\nThis is an alias of `Ember.Set.push()`\n\n```javascript\nvar colors = new Ember.Set();\ncolors.unshift(\"red\");    // [\"red\"]\ncolors.unshift(\"green\");  // [\"red\", \"green\"]\ncolors.unshift(\"blue\");   // [\"red\", \"green\", \"blue\"]\n```",
            "itemtype": "method",
            "name": "unshift",
            "return": {
                "description": "The set itself.",
                "type": "Ember.Set"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/set.js",
            "line": 334,
            "description": "Adds each object in the passed enumerable to the set.\n\nThis is an alias of `Ember.MutableEnumerable.addObjects()`\n\n```javascript\nvar colors = new Ember.Set();\ncolors.addEach([\"red\", \"green\", \"blue\"]);  // [\"red\", \"green\", \"blue\"]\n```",
            "itemtype": "method",
            "name": "addEach",
            "params": [
                {
                    "name": "objects",
                    "description": "the objects to add.",
                    "type": "Ember.Enumerable"
                }
            ],
            "return": {
                "description": "The set itself.",
                "type": "Ember.Set"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/set.js",
            "line": 350,
            "description": "Removes each object in the passed enumerable to the set.\n\nThis is an alias of `Ember.MutableEnumerable.removeObjects()`\n\n```javascript\nvar colors = new Ember.Set([\"red\", \"green\", \"blue\"]);\ncolors.removeEach([\"red\", \"blue\"]);  //  [\"green\"]\n```",
            "itemtype": "method",
            "name": "removeEach",
            "params": [
                {
                    "name": "objects",
                    "description": "the objects to remove.",
                    "type": "Ember.Enumerable"
                }
            ],
            "return": {
                "description": "The set itself.",
                "type": "Ember.Set"
            },
            "class": "Ember.Set",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/string.js",
            "line": 114,
            "description": "Defines the hash of localized strings for the current language. Used by\nthe `Ember.String.loc()` helper. To localize, add string values to this\nhash.",
            "itemtype": "property",
            "name": "STRINGS",
            "type": "Hash",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/system/string.js",
            "line": 135,
            "description": "Apply formatting options to the string. This will look for occurrences\nof \"%@\" in your string and substitute them with the arguments you pass into\nthis method. If you want to control the specific order of replacement,\nyou can add a number after the key as well to indicate which argument\nyou want to insert.\n\nOrdered insertions are most useful when building loc strings where values\nyou need to insert may appear in different orders.\n\n```javascript\n\"Hello %@ %@\".fmt('John', 'Doe');     // \"Hello John Doe\"\n\"Hello %@2, %@1\".fmt('John', 'Doe');  // \"Hello Doe, John\"\n```",
            "itemtype": "method",
            "name": "fmt",
            "params": [
                {
                    "name": "str",
                    "description": "The string to format",
                    "type": "String"
                },
                {
                    "name": "formats",
                    "description": "An array of parameters to interpolate into string.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "formatted string",
                "type": "String"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/string.js",
            "line": 157,
            "description": "Formats the passed string, but first looks up the string in the localized\nstrings hash. This is a convenient way to localize text. See\n`Ember.String.fmt()` for more information on formatting.\n\nNote that it is traditional but not required to prefix localized string\nkeys with an underscore or other character so you can easily identify\nlocalized strings.\n\n```javascript\nEmber.STRINGS = {\n  '_Hello World': 'Bonjour le monde',\n  '_Hello %@ %@': 'Bonjour %@ %@'\n};\n\nEmber.String.loc(\"_Hello World\");  // 'Bonjour le monde';\nEmber.String.loc(\"_Hello %@ %@\", [\"John\", \"Smith\"]);  // \"Bonjour John Smith\";\n```",
            "itemtype": "method",
            "name": "loc",
            "params": [
                {
                    "name": "str",
                    "description": "The string to format",
                    "type": "String"
                },
                {
                    "name": "formats",
                    "description": "Optional array of parameters to interpolate into string.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "formatted string",
                "type": "String"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/string.js",
            "line": 183,
            "description": "Splits a string into separate units separated by spaces, eliminating any\nempty strings in the process. This is a convenience method for split that\nis mostly useful when applied to the `String.prototype`.\n\n```javascript\nEmber.String.w(\"alpha beta gamma\").forEach(function(key) {\n  console.log(key);\n});\n\n// > alpha\n// > beta\n// > gamma\n```",
            "itemtype": "method",
            "name": "w",
            "params": [
                {
                    "name": "str",
                    "description": "The string to split",
                    "type": "String"
                }
            ],
            "return": {
                "description": "array containing the split strings",
                "type": "Array"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/string.js",
            "line": 204,
            "description": "Converts a camelized string into all lower case separated by underscores.\n\n```javascript\n'innerHTML'.decamelize();           // 'inner_html'\n'action_name'.decamelize();        // 'action_name'\n'css-class-name'.decamelize();     // 'css-class-name'\n'my favorite items'.decamelize();  // 'my favorite items'\n```",
            "itemtype": "method",
            "name": "decamelize",
            "params": [
                {
                    "name": "str",
                    "description": "The string to decamelize.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the decamelized string.",
                "type": "String"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/string.js",
            "line": 220,
            "description": "Replaces underscores, spaces, or camelCase with dashes.\n\n```javascript\n'innerHTML'.dasherize();          // 'inner-html'\n'action_name'.dasherize();        // 'action-name'\n'css-class-name'.dasherize();     // 'css-class-name'\n'my favorite items'.dasherize();  // 'my-favorite-items'\n```",
            "itemtype": "method",
            "name": "dasherize",
            "params": [
                {
                    "name": "str",
                    "description": "The string to dasherize.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the dasherized string.",
                "type": "String"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/string.js",
            "line": 236,
            "description": "Returns the lowerCamelCase form of a string.\n\n```javascript\n'innerHTML'.camelize();          // 'innerHTML'\n'action_name'.camelize();        // 'actionName'\n'css-class-name'.camelize();     // 'cssClassName'\n'my favorite items'.camelize();  // 'myFavoriteItems'\n'My Favorite Items'.camelize();  // 'myFavoriteItems'\n```",
            "itemtype": "method",
            "name": "camelize",
            "params": [
                {
                    "name": "str",
                    "description": "The string to camelize.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the camelized string.",
                "type": "String"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/string.js",
            "line": 253,
            "description": "Returns the UpperCamelCase form of a string.\n\n```javascript\n'innerHTML'.classify();          // 'InnerHTML'\n'action_name'.classify();        // 'ActionName'\n'css-class-name'.classify();     // 'CssClassName'\n'my favorite items'.classify();  // 'MyFavoriteItems'\n```",
            "itemtype": "method",
            "name": "classify",
            "params": [
                {
                    "name": "str",
                    "description": "the string to classify",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the classified string",
                "type": "String"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/string.js",
            "line": 269,
            "description": "More general than decamelize. Returns the lower\\_case\\_and\\_underscored\nform of a string.\n\n```javascript\n'innerHTML'.underscore();          // 'inner_html'\n'action_name'.underscore();        // 'action_name'\n'css-class-name'.underscore();     // 'css_class_name'\n'my favorite items'.underscore();  // 'my_favorite_items'\n```",
            "itemtype": "method",
            "name": "underscore",
            "params": [
                {
                    "name": "str",
                    "description": "The string to underscore.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the underscored string.",
                "type": "String"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/string.js",
            "line": 286,
            "description": "Returns the Capitalized form of a string\n\n```javascript\n'innerHTML'.capitalize()         // 'InnerHTML'\n'action_name'.capitalize()       // 'Action_name'\n'css-class-name'.capitalize()    // 'Css-class-name'\n'my favorite items'.capitalize() // 'My favorite items'\n```",
            "itemtype": "method",
            "name": "capitalize",
            "params": [
                {
                    "name": "str",
                    "description": "The string to capitalize.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The capitalized string.",
                "type": "String"
            },
            "class": "Ember.String",
            "module": "ember",
            "submodule": "ember-runtime",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/subarray.js",
            "line": 34,
            "description": "Track that an item was added to the tracked array.",
            "itemtype": "method",
            "name": "addItem",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the item in the tracked array.",
                    "type": "Number"
                },
                {
                    "name": "match",
                    "description": "`true` iff the item is included in the subarray.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The index of the item in the subarray.",
                "type": "Number"
            },
            "class": "Ember.SubArray",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/subarray.js",
            "line": 87,
            "description": "Track that an item was removed from the tracked array.",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the item in the tracked array.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The index of the item in the subarray, or `-1` if the item\nwas not in the subarray.",
                "type": "Number"
            },
            "class": "Ember.SubArray",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/tracked_array.js",
            "line": 38,
            "description": "Track that `newItems` were added to the tracked array at `index`.",
            "itemtype": "method",
            "name": "addItems",
            "params": [
                {
                    "name": "index",
                    "description": ""
                },
                {
                    "name": "newItems",
                    "description": ""
                }
            ],
            "class": "Ember.TrackedArray",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/tracked_array.js",
            "line": 75,
            "description": "Track that `count` items were removed at `index`.",
            "itemtype": "method",
            "name": "removeItems",
            "params": [
                {
                    "name": "index",
                    "description": ""
                },
                {
                    "name": "count",
                    "description": ""
                }
            ],
            "class": "Ember.TrackedArray",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/tracked_array.js",
            "line": 103,
            "description": "Apply all operations, reducing them to retain:n, for `n`, the number of\nitems in the array.\n\n`callback` will be called for each operation and will be passed the following arguments:\n\n* {array} items The items for the given operation\n* {number} offset The computed offset of the items, ie the index in the\narray of the first item for this operation.\n* {string} operation The type of the operation.  One of\n`Ember.TrackedArray.{RETAIN, DELETE, INSERT}`",
            "itemtype": "method",
            "name": "apply",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Ember.TrackedArray",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/tracked_array.js",
            "line": 134,
            "description": "Return an `ArrayOperationMatch` for the operation that contains the item at `index`.",
            "itemtype": "method",
            "name": "_findArrayOperation",
            "params": [
                {
                    "name": "index",
                    "description": "the index of the item whose operation information\nshould be returned.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.TrackedArray",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/tracked_array.js",
            "line": 290,
            "description": "Internal data structure to represent an array operation.",
            "itemtype": "method",
            "name": "ArrayOperation",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "The type of the operation.  One of\n`Ember.TrackedArray.{RETAIN, INSERT, DELETE}`",
                    "type": "String"
                },
                {
                    "name": "count",
                    "description": "The number of items in this operation.",
                    "type": "Number"
                },
                {
                    "name": "items",
                    "description": "The items of the operation, if included.  RETAIN and\nINSERT include their items, DELETE does not.",
                    "type": "Array"
                }
            ],
            "class": "Ember.TrackedArray",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/system/tracked_array.js",
            "line": 307,
            "description": "Internal data structure used to include information when looking up operations\nby item index.",
            "itemtype": "method",
            "name": "ArrayOperationMatch",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "operation",
                    "description": "",
                    "type": "ArrayOperation"
                },
                {
                    "name": "index",
                    "description": "The index of `operation` in the array of operations.",
                    "type": "Number"
                },
                {
                    "name": "split",
                    "description": "Whether or not the item index searched for would\nrequire a split for a new operation type.",
                    "type": "Boolean"
                },
                {
                    "name": "rangeStart",
                    "description": "The index of the first item in the operation,\nwith respect to the tracked array.  The index of the last item can be computed\nfrom `rangeStart` and `operation.count`.",
                    "type": "Number"
                }
            ],
            "class": "Ember.TrackedArray",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-runtime/lib/compare.js",
            "line": 26,
            "description": "This will compare two javascript values of possibly different types.\nIt will tell you which one is greater than the other by returning:\n\n - -1 if the first is smaller than the second,\n - 0 if both are equal,\n - 1 if the first is greater than the second.\n\nThe order is calculated based on `Ember.ORDER_DEFINITION`, if types are different.\nIn case they have the same type an appropriate comparison for this type is made.\n\n ```javascript\n Ember.compare('hello', 'hello');  // 0\n Ember.compare('abc', 'dfg');      // -1\n Ember.compare(2, 1);              // 1\n ```",
            "itemtype": "method",
            "name": "compare",
            "params": [
                {
                    "name": "v",
                    "description": "First value to compare",
                    "type": "Object"
                },
                {
                    "name": "w",
                    "description": "Second value to compare",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "-1 if v < w, 0 if v = w and 1 if v > w.",
                "type": "Number"
            },
            "class": "Ember",
            "module": "ember"
        },
        {
            "file": "packages/ember-runtime/lib/copy.js",
            "line": 65,
            "description": "Creates a clone of the passed object. This function can take just about\nany type of object and create a clone of it, including primitive values\n(which are not actually cloned because they are immutable).\n\nIf the passed object implements the `copy()` method, then this function\nwill simply call that method and return the result. Please see\n`Ember.Copyable` for further details.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to clone",
                    "type": "Object"
                },
                {
                    "name": "deep",
                    "description": "If true, a deep copy of the object is made",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The cloned object",
                "type": "Object"
            },
            "class": "Ember",
            "module": "ember"
        },
        {
            "file": "packages/ember-runtime/lib/core.js",
            "line": 6,
            "description": "Compares two objects, returning true if they are logically equal. This is\na deeper comparison than a simple triple equal. For sets it will compare the\ninternal objects. For any other object that implements `isEqual()` it will\nrespect that method.\n\n```javascript\nEmber.isEqual('hello', 'hello');  // true\nEmber.isEqual(1, 2);              // false\nEmber.isEqual([4, 2], [4, 2]);    // false\n```",
            "itemtype": "method",
            "name": "isEqual",
            "params": [
                {
                    "name": "a",
                    "description": "first object to compare",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "second object to compare",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-runtime"
        },
        {
            "file": "packages/ember-runtime/lib/inject.js",
            "line": 21,
            "description": "This method allows other Ember modules to register injection helpers for a\ngiven container type. Helpers are exported to the `inject` namespace as the\ncontainer type itself.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "createInjectionHelper",
            "since": "1.10.0",
            "params": [
                {
                    "name": "type",
                    "description": "The container type the helper will inject",
                    "type": "String"
                },
                {
                    "name": "validator",
                    "description": "A validation callback that is executed at mixin-time",
                    "type": "Function"
                }
            ],
            "class": "Ember",
            "module": "ember"
        },
        {
            "file": "packages/ember-runtime/lib/inject.js",
            "line": 41,
            "description": "Validation function that runs per-type validation functions once for each\ninjected type encountered.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "validatePropertyInjections",
            "since": "1.10.0",
            "params": [
                {
                    "name": "factory",
                    "description": "The factory object",
                    "type": "Object"
                }
            ],
            "class": "Ember",
            "module": "ember"
        },
        {
            "file": "packages/ember-testing/lib/adapters/adapter.js",
            "line": 18,
            "description": "This callback will be called whenever an async operation is about to start.\n\nOverride this to call your framework's methods that handle async\noperations.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "asyncStart",
            "class": "Ember.Test.Adapter",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember.Test"
        },
        {
            "file": "packages/ember-testing/lib/adapters/adapter.js",
            "line": 29,
            "description": "This callback will be called whenever an async operation has completed.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "asyncEnd",
            "class": "Ember.Test.Adapter",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember.Test"
        },
        {
            "file": "packages/ember-testing/lib/adapters/adapter.js",
            "line": 37,
            "description": "Override this method with your testing framework's false assertion.\nThis function is called whenever an exception occurs causing the testing\npromise to fail.\n\nQUnit example:\n\n```javascript\n  exception: function(error) {\n    ok(false, error);\n  };\n```",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "exception",
            "params": [
                {
                    "name": "error",
                    "description": "The exception to be raised.",
                    "type": "String"
                }
            ],
            "class": "Ember.Test.Adapter",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember.Test"
        },
        {
            "file": "packages/ember-testing/lib/helpers.js",
            "line": 234,
            "description": "Loads a route, sets up any controllers, and renders any templates associated\nwith the route as though a real user had triggered the route change while\nusing your app.\n\nExample:\n\n```javascript\nvisit('posts/index').then(function() {\n  // assert something\n});\n```",
            "itemtype": "method",
            "name": "visit",
            "params": [
                {
                    "name": "url",
                    "description": "the name of the route",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "RSVP.Promise"
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "packages/ember-testing/lib/helpers.js",
            "line": 253,
            "description": "Clicks an element and triggers any actions triggered by the element's `click`\nevent.\n\nExample:\n\n```javascript\nclick('.some-jQuery-selector').then(function() {\n  // assert something\n});\n```",
            "itemtype": "method",
            "name": "click",
            "params": [
                {
                    "name": "selector",
                    "description": "jQuery selector for finding element on the DOM",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "RSVP.Promise"
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "packages/ember-testing/lib/helpers.js",
            "line": 272,
            "description": "Checks a checkbox. Ensures the presence of the `checked` attribute\n\nExample:\n\n```javascript\ncheck('#remember-me').then(function() {\n  // assert something\n});\n```",
            "itemtype": "method",
            "name": "check",
            "params": [
                {
                    "name": "selector",
                    "description": "jQuery selector finding an `input[type=\"checkbox\"]`\nelement on the DOM to check",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "RSVP.Promise"
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "packages/ember-testing/lib/helpers.js",
            "line": 290,
            "description": "Unchecks a checkbox. Ensures the absence of the `checked` attribute\n\nExample:\n\n```javascript\nuncheck('#remember-me').then(function() {\n  // assert something\n});\n```",
            "itemtype": "method",
            "name": "check",
            "params": [
                {
                    "name": "selector",
                    "description": "jQuery selector finding an `input[type=\"checkbox\"]`\nelement on the DOM to uncheck",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "RSVP.Promise"
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "packages/ember-testing/lib/helpers.js",
            "line": 308,
            "description": "Simulates a key event, e.g. `keypress`, `keydown`, `keyup` with the desired keyCode\n\nExample:\n\n```javascript\nkeyEvent('.some-jQuery-selector', 'keypress', 13).then(function() {\n // assert something\n});\n```",
            "itemtype": "method",
            "name": "keyEvent",
            "params": [
                {
                    "name": "selector",
                    "description": "jQuery selector for finding element on the DOM",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "the type of key event, e.g. `keypress`, `keydown`, `keyup`",
                    "type": "String"
                },
                {
                    "name": "keyCode",
                    "description": "the keyCode of the simulated key event",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "RSVP.Promise"
            },
            "since": "1.5.0",
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "packages/ember-testing/lib/helpers.js",
            "line": 328,
            "description": "Fills in an input element with some text.\n\nExample:\n\n```javascript\nfillIn('#email', 'you@example.com').then(function() {\n  // assert something\n});\n```",
            "itemtype": "method",
            "name": "fillIn",
            "params": [
                {
                    "name": "selector",
                    "description": "jQuery selector finding an input element on the DOM\nto fill text with",
                    "type": "String"
                },
                {
                    "name": "text",
                    "description": "text to place inside the input element",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "RSVP.Promise"
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "packages/ember-testing/lib/helpers.js",
            "line": 347,
            "description": "Finds an element in the context of the app's container element. A simple alias\nfor `app.$(selector)`.\n\nExample:\n\n```javascript\nvar $el = find('.my-selector');\n```",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "selector",
                    "description": "jQuery string selector for element lookup",
                    "type": "String"
                }
            ],
            "return": {
                "description": "jQuery object representing the results of the query",
                "type": "Object"
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "packages/ember-testing/lib/helpers.js",
            "line": 363,
            "description": "Like `find`, but throws an error if the element selector returns no results.\n\nExample:\n\n```javascript\nvar $el = findWithAssert('.doesnt-exist'); // throws error\n```",
            "itemtype": "method",
            "name": "findWithAssert",
            "params": [
                {
                    "name": "selector",
                    "description": "jQuery selector string for finding an element within\nthe DOM",
                    "type": "String"
                }
            ],
            "return": {
                "description": "jQuery object representing the results of the query",
                "type": "Object"
            },
            "throws": {
                "description": "throws error if jQuery object returned has a length of 0",
                "type": "Error"
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "packages/ember-testing/lib/helpers.js",
            "line": 380,
            "description": "Causes the run loop to process any pending events. This is used to ensure that\nany async operations from other helpers (or your assertions) have been processed.\n\nThis is most often used as the return value for the helper functions (see 'click',\n'fillIn','visit',etc).\n\nExample:\n\n```javascript\nEmber.Test.registerAsyncHelper('loginUser', function(app, username, password) {\n  visit('secured/path/here')\n  .fillIn('#username', username)\n  .fillIn('#password', password)\n  .click('.submit')\n\n  return app.testHelpers.wait();\n});",
            "itemtype": "method",
            "name": "wait",
            "params": [
                {
                    "name": "value",
                    "description": "The value to be returned.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "RSVP.Promise"
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "packages/ember-testing/lib/helpers.js",
            "line": 407,
            "description": "Returns the currently active route name.\n\nExample:\n\n```javascript\nfunction validateRouteName() {\nequal(currentRouteName(), 'some.path', \"correct route was transitioned into.\");\n}\n\nvisit('/some/path').then(validateRouteName)\n```",
            "itemtype": "method",
            "name": "currentRouteName",
            "return": {
                "description": "The name of the currently active route.",
                "type": "Object"
            },
            "since": "1.5.0",
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "packages/ember-testing/lib/helpers.js",
            "line": 426,
            "description": "Returns the current path.\n\nExample:\n\n```javascript\nfunction validateURL() {\nequal(currentPath(), 'some.path.index', \"correct path was transitioned into.\");\n}\n\nclick('#some-link-id').then(validateURL);\n```",
            "itemtype": "method",
            "name": "currentPath",
            "return": {
                "description": "The currently active path.",
                "type": "Object"
            },
            "since": "1.5.0",
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "packages/ember-testing/lib/helpers.js",
            "line": 445,
            "description": "Returns the current URL.\n\nExample:\n\n```javascript\nfunction validateURL() {\nequal(currentURL(), '/some/path', \"correct URL was transitioned into.\");\n}\n\nclick('#some-link-id').then(validateURL);\n```",
            "itemtype": "method",
            "name": "currentURL",
            "return": {
                "description": "The currently active URL.",
                "type": "Object"
            },
            "since": "1.5.0",
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "packages/ember-testing/lib/helpers.js",
            "line": 464,
            "description": "Pauses the current test - this is useful for debugging while testing or for test-driving.\nIt allows you to inspect the state of your application at any point.\n\nExample (The test will pause before clicking the button):\n\n```javascript\nvisit('/')\nreturn pauseTest();\n\nclick('.btn');\n```",
            "since": "1.9.0",
            "itemtype": "method",
            "name": "pauseTest",
            "return": {
                "description": "A promise that will never resolve",
                "type": "Object"
            },
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "packages/ember-testing/lib/helpers.js",
            "line": 483,
            "description": "Triggers the given DOM event on the element identified by the provided selector.\n\nExample:\n\n```javascript\ntriggerEvent('#some-elem-id', 'blur');\n```\n\nThis is actually used internally by the `keyEvent` helper like so:\n\n```javascript\ntriggerEvent('#some-elem-id', 'keypress', { keyCode: 13 });\n```",
            "itemtype": "method",
            "name": "triggerEvent",
            "params": [
                {
                    "name": "selector",
                    "description": "jQuery selector for finding element on the DOM",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "jQuery selector that will limit the selector\n                         argument to find only within the context's children",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "type",
                    "description": "The event type to be triggered.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The options to be passed to jQuery.Event.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "RSVP.Promise"
            },
            "since": "1.5.0",
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "packages/ember-testing/lib/setup_for_testing.js",
            "line": 22,
            "description": "Sets Ember up for testing. This is useful to perform\nbasic setup steps in order to unit test.\n\nUse `App.setupForTesting` to perform integration tests (full\napplication testing).",
            "itemtype": "method",
            "name": "setupForTesting",
            "since": "1.5.0",
            "class": "Ember.Test",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-testing/lib/support.js",
            "line": 13,
            "description": "This method creates a checkbox and triggers the click event to fire the\npassed in handler. It is used to correct for a bug in older versions\nof jQuery (e.g 1.8.3).",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "testCheckboxClick",
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing"
        },
        {
            "file": "packages/ember-testing/lib/test.js",
            "line": 28,
            "description": "Hash containing all known test helpers.",
            "itemtype": "property",
            "name": "_helpers",
            "access": "private",
            "tagname": "",
            "since": "1.7.0",
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-testing/lib/test.js",
            "line": 37,
            "description": "`registerHelper` is used to register a test helper that will be injected\nwhen `App.injectTestHelpers` is called.\n\nThe helper method will always be called with the current Application as\nthe first parameter.\n\nFor example:\n\n```javascript\nEmber.Test.registerHelper('boot', function(app) {\n  Ember.run(app, app.advanceReadiness);\n});\n```\n\nThis helper can later be called without arguments because it will be\ncalled with `app` as the first parameter.\n\n```javascript\nApp = Ember.Application.create();\nApp.injectTestHelpers();\nboot();\n```",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "registerHelper",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the helper method to add.",
                    "type": "String"
                },
                {
                    "name": "helperMethod",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-testing/lib/test.js",
            "line": 74,
            "description": "`registerAsyncHelper` is used to register an async test helper that will be injected\nwhen `App.injectTestHelpers` is called.\n\nThe helper method will always be called with the current Application as\nthe first parameter.\n\nFor example:\n\n```javascript\nEmber.Test.registerAsyncHelper('boot', function(app) {\n  Ember.run(app, app.advanceReadiness);\n});\n```\n\nThe advantage of an async helper is that it will not run\nuntil the last async helper has completed.  All async helpers\nafter it will wait for it complete before running.\n\n\nFor example:\n\n```javascript\nEmber.Test.registerAsyncHelper('deletePost', function(app, postId) {\n  click('.delete-' + postId);\n});\n\n// ... in your test\nvisit('/post/2');\ndeletePost(2);\nvisit('/post/3');\ndeletePost(3);\n```",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "registerAsyncHelper",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the helper method to add.",
                    "type": "String"
                },
                {
                    "name": "helperMethod",
                    "description": "",
                    "type": "Function"
                }
            ],
            "since": "1.2.0",
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-testing/lib/test.js",
            "line": 121,
            "description": "Remove a previously added helper method.\n\nExample:\n\n```javascript\nEmber.Test.unregisterHelper('wait');\n```",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "unregisterHelper",
            "params": [
                {
                    "name": "name",
                    "description": "The helper to remove.",
                    "type": "String"
                }
            ],
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-testing/lib/test.js",
            "line": 139,
            "description": "Used to register callbacks to be fired whenever `App.injectTestHelpers`\nis called.\n\nThe callback will receive the current application as an argument.\n\nExample:\n\n```javascript\nEmber.Test.onInjectHelpers(function() {\n  Ember.$(document).ajaxSend(function() {\n    Test.pendingAjaxRequests++;\n  });\n\n  Ember.$(document).ajaxComplete(function() {\n    Test.pendingAjaxRequests--;\n  });\n});\n```",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "onInjectHelpers",
            "params": [
                {
                    "name": "callback",
                    "description": "The function to be called.",
                    "type": "Function"
                }
            ],
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-testing/lib/test.js",
            "line": 167,
            "description": "This returns a thenable tailored for testing.  It catches failed\n`onSuccess` callbacks and invokes the `Ember.Test.adapter.exception`\ncallback in the last chained then.\n\nThis method should be returned by async helpers such as `wait`.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "promise",
            "params": [
                {
                    "name": "resolver",
                    "description": "The function used to resolve the promise.",
                    "type": "Function"
                }
            ],
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-testing/lib/test.js",
            "line": 182,
            "description": "Used to allow ember-testing to communicate with a specific testing\nframework.\n\nYou can manually set it before calling `App.setupForTesting()`.\n\nExample:\n\n```javascript\nEmber.Test.adapter = MyCustomAdapter.create()\n```\n\nIf you do not set it, ember-testing will default to `Ember.Test.QUnitAdapter`.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "adapter",
            "type": "{Class} The adapter to be used.",
            "default": "Ember.Test.QUnitAdapter",
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-testing/lib/test.js",
            "line": 203,
            "description": "Replacement for `Ember.RSVP.resolve`\nThe only difference is this uses\nan instance of `Ember.Test.Promise`",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "resolve",
            "params": [
                {
                    "name": "The",
                    "description": "value to resolve",
                    "type": "Mixed"
                }
            ],
            "since": "1.2.0",
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-testing/lib/test.js",
            "line": 219,
            "description": "This allows ember-testing to play nicely with other asynchronous\nevents, such as an application that is waiting for a CSS3\ntransition or an IndexDB transaction.\n\nFor example:\n\n```javascript\nEmber.Test.registerWaiter(function() {\n  return myPendingTransactions() == 0;\n});\n```\nThe `context` argument allows you to optionally specify the `this`\nwith which your callback will be invoked.\n\nFor example:\n\n```javascript\nEmber.Test.registerWaiter(MyDB, MyDB.hasPendingTransactions);\n```",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "registerWaiter",
            "params": [
                {
                    "name": "context",
                    "description": "(optional)",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "since": "1.2.0",
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-testing/lib/test.js",
            "line": 256,
            "description": "`unregisterWaiter` is used to unregister a callback that was\nregistered with `registerWaiter`.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "unregisterWaiter",
            "params": [
                {
                    "name": "context",
                    "description": "(optional)",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "since": "1.2.0",
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-testing/lib/test.js",
            "line": 321,
            "description": "This property contains the testing helpers for the current application. These\nare created once you call `injectTestHelpers` on your `Ember.Application`\ninstance. The included helpers are also available on the `window` object by\ndefault, but can be used from this object on the individual application also.",
            "itemtype": "property",
            "name": "testHelpers",
            "type": "{Object}",
            "default": "{}",
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-testing/lib/test.js",
            "line": 333,
            "description": "This property will contain the original methods that were registered\non the `helperContainer` before `injectTestHelpers` is called.\n\nWhen `removeTestHelpers` is called, these methods are restored to the\n`helperContainer`.",
            "itemtype": "property",
            "name": "originalMethods",
            "type": "{Object}",
            "default": "{}",
            "access": "private",
            "tagname": "",
            "since": "1.3.0",
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-testing/lib/test.js",
            "line": 349,
            "description": "This property indicates whether or not this application is currently in\ntesting mode. This is set when `setupForTesting` is called on the current\napplication.",
            "itemtype": "property",
            "name": "testing",
            "type": "{Boolean}",
            "default": "false",
            "since": "1.3.0",
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-testing/lib/test.js",
            "line": 361,
            "description": "This hook defers the readiness of the application, so that you can start\nthe app when your tests are ready to run. It also sets the router's\nlocation to 'none', so that the window's location will not be modified\n(preventing both accidental leaking of state between tests and interference\nwith your testing framework).\n\nExample:\n\n  ```\n  App.setupForTesting();\n  ```",
            "itemtype": "method",
            "name": "setupForTesting",
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-testing/lib/test.js",
            "line": 386,
            "description": "This will be used as the container to inject the test helpers into. By\ndefault the helpers are injected into `window`.",
            "itemtype": "property",
            "name": "helperContainer",
            "type": "{Object} The object to be used for test helpers.",
            "default": "window",
            "since": "1.2.0",
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-testing/lib/test.js",
            "line": 397,
            "description": "This injects the test helpers into the `helperContainer` object. If an object is provided\nit will be used as the helperContainer. If `helperContainer` is not set it will default\nto `window`. If a function of the same name has already been defined it will be cached\n(so that it can be reset if the helper is removed with `unregisterHelper` or\n`removeTestHelpers`).\n\n   Any callbacks registered with `onInjectHelpers` will be called once the\n   helpers have been injected.\n\n  Example:\n  ```\n  App.injectTestHelpers();\n  ```",
            "itemtype": "method",
            "name": "injectTestHelpers",
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-testing/lib/test.js",
            "line": 433,
            "description": "This removes all helpers that have been registered, and resets and functions\nthat were overridden by the helpers.\n\nExample:\n\n```javascript\nApp.removeTestHelpers();\n```",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeTestHelpers",
            "class": "Ember.Test",
            "module": "ember",
            "submodule": "ember-testing",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/attribute_bindings_support.js",
            "line": 13,
            "description": "A list of properties of the view to apply as attributes. If the property is\na string value, the value of that string will be applied as the attribute.\n\n```javascript\n// Applies the type attribute to the element\n// with the value \"button\", like <div type=\"button\">\nEmber.View.extend({\n  attributeBindings: ['type'],\n  type: 'button'\n});\n```\n\nIf the value of the property is a Boolean, the name of that property is\nadded as an attribute.\n\n```javascript\n// Renders something like <div enabled=\"enabled\">\nEmber.View.extend({\n  attributeBindings: ['enabled'],\n  enabled: true\n});\n```",
            "itemtype": "property",
            "name": "attributeBindings",
            "class": "Ember.TextSupport",
            "module": "ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/attribute_bindings_support.js",
            "line": 45,
            "description": "Iterates through the view's attribute bindings, sets up observers for each,\nthen applies the current value of the attributes to the passed render buffer.",
            "itemtype": "method",
            "name": "_applyAttributeBindings",
            "params": [
                {
                    "name": "buffer",
                    "description": "",
                    "type": "Ember.RenderBuffer"
                },
                {
                    "name": "attributeBindings",
                    "description": "",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.TextSupport",
            "module": "ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/attribute_bindings_support.js",
            "line": 92,
            "description": "We're using setUnknownProperty as a hook to setup attributeBinding observers for\nproperties that aren't defined on a view at initialization time.\n\nNote: setUnknownProperty will only be called once for each property.",
            "itemtype": "method",
            "name": "setUnknownProperty",
            "params": [
                {
                    "name": "key",
                    "description": ""
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.TextSupport",
            "module": "ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/class_names_support.js",
            "line": 33,
            "description": "Standard CSS class names to apply to the view's outer element. This\nproperty automatically inherits any class names defined by the view's\nsuperclasses as well.",
            "itemtype": "property",
            "name": "classNames",
            "type": "Array",
            "default": "['ember-view']",
            "class": "Ember.TextSupport",
            "module": "ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/class_names_support.js",
            "line": 44,
            "description": "A list of properties of the view to apply as class names. If the property\nis a string value, the value of that string will be applied as a class\nname.\n\n```javascript\n// Applies the 'high' class to the view element\nEmber.View.extend({\n  classNameBindings: ['priority']\n  priority: 'high'\n});\n```\n\nIf the value of the property is a Boolean, the name of that property is\nadded as a dasherized class name.\n\n```javascript\n// Applies the 'is-urgent' class to the view element\nEmber.View.extend({\n  classNameBindings: ['isUrgent']\n  isUrgent: true\n});\n```\n\nIf you would prefer to use a custom value instead of the dasherized\nproperty name, you can pass a binding like this:\n\n```javascript\n// Applies the 'urgent' class to the view element\nEmber.View.extend({\n  classNameBindings: ['isUrgent:urgent']\n  isUrgent: true\n});\n```\n\nThis list of properties is inherited from the view's superclasses as well.",
            "itemtype": "property",
            "name": "classNameBindings",
            "type": "Array",
            "default": "[]",
            "class": "Ember.TextSupport",
            "module": "ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/class_names_support.js",
            "line": 87,
            "description": "Iterates over the view's `classNameBindings` array, inserts the value\nof the specified property into the `classNames` array, then creates an\nobserver to update the view's element if the bound property ever changes\nin the future.",
            "itemtype": "method",
            "name": "_applyClassNameBindings",
            "access": "private",
            "tagname": "",
            "class": "Ember.TextSupport",
            "module": "ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/component_template_deprecation.js",
            "line": 14,
            "access": "private",
            "tagname": "Moves `templateName` to `layoutName` and `template` to `layout` at extend\ntime if a layout is not also specified.\n\nNote that this currently modifies the mixin themselves, which is technically\ndubious but is practically of little consequence. This may change in the\nfuture.",
            "itemtype": "method",
            "name": "willMergeMixin",
            "since": "1.4.0",
            "class": "Ember.TextSupport",
            "module": "ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/instrumentation_support.js",
            "line": 6,
            "description": "Used to identify this view during debugging",
            "itemtype": "property",
            "name": "instrumentDisplay",
            "type": "String",
            "class": "Ember.TextSupport",
            "module": "ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/legacy_view_support.js",
            "line": 23,
            "description": "Removes all children from the `parentView`.",
            "itemtype": "method",
            "name": "removeAllChildren",
            "return": {
                "description": "receiver",
                "type": "Ember.View"
            },
            "class": "Ember.TextSupport",
            "module": "ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/legacy_view_support.js",
            "line": 41,
            "description": "Return the nearest ancestor whose parent is an instance of\n`klass`.",
            "itemtype": "method",
            "name": "nearestChildOf",
            "params": [
                {
                    "name": "klass",
                    "description": "Subclass of Ember.View (or Ember.View itself)",
                    "type": "Class"
                }
            ],
            "return": {
                "description": "Ember.View"
            },
            "deprecated": true,
            "class": "Ember.TextSupport",
            "module": "ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/legacy_view_support.js",
            "line": 61,
            "description": "Return the nearest ancestor that is an instance of the provided\nclass.",
            "itemtype": "method",
            "name": "nearestInstanceOf",
            "params": [
                {
                    "name": "klass",
                    "description": "Subclass of Ember.View (or Ember.View itself)",
                    "type": "Class"
                }
            ],
            "return": {
                "description": "Ember.View"
            },
            "deprecated": true,
            "class": "Ember.TextSupport",
            "module": "ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/template_rendering_support.js",
            "line": 14,
            "description": "Called on your view when it should push strings of HTML into a\n`Ember.RenderBuffer`. Most users will want to override the `template`\nor `templateName` properties instead of this method.\n\nBy default, `Ember.View` will look for a function in the `template`\nproperty and invoke it with the value of `context`. The value of\n`context` will be the view's controller unless you override it.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "buffer",
                    "description": "The render buffer",
                    "type": "Ember.RenderBuffer"
                }
            ],
            "class": "Ember.TextSupport",
            "module": "ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/text_support.js",
            "line": 134,
            "description": "The action to be sent when the user presses the return key.\n\nThis is similar to the `{{action}}` helper, but is fired when\nthe user presses the return key when editing a text field, and sends\nthe value of the field as the context.",
            "itemtype": "property",
            "name": "action",
            "type": "String",
            "default": "null",
            "class": "Ember.TextSupport",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/text_support.js",
            "line": 147,
            "description": "The event that should send the action.\n\nOptions are:\n\n* `enter`: the user pressed enter\n* `keyPress`: the user pressed a key",
            "itemtype": "property",
            "name": "onEvent",
            "type": "String",
            "default": "enter",
            "class": "Ember.TextSupport",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/text_support.js",
            "line": 161,
            "description": "Whether the `keyUp` event that triggers an `action` to be sent continues\npropagating to other views.\n\nBy default, when the user presses the return key on their keyboard and\nthe text field has an `action` set, the action will be sent to the view's\ncontroller and the key event will stop propagating.\n\nIf you would like parent views to receive the `keyUp` event even after an\naction has been dispatched, set `bubbles` to true.",
            "itemtype": "property",
            "name": "bubbles",
            "type": "Boolean",
            "default": "false",
            "class": "Ember.TextSupport",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/text_support.js",
            "line": 194,
            "description": "Allows you to specify a controller action to invoke when either the `enter`\nkey is pressed or, in the case of the field being a textarea, when a newline\nis inserted. To use this method, give your field an `insert-newline`\nattribute. The value of that attribute should be the name of the action\nin your controller that you wish to invoke.\n\nFor an example on how to use the `insert-newline` attribute, please\nreference the example near the top of this file.",
            "itemtype": "method",
            "name": "insertNewline",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "Ember.TextSupport",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/text_support.js",
            "line": 212,
            "description": "Allows you to specify a controller action to invoke when the escape button\nis pressed. To use this method, give your field an `escape-press`\nattribute. The value of that attribute should be the name of the action\nin your controller that you wish to invoke.\n\nFor an example on how to use the `escape-press` attribute, please reference\nthe example near the top of this file.",
            "itemtype": "method",
            "name": "cancel",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "Ember.TextSupport",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/text_support.js",
            "line": 228,
            "description": "Allows you to specify a controller action to invoke when a field receives\nfocus. To use this method, give your field a `focus-in` attribute. The value\nof that attribute should be the name of the action in your controller\nthat you wish to invoke.\n\nFor an example on how to use the `focus-in` attribute, please reference the\nexample near the top of this file.",
            "itemtype": "method",
            "name": "focusIn",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "Ember.TextSupport",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/text_support.js",
            "line": 244,
            "description": "Allows you to specify a controller action to invoke when a field loses\nfocus. To use this method, give your field a `focus-out` attribute. The value\nof that attribute should be the name of the action in your controller\nthat you wish to invoke.\n\nFor an example on how to use the `focus-out` attribute, please reference the\nexample near the top of this file.",
            "itemtype": "method",
            "name": "focusOut",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "Ember.TextSupport",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/text_support.js",
            "line": 261,
            "description": "Allows you to specify a controller action to invoke when a key is pressed.\nTo use this method, give your field a `key-press` attribute. The value of\nthat attribute should be the name of the action in your controller you\nthat wish to invoke.\n\nFor an example on how to use the `key-press` attribute, please reference the\nexample near the top of this file.",
            "itemtype": "method",
            "name": "keyPress",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "Ember.TextSupport",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/text_support.js",
            "line": 277,
            "description": "Allows you to specify a controller action to invoke when a key-up event is\nfired. To use this method, give your field a `key-up` attribute. The value\nof that attribute should be the name of the action in your controller\nthat you wish to invoke.\n\nFor an example on how to use the `key-up` attribute, please reference the\nexample near the top of this file.",
            "itemtype": "method",
            "name": "keyUp",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "Ember.TextSupport",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/text_support.js",
            "line": 295,
            "description": "Allows you to specify a controller action to invoke when a key-down event is\nfired. To use this method, give your field a `key-down` attribute. The value\nof that attribute should be the name of the action in your controller that\nyou wish to invoke.\n\nFor an example on how to use the `key-down` attribute, please reference the\nexample near the top of this file.",
            "itemtype": "method",
            "name": "keyDown",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "class": "Ember.TextSupport",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/view_child_views_support.js",
            "line": 36,
            "description": "Array of child views. You should never edit this array directly.\nInstead, use `appendChild` and `removeFromParent`.",
            "itemtype": "property",
            "name": "childViews",
            "type": "Array",
            "default": "[]",
            "access": "private",
            "tagname": "",
            "class": "Ember.ViewTargetActionSupport",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/view_child_views_support.js",
            "line": 60,
            "description": "Removes the child view from the parent view.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "view",
                    "description": "",
                    "type": "Ember.View"
                }
            ],
            "return": {
                "description": "receiver",
                "type": "Ember.View"
            },
            "class": "Ember.ViewTargetActionSupport",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/view_child_views_support.js",
            "line": 86,
            "description": "Instantiates a view to be added to the childViews array during view\ninitialization. You generally will not call this method directly unless\nyou are overriding `createChildViews()`. Note that this method will\nautomatically configure the correct settings on the new view instance to\nact as a child of the parent.",
            "itemtype": "method",
            "name": "createChildView",
            "params": [
                {
                    "name": "viewClass",
                    "description": "",
                    "type": "Class|String"
                },
                {
                    "name": "attrs",
                    "description": "Attributes to add",
                    "type": "Hash",
                    "optional": true
                }
            ],
            "return": {
                "description": "new instance",
                "type": "Ember.View"
            },
            "class": "Ember.ViewTargetActionSupport",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/view_context_support.js",
            "line": 7,
            "description": "The object from which templates should access properties.\n\nThis object will be passed to the template function each time the render\nmethod is called, but it is up to the individual function to decide what\nto do with it.\n\nBy default, this will be the view's controller.",
            "itemtype": "property",
            "name": "context",
            "type": "Object",
            "class": "Ember.ViewTargetActionSupport",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/view_context_support.js",
            "line": 28,
            "description": "Private copy of the view's template context. This can be set directly\nby Handlebars without triggering the observer that causes the view\nto be re-rendered.\n\nThe context of a view is looked up as follows:\n\n1. Supplied context (usually by Handlebars)\n2. Specified controller\n3. `parentView`'s context (for a child of a ContainerView)\n\nThe code in Handlebars that overrides the `_context` property first\nchecks to see whether the view has a specified controller. This is\nsomething of a hack and should be revisited.",
            "itemtype": "property",
            "name": "_context",
            "access": "private",
            "tagname": "",
            "class": "Ember.ViewTargetActionSupport",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/view_context_support.js",
            "line": 67,
            "description": "The controller managing this view. If this property is set, it will be\nmade available for use by the template.",
            "itemtype": "property",
            "name": "controller",
            "type": "Object",
            "class": "Ember.ViewTargetActionSupport",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/view_target_action_support.js",
            "line": 47,
            "itemtype": "property",
            "name": "target",
            "class": "Ember.ViewTargetActionSupport",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/view_target_action_support.js",
            "line": 51,
            "itemtype": "property",
            "name": "actionContext",
            "class": "Ember.ViewTargetActionSupport",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/visibility_support.js",
            "line": 11,
            "description": "If `false`, the view will appear hidden in DOM.",
            "itemtype": "property",
            "name": "isVisible",
            "type": "Boolean",
            "default": "null",
            "class": "Ember.EventDispatcher",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/mixins/visibility_support.js",
            "line": 23,
            "description": "When the view's `isVisible` property changes, toggle the visibility\nelement of the actual DOM element.",
            "itemtype": "method",
            "name": "_isVisibleDidChange",
            "access": "private",
            "tagname": "",
            "class": "Ember.EventDispatcher",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/streams/class_name_binding.js",
            "line": 11,
            "description": "Parse a path and return an object which holds the parsed properties.\n\nFor example a path like \"content.isEnabled:enabled:disabled\" will return the\nfollowing object:\n\n```javascript\n{\n  path: \"content.isEnabled\",\n  className: \"enabled\",\n  falsyClassName: \"disabled\",\n  classNames: \":enabled:disabled\"\n}\n```",
            "itemtype": "method",
            "name": "parsePropertyPath",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "Ember.EventDispatcher",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/streams/class_name_binding.js",
            "line": 57,
            "description": "Get the class name for a given value, based on the path, optional\n`className` and optional `falsyClassName`.\n\n- if a `className` or `falsyClassName` has been specified:\n  - if the value is truthy and `className` has been specified,\n    `className` is returned\n  - if the value is falsy and `falsyClassName` has been specified,\n    `falsyClassName` is returned\n  - otherwise `null` is returned\n- if the value is `true`, the dasherized last part of the supplied path\n  is returned\n- if the value is not `false`, `undefined` or `null`, the `value`\n  is returned\n- if none of the above rules apply, `null` is returned",
            "itemtype": "method",
            "name": "classStringForValue",
            "params": [
                {
                    "name": "path",
                    "description": ""
                },
                {
                    "name": "val",
                    "description": ""
                },
                {
                    "name": "className",
                    "description": ""
                },
                {
                    "name": "falsyClassName",
                    "description": ""
                }
            ],
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "Ember.EventDispatcher",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/system/action_manager.js",
            "line": 8,
            "description": "Global action id hash.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "registeredActions",
            "type": "Object",
            "class": "Ember.EventDispatcher",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "packages/ember-views/lib/system/event_dispatcher.js",
            "line": 35,
            "description": "The set of events names (and associated handler function names) to be setup\nand dispatched by the `EventDispatcher`. Custom events can added to this list at setup\ntime, generally via the `Ember.Application.customEvents` hash. Only override this\ndefault set to prevent the EventDispatcher from listening on some events all together.\n\nThis set will be modified by `setup` to also include any events added at that time.",
            "itemtype": "property",
            "name": "events",
            "type": "Object",
            "class": "Ember.EventDispatcher",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/system/event_dispatcher.js",
            "line": 76,
            "description": "The root DOM element to which event listeners should be attached. Event\nlisteners will be attached to the document unless this is overridden.\n\nCan be specified as a DOMElement or a selector string.\n\nThe default body is a string since this may be evaluated before document.body\nexists in the DOM.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "rootElement",
            "type": "DOMElement",
            "default": "'body'",
            "class": "Ember.EventDispatcher",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/system/event_dispatcher.js",
            "line": 92,
            "description": "It enables events to be dispatched to the view's `eventManager.` When present,\nthis object takes precedence over handling of events on the view itself.\n\nNote that most Ember applications do not use this feature. If your app also\ndoes not use it, consider setting this property to false to gain some performance\nimprovement by allowing the EventDispatcher to skip the search for the\n`eventManager` on the view tree.\n\n```javascript\nvar EventDispatcher = Em.EventDispatcher.extend({\n  events: {\n      click       : 'click',\n      focusin     : 'focusIn',\n      focusout    : 'focusOut',\n      change      : 'change'\n  },\n  canDispatchToEventManager: false\n});\ncontainer.register('event_dispatcher:main', EventDispatcher);\n```",
            "itemtype": "property",
            "name": "canDispatchToEventManager",
            "type": "boolean",
            "default": "'true'",
            "since": "1.7.0",
            "class": "Ember.EventDispatcher",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/system/event_dispatcher.js",
            "line": 121,
            "description": "Sets up event listeners for standard browser events.\n\nThis will be called after the browser sends a `DOMContentReady` event. By\ndefault, it will set up all of the listeners on the document body. If you\nwould like to register the listeners on a different element, set the event\ndispatcher's `root` property.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setup",
            "params": [
                {
                    "name": "addedEvents",
                    "description": "",
                    "type": "Hash"
                }
            ],
            "class": "Ember.EventDispatcher",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/system/event_dispatcher.js",
            "line": 160,
            "description": "Registers an event listener on the rootElement. If the given event is\ntriggered, the provided event handler will be triggered on the target view.\n\nIf the target view does not implement the event handler, or if the handler\nreturns `false`, the parent view will be called. The event will continue to\nbubble to each successive parent view until it reaches the top.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "setupHandler",
            "params": [
                {
                    "name": "rootElement",
                    "description": "",
                    "type": "Element"
                },
                {
                    "name": "event",
                    "description": "the browser-originated event to listen to",
                    "type": "String"
                },
                {
                    "name": "eventName",
                    "description": "the name of the method to call on the view",
                    "type": "String"
                }
            ],
            "class": "Ember.EventDispatcher",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/system/render_buffer.js",
            "line": 112,
            "description": "`Ember.RenderBuffer` gathers information regarding the view and generates the\nfinal representation. `Ember.RenderBuffer` will generate HTML which can be pushed\nto the DOM.\n\n ```javascript\n var buffer = new Ember.RenderBuffer('div', contextualElement);\n```",
            "itemtype": "method",
            "name": "renderBuffer",
            "params": [
                {
                    "name": "tagName",
                    "description": "tag name (such as 'div' or 'p') used for the buffer",
                    "type": "String"
                }
            ],
            "class": "Ember.Checkbox",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/system/render_buffer.js",
            "line": 159,
            "description": "An internal set used to de-dupe class names when `addClass()` is\nused. After each call to `addClass()`, the `classes` property\nwill be updated.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "elementClasses",
            "type": "Array",
            "default": "null",
            "class": "Ember.Checkbox",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/system/render_buffer.js",
            "line": 171,
            "description": "Array of class names which will be applied in the class attribute.\n\nYou can use `setClasses()` to set this property directly. If you\nuse `addClass()`, it will be maintained for you.",
            "itemtype": "property",
            "name": "classes",
            "type": "Array",
            "default": "null",
            "class": "Ember.Checkbox",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/system/render_buffer.js",
            "line": 183,
            "description": "The id in of the element, to be applied in the id attribute.\n\nYou should not set this property yourself, rather, you should use\nthe `id()` method of `Ember.RenderBuffer`.",
            "itemtype": "property",
            "name": "elementId",
            "type": "String",
            "default": "null",
            "class": "Ember.Checkbox",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/system/render_buffer.js",
            "line": 195,
            "description": "A hash keyed on the name of the attribute and whose value will be\napplied to that attribute. For example, if you wanted to apply a\n`data-view=\"Foo.bar\"` property to an element, you would set the\nelementAttributes hash to `{'data-view':'Foo.bar'}`.\n\nYou should not maintain this hash yourself, rather, you should use\nthe `attr()` method of `Ember.RenderBuffer`.",
            "itemtype": "property",
            "name": "elementAttributes",
            "type": "Hash",
            "default": "{}",
            "class": "Ember.Checkbox",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/system/render_buffer.js",
            "line": 210,
            "description": "A hash keyed on the name of the properties and whose value will be\napplied to that property. For example, if you wanted to apply a\n`checked=true` property to an element, you would set the\nelementProperties hash to `{'checked':true}`.\n\nYou should not maintain this hash yourself, rather, you should use\nthe `prop()` method of `Ember.RenderBuffer`.",
            "itemtype": "property",
            "name": "elementProperties",
            "type": "Hash",
            "default": "{}",
            "class": "Ember.Checkbox",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/system/render_buffer.js",
            "line": 225,
            "description": "The tagname of the element an instance of `Ember.RenderBuffer` represents.\n\nUsually, this gets set as the first parameter to `Ember.RenderBuffer`. For\nexample, if you wanted to create a `p` tag, then you would call\n\n```javascript\nEmber.RenderBuffer('p', contextualElement)\n```",
            "itemtype": "property",
            "name": "elementTag",
            "type": "String",
            "default": "null",
            "class": "Ember.Checkbox",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/system/render_buffer.js",
            "line": 241,
            "description": "A hash keyed on the name of the style attribute and whose value will\nbe applied to that attribute. For example, if you wanted to apply a\n`background-color:black;` style to an element, you would set the\nelementStyle hash to `{'background-color':'black'}`.\n\nYou should not maintain this hash yourself, rather, you should use\nthe `style()` method of `Ember.RenderBuffer`.",
            "itemtype": "property",
            "name": "elementStyle",
            "type": "Hash",
            "default": "{}",
            "class": "Ember.Checkbox",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/system/render_buffer.js",
            "line": 292,
            "description": "Adds a string of HTML to the `RenderBuffer`.",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "string",
                    "description": "HTML to push into the buffer",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Ember.Checkbox",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/system/render_buffer.js",
            "line": 313,
            "description": "Adds a class to the buffer, which will be rendered to the class attribute.",
            "itemtype": "method",
            "name": "addClass",
            "params": [
                {
                    "name": "className",
                    "description": "Class name to add to the buffer",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Ember.Checkbox",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/system/render_buffer.js",
            "line": 338,
            "description": "Sets the elementID to be used for the element.",
            "itemtype": "method",
            "name": "id",
            "params": [
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Ember.Checkbox",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/system/render_buffer.js",
            "line": 353,
            "description": "Adds an attribute which will be rendered to the element.",
            "itemtype": "method",
            "name": "attr",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the attribute",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to add to the attribute",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "return": {
                "description": "this or the current attribute value",
                "type": "Ember.RenderBuffer|String"
            },
            "class": "Ember.Checkbox",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/system/render_buffer.js",
            "line": 374,
            "description": "Remove an attribute from the list of attributes to render.",
            "itemtype": "method",
            "name": "removeAttr",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the attribute",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Ember.Checkbox",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/system/render_buffer.js",
            "line": 388,
            "description": "Adds a property which will be rendered to the element.",
            "itemtype": "method",
            "name": "prop",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the property",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to add to the property",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "return": {
                "description": "this or the current property value",
                "type": "Ember.RenderBuffer|String"
            },
            "class": "Ember.Checkbox",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/system/render_buffer.js",
            "line": 409,
            "description": "Remove an property from the list of properties to render.",
            "itemtype": "method",
            "name": "removeProp",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the property",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Ember.Checkbox",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/system/render_buffer.js",
            "line": 423,
            "description": "Adds a style to the style attribute which will be rendered to the element.",
            "itemtype": "method",
            "name": "style",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the style",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "Ember.Checkbox",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/system/render_buffer.js",
            "line": 498,
            "itemtype": "method",
            "name": "element",
            "return": {
                "description": "The element corresponding to the generated HTML\n  of this buffer",
                "type": "DOMElement"
            },
            "class": "Ember.Checkbox",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/system/render_buffer.js",
            "line": 543,
            "description": "Generates the HTML content for this buffer.",
            "itemtype": "method",
            "name": "string",
            "return": {
                "description": "The generated HTML",
                "type": "String"
            },
            "class": "Ember.Checkbox",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/system/utils.js",
            "line": 13,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getViewRange",
            "params": [
                {
                    "name": "view",
                    "description": "",
                    "type": "Ember.View"
                }
            ],
            "class": "Ember.Checkbox",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "packages/ember-views/lib/system/utils.js",
            "line": 25,
            "description": "`getViewClientRects` provides information about the position of the border\nbox edges of a view relative to the viewport.\n\nIt is only intended to be used by development tools like the Ember Inspector\nand may not work on older browsers.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getViewClientRects",
            "params": [
                {
                    "name": "view",
                    "description": "",
                    "type": "Ember.View"
                }
            ],
            "class": "Ember.Checkbox",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "packages/ember-views/lib/system/utils.js",
            "line": 41,
            "description": "`getViewBoundingClientRect` provides information about the position of the\nbounding border box edges of a view relative to the viewport.\n\nIt is only intended to be used by development tools like the Ember Inpsector\nand may not work on older browsers.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getViewBoundingClientRect",
            "params": [
                {
                    "name": "view",
                    "description": "",
                    "type": "Ember.View"
                }
            ],
            "class": "Ember.Checkbox",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "packages/ember-views/lib/views/collection_view.js",
            "line": 187,
            "description": "A list of items to be displayed by the `Ember.CollectionView`.",
            "itemtype": "property",
            "name": "content",
            "type": "Ember.Array",
            "default": "null",
            "class": "Ember.CollectionView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/collection_view.js",
            "line": 196,
            "description": "This provides metadata about what kind of empty view class this\ncollection would like if it is being instantiated from another\nsystem (like Handlebars)",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "emptyViewClass",
            "class": "Ember.CollectionView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/collection_view.js",
            "line": 206,
            "description": "An optional view to display if content is set to an empty array.",
            "itemtype": "property",
            "name": "emptyView",
            "type": "Ember.View",
            "default": "null",
            "class": "Ember.CollectionView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/collection_view.js",
            "line": 215,
            "itemtype": "property",
            "name": "itemViewClass",
            "type": "Ember.View",
            "default": "Ember.View",
            "class": "Ember.CollectionView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/collection_view.js",
            "line": 222,
            "description": "Setup a CollectionView",
            "itemtype": "method",
            "name": "init",
            "class": "Ember.CollectionView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/collection_view.js",
            "line": 233,
            "description": "Invoked when the content property is about to change. Notifies observers that the\nentire array content will change.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_contentWillChange",
            "class": "Ember.CollectionView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/collection_view.js",
            "line": 248,
            "description": "Check to make sure that the content has changed, and if so,\nupdate the children directly. This is always scheduled\nasynchronously, to allow the element to be created before\nbindings have synchronized and vice versa.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_contentDidChange",
            "class": "Ember.CollectionView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/collection_view.js",
            "line": 269,
            "description": "Ensure that the content implements Ember.Array",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_assertArrayLike",
            "class": "Ember.CollectionView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/collection_view.js",
            "line": 279,
            "description": "Removes the content and content observers.",
            "itemtype": "method",
            "name": "destroy",
            "class": "Ember.CollectionView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/collection_view.js",
            "line": 297,
            "description": "Called when a mutation to the underlying content array will occur.\n\nThis method will remove any views that are no longer in the underlying\ncontent array.\n\nInvokes whenever the content array itself will change.",
            "itemtype": "method",
            "name": "arrayWillChange",
            "params": [
                {
                    "name": "content",
                    "description": "the managed collection of objects",
                    "type": "Array"
                },
                {
                    "name": "start",
                    "description": "the index at which the changes will occur",
                    "type": "Number"
                },
                {
                    "name": "removed",
                    "description": "number of object to be removed from content",
                    "type": "Number"
                }
            ],
            "class": "Ember.CollectionView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/collection_view.js",
            "line": 330,
            "description": "Called when a mutation to the underlying content array occurs.\n\nThis method will replay that mutation against the views that compose the\n`Ember.CollectionView`, ensuring that the view reflects the model.\n\nThis array observer is added in `contentDidChange`.",
            "itemtype": "method",
            "name": "arrayDidChange",
            "params": [
                {
                    "name": "content",
                    "description": "the managed collection of objects",
                    "type": "Array"
                },
                {
                    "name": "start",
                    "description": "the index at which the changes occurred",
                    "type": "Number"
                },
                {
                    "name": "removed",
                    "description": "number of object removed from content",
                    "type": "Number"
                },
                {
                    "name": "added",
                    "description": "number of object added to content",
                    "type": "Number"
                }
            ],
            "class": "Ember.CollectionView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/collection_view.js",
            "line": 412,
            "description": "Instantiates a view to be added to the childViews array during view\ninitialization. You generally will not call this method directly unless\nyou are overriding `createChildViews()`. Note that this method will\nautomatically configure the correct settings on the new view instance to\nact as a child of the parent.\n\nThe tag name for the view will be set to the tagName of the viewClass\npassed in.",
            "itemtype": "method",
            "name": "createChildView",
            "params": [
                {
                    "name": "viewClass",
                    "description": "",
                    "type": "Class"
                },
                {
                    "name": "attrs",
                    "description": "Attributes to add",
                    "type": "Hash",
                    "optional": true
                }
            ],
            "return": {
                "description": "new instance",
                "type": "Ember.View"
            },
            "class": "Ember.CollectionView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/collection_view.js",
            "line": 441,
            "description": "A map of parent tags to their default child tags. You can add\nadditional parent tags if you want collection views that use\na particular parent tag to default to a child tag.",
            "itemtype": "property",
            "name": "CONTAINER_MAP",
            "type": "Hash",
            "static": 1,
            "final": 1,
            "class": "Ember.CollectionView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/component.js",
            "line": 130,
            "description": "A components template property is set by passing a block\nduring its invocation. It is executed within the parent context.\n\nExample:\n\n```handlebars\n{{#my-component}}\n  // something that is run in the context\n  // of the parent context\n{{/my-component}}\n```\n\nSpecifying a template directly to a component is deprecated without\nalso specifying the layout property.",
            "deprecated": true,
            "itemtype": "property",
            "name": "template",
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/component.js",
            "line": 160,
            "description": "Specifying a components `templateName` is deprecated without also\nproviding the `layout` or `layoutName` properties.",
            "deprecated": true,
            "itemtype": "property",
            "name": "templateName",
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/component.js",
            "line": 192,
            "description": "If the component is currently inserted into the DOM of a parent view, this\nproperty will point to the controller of the parent view.",
            "itemtype": "property",
            "name": "targetObject",
            "type": "Ember.Controller",
            "default": "null",
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/component.js",
            "line": 205,
            "description": "Triggers a named action on the controller context where the component is used if\nthis controller has registered for notifications of the action.\n\nFor example a component for playing or pausing music may translate click events\ninto action notifications of \"play\" or \"stop\" depending on some internal state\nof the component:\n\n\n```javascript\nApp.PlayButtonComponent = Ember.Component.extend({\n  click: function() {\n    if (this.get('isPlaying')) {\n      this.sendAction('play');\n    } else {\n      this.sendAction('stop');\n    }\n  }\n});\n```\n\nWhen used inside a template these component actions are configured to\ntrigger actions in the outer application context:\n\n```handlebars\n{{! application.hbs }}\n{{play-button play=\"musicStarted\" stop=\"musicStopped\"}}\n```\n\nWhen the component receives a browser `click` event it translate this\ninteraction into application-specific semantics (\"play\" or \"stop\") and\ntriggers the specified action name on the controller for the template\nwhere the component is used:\n\n\n```javascript\nApp.ApplicationController = Ember.Controller.extend({\n  actions: {\n    musicStarted: function() {\n      // called when the play button is clicked\n      // and the music started playing\n    },\n    musicStopped: function() {\n      // called when the play button is clicked\n      // and the music stopped playing\n    }\n  }\n});\n```\n\nIf no action name is passed to `sendAction` a default name of \"action\"\nis assumed.\n\n```javascript\nApp.NextButtonComponent = Ember.Component.extend({\n  click: function() {\n    this.sendAction();\n  }\n});\n```\n\n```handlebars\n{{! application.hbs }}\n{{next-button action=\"playNextSongInAlbum\"}}\n```\n\n```javascript\nApp.ApplicationController = Ember.Controller.extend({\n  actions: {\n    playNextSongInAlbum: function() {\n      ...\n    }\n  }\n});\n```",
            "itemtype": "method",
            "name": "sendAction",
            "params": [
                {
                    "name": "action",
                    "description": "the action to trigger",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "context",
                    "description": "a context to send with the action",
                    "type": "*",
                    "optional": true
                }
            ],
            "class": "Ember.Component",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/container_view.js",
            "line": 259,
            "description": "Instructs each child view to render to the passed render buffer.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "buffer",
                    "description": "the buffer to render to",
                    "type": "Ember.RenderBuffer"
                }
            ],
            "class": "Ember.ContainerView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/container_view.js",
            "line": 283,
            "description": "When a child view is removed, destroy its element so that\nit is removed from the DOM.\n\nThe array observer that triggers this action is set up in the\n`renderToBuffer` method.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "childViewsWillChange",
            "params": [
                {
                    "name": "views",
                    "description": "the child views array before mutation",
                    "type": "Ember.Array"
                },
                {
                    "name": "start",
                    "description": "the start position of the mutation",
                    "type": "Number"
                },
                {
                    "name": "removed",
                    "description": "the number of child views removed",
                    "type": "Number"
                }
            ],
            "class": "Ember.ContainerView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/container_view.js",
            "line": 312,
            "description": "When a child view is added, make sure the DOM gets updated appropriately.\n\nIf the view has already rendered an element, we tell the child view to\ncreate an element and insert it into the DOM. If the enclosing container\nview has already written to a buffer, but not yet converted that buffer\ninto an element, we insert the string representation of the child into the\nappropriate place in the buffer.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "childViewsDidChange",
            "params": [
                {
                    "name": "views",
                    "description": "the array of child views after the mutation has occurred",
                    "type": "Ember.Array"
                },
                {
                    "name": "start",
                    "description": "the start position of the mutation",
                    "type": "Number"
                },
                {
                    "name": "removed",
                    "description": "the number of child views removed",
                    "type": "Number"
                },
                {
                    "name": "added",
                    "description": "the number of child views added",
                    "type": "Number"
                }
            ],
            "class": "Ember.ContainerView",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/core_view.js",
            "line": 60,
            "description": "If the view is currently inserted into the DOM of a parent view, this\nproperty will point to the parent of the view.",
            "itemtype": "property",
            "name": "parentView",
            "type": "Ember.View",
            "default": "null",
            "class": "Ember.CoreView",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/core_view.js",
            "line": 99,
            "description": "Override the default event firing from `Ember.Evented` to\nalso call methods with the given name.",
            "itemtype": "method",
            "name": "trigger",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.CoreView",
            "module": "ember",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/select.js",
            "line": 345,
            "description": "The `multiple` attribute of the select element. Indicates whether multiple\noptions can be selected.",
            "itemtype": "property",
            "name": "multiple",
            "type": "Boolean",
            "default": "false",
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/select.js",
            "line": 355,
            "description": "The `disabled` attribute of the select element. Indicates whether\nthe element is disabled from interactions.",
            "itemtype": "property",
            "name": "disabled",
            "type": "Boolean",
            "default": "false",
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/select.js",
            "line": 365,
            "description": "The `required` attribute of the select element. Indicates whether\na selected option is required for form validation.",
            "itemtype": "property",
            "name": "required",
            "type": "Boolean",
            "default": "false",
            "since": "1.5.0",
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/select.js",
            "line": 376,
            "description": "The list of options.\n\nIf `optionLabelPath` and `optionValuePath` are not overridden, this should\nbe a list of strings, which will serve simultaneously as labels and values.\n\nOtherwise, this should be a list of objects. For instance:\n\n```javascript\nvar App = Ember.Application.create();\nvar App.MySelect = Ember.Select.extend({\n  content: Ember.A([\n      { id: 1, firstName: 'Yehuda' },\n      { id: 2, firstName: 'Tom' }\n    ]),\n  optionLabelPath: 'content.firstName',\n  optionValuePath: 'content.id'\n});\n```",
            "itemtype": "property",
            "name": "content",
            "type": "Array",
            "default": "null",
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/select.js",
            "line": 402,
            "description": "When `multiple` is `false`, the element of `content` that is currently\nselected, if any.\n\nWhen `multiple` is `true`, an array of such elements.",
            "itemtype": "property",
            "name": "selection",
            "type": "Object or Array",
            "default": "null",
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/select.js",
            "line": 414,
            "description": "In single selection mode (when `multiple` is `false`), value can be used to\nget the current selection's value or set the selection by its value.\n\nIt is not currently supported in multiple selection mode.",
            "itemtype": "property",
            "name": "value",
            "type": "String",
            "default": "null",
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/select.js",
            "line": 430,
            "description": "If given, a top-most dummy option will be rendered to serve as a user\nprompt.",
            "itemtype": "property",
            "name": "prompt",
            "type": "String",
            "default": "null",
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/select.js",
            "line": 440,
            "description": "The path of the option labels. See [content](/api/classes/Ember.Select.html#property_content).",
            "itemtype": "property",
            "name": "optionLabelPath",
            "type": "String",
            "default": "'content'",
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/select.js",
            "line": 449,
            "description": "The path of the option values. See [content](/api/classes/Ember.Select.html#property_content).",
            "itemtype": "property",
            "name": "optionValuePath",
            "type": "String",
            "default": "'content'",
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/select.js",
            "line": 458,
            "description": "The path of the option group.\nWhen this property is used, `content` should be sorted by `optionGroupPath`.",
            "itemtype": "property",
            "name": "optionGroupPath",
            "type": "String",
            "default": "null",
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/select.js",
            "line": 468,
            "description": "The view class for optgroup.",
            "itemtype": "property",
            "name": "groupView",
            "type": "Ember.View",
            "default": "Ember.SelectOptgroup",
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/select.js",
            "line": 498,
            "description": "The view class for option.",
            "itemtype": "property",
            "name": "optionView",
            "type": "Ember.View",
            "default": "Ember.SelectOption",
            "class": "Ember.Select",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/text_field.js",
            "line": 59,
            "description": "The `value` attribute of the input element. As the user inputs text, this\nproperty is updated live.",
            "itemtype": "property",
            "name": "value",
            "type": "String",
            "default": "\"\"",
            "class": "Ember.TextField",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/text_field.js",
            "line": 69,
            "description": "The `type` attribute of the input element.",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "default": "\"text\"",
            "class": "Ember.TextField",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/text_field.js",
            "line": 78,
            "description": "The `size` of the text field in characters.",
            "itemtype": "property",
            "name": "size",
            "type": "String",
            "default": "null",
            "class": "Ember.TextField",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/text_field.js",
            "line": 87,
            "description": "The `pattern` attribute of input element.",
            "itemtype": "property",
            "name": "pattern",
            "type": "String",
            "default": "null",
            "class": "Ember.TextField",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/text_field.js",
            "line": 96,
            "description": "The `min` attribute of input element used with `type=\"number\"` or `type=\"range\"`.",
            "itemtype": "property",
            "name": "min",
            "type": "String",
            "default": "null",
            "since": "1.4.0",
            "class": "Ember.TextField",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/text_field.js",
            "line": 106,
            "description": "The `max` attribute of input element used with `type=\"number\"` or `type=\"range\"`.",
            "itemtype": "property",
            "name": "max",
            "type": "String",
            "default": "null",
            "since": "1.4.0",
            "class": "Ember.TextField",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 51,
            "description": "Global hash of shared templates. This will automatically be populated\nby the build tools so that you can store your Handlebars templates in\nseparate files that get loaded into JavaScript at buildtime.",
            "itemtype": "property",
            "name": "TEMPLATES",
            "type": "Hash",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-views"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 681,
            "itemtype": "property",
            "name": "isView",
            "type": "Boolean",
            "default": "true",
            "static": 1,
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 693,
            "description": "The name of the template to lookup if no template is provided.\n\nBy default `Ember.View` will lookup a template with this name in\n`Ember.TEMPLATES` (a shared global object).",
            "itemtype": "property",
            "name": "templateName",
            "type": "String",
            "default": "null",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 705,
            "description": "The name of the layout to lookup if no layout is provided.\n\nBy default `Ember.View` will lookup a template with this name in\n`Ember.TEMPLATES` (a shared global object).",
            "itemtype": "property",
            "name": "layoutName",
            "type": "String",
            "default": "null",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 717,
            "description": "The template used to render the view. This should be a function that\naccepts an optional context parameter and returns a string of HTML that\nwill be inserted into the DOM relative to its parent view.\n\nIn general, you should set the `templateName` property instead of setting\nthe template yourself.",
            "itemtype": "property",
            "name": "template",
            "type": "Function",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 739,
            "description": "A view may contain a layout. A layout is a regular template but\nsupersedes the `template` property during rendering. It is the\nresponsibility of the layout template to retrieve the `template`\nproperty from the view (or alternatively, call `Handlebars.helpers.yield`,\n`{{yield}}`) to render it in the correct location.\n\nThis is useful for a view that has a shared wrapper, but which delegates\nthe rendering of the contents of the wrapper to the `template` property\non a subclass.",
            "itemtype": "property",
            "name": "layout",
            "type": "Function",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 789,
            "description": "If a value that affects template rendering changes, the view should be\nre-rendered to reflect the new value.",
            "itemtype": "method",
            "name": "_contextDidChange",
            "access": "private",
            "tagname": "",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 818,
            "description": "Return the nearest ancestor that is an instance of the provided\nclass or mixin.",
            "itemtype": "method",
            "name": "nearestOfType",
            "params": [
                {
                    "name": "klass",
                    "description": "Subclass of Ember.View (or Ember.View itself),\n       or an instance of Ember.Mixin.",
                    "type": "Class,Mixin"
                }
            ],
            "return": {
                "description": "Ember.View"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 839,
            "description": "Return the nearest ancestor that has a given property.",
            "itemtype": "method",
            "name": "nearestWithProperty",
            "params": [
                {
                    "name": "property",
                    "description": "A property name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Ember.View"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 855,
            "description": "When the parent view changes, recursively invalidate `controller`",
            "itemtype": "method",
            "name": "_parentViewDidChange",
            "access": "private",
            "tagname": "",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 882,
            "description": "Renders the view again. This will work regardless of whether the\nview is already in the DOM or not. If the view is in the DOM, the\nrendering process will be deferred to give bindings a chance\nto synchronize.\n\nIf children were added during the rendering process using `appendChild`,\n`rerender` will remove them, because they will be added again\nif needed by the next `render`.\n\nIn general, if the display of your view changes, you should modify\nthe DOM element directly instead of manually calling `rerender`, which can\nbe slow.",
            "itemtype": "method",
            "name": "rerender",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 902,
            "description": "Given a property name, returns a dasherized version of that\nproperty name if the property evaluates to a non-falsy value.\n\nFor example, if the view has property `isUrgent` that evaluates to true,\npassing `isUrgent` to this method will return `\"is-urgent\"`.",
            "itemtype": "method",
            "name": "_classStringForProperty",
            "params": [
                {
                    "name": "property",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 921,
            "description": "Returns the current DOM element for the view.",
            "itemtype": "property",
            "name": "element",
            "type": "DOMElement",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 929,
            "description": "Returns a jQuery object for this view's element. If you pass in a selector\nstring, this method will return a jQuery object, using the current element\nas its buffer.\n\nFor example, calling `view.$('li')` will return a jQuery object containing\nall of the `li` elements inside the DOM element of this view.",
            "itemtype": "method",
            "name": "$",
            "params": [
                {
                    "name": "selector",
                    "description": "a jQuery-compatible selector string",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "the jQuery object for the DOM node",
                "type": "JQuery"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 962,
            "description": "Appends the view's element to the specified parent element.\n\nIf the view does not have an HTML representation yet, `createElement()`\nwill be called automatically.\n\nNote that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing.\n\nThis is not typically a function that you will need to call directly when\nbuilding your application. You might consider using `Ember.ContainerView`\ninstead. If you do need to use `appendTo`, be sure that the target element\nyou are providing is associated with an `Ember.Application` and does not\nhave an ancestor element that is associated with an Ember view.",
            "itemtype": "method",
            "name": "appendTo",
            "params": [
                {
                    "name": "A",
                    "description": "selector, element, HTML string, or jQuery object",
                    "type": "String|DOMElement|jQuery"
                }
            ],
            "return": {
                "description": "receiver",
                "type": "Ember.View"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 993,
            "description": "Replaces the content of the specified parent element with this view's\nelement. If the view does not have an HTML representation yet,\nthe element will be generated automatically.\n\nNote that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing",
            "itemtype": "method",
            "name": "replaceIn",
            "params": [
                {
                    "name": "target",
                    "description": "A selector, element, HTML string, or jQuery object",
                    "type": "String|DOMElement|jQuery"
                }
            ],
            "return": {
                "description": "received",
                "type": "Ember.View"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 1017,
            "description": "Appends the view's element to the document body. If the view does\nnot have an HTML representation yet\nthe element will be generated automatically.\n\nIf your application uses the `rootElement` property, you must append\nthe view within that element. Rendering views outside of the `rootElement`\nis not supported.\n\nNote that this method just schedules the view to be appended; the DOM\nelement will not be appended to the document body until all bindings have\nfinished synchronizing.",
            "itemtype": "method",
            "name": "append",
            "return": {
                "description": "receiver",
                "type": "Ember.View"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 1037,
            "description": "Removes the view's element from the element to which it is attached.",
            "itemtype": "method",
            "name": "remove",
            "return": {
                "description": "receiver",
                "type": "Ember.View"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 1052,
            "description": "The HTML `id` of the view's element in the DOM. You can provide this\nvalue yourself but it must be unique (just as in HTML):\n\n```handlebars\n  {{my-component elementId=\"a-really-cool-id\"}}\n```\n\nIf not manually set a default value will be provided by the framework.\n\nOnce rendered an element's `elementId` is considered immutable and you\nshould never change it.",
            "itemtype": "property",
            "name": "elementId",
            "type": "String",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 1070,
            "description": "Attempts to discover the element in the parent element. The default\nimplementation looks for an element with an ID of `elementId` (or the\nview's guid if `elementId` is null). You can override this method to\nprovide your own form of lookup. For example, if you want to discover your\nelement using a CSS class name instead of an ID.",
            "itemtype": "method",
            "name": "findElementInParentElement",
            "params": [
                {
                    "name": "parentElement",
                    "description": "The parent's DOM element",
                    "type": "DOMElement"
                }
            ],
            "return": {
                "description": "The discovered element",
                "type": "DOMElement"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 1086,
            "description": "Creates a DOM representation of the view and all of its child views by\nrecursively calling the `render()` method.\n\nAfter the element has been inserted into the DOM, `didInsertElement` will\nbe called on this view and all of its child views.",
            "itemtype": "method",
            "name": "createElement",
            "return": {
                "description": "receiver",
                "type": "Ember.View"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 1105,
            "description": "Called when a view is going to insert an element into the DOM.",
            "itemtype": "event",
            "name": "willInsertElement",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 1112,
            "description": "Called when the element of the view has been inserted into the DOM\nor after the view was re-rendered. Override this function to do any\nset up that requires an element in the document body.\n\nWhen a view has children, didInsertElement will be called on the\nchild view(s) first, bubbling upwards through the hierarchy.",
            "itemtype": "event",
            "name": "didInsertElement",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 1124,
            "description": "Called when the view is about to rerender, but before anything has\nbeen torn down. This is a good opportunity to tear down any manual\nobservers you have installed based on the DOM state",
            "itemtype": "event",
            "name": "willClearRender",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 1133,
            "description": "Destroys any existing element along with the element for any child views\nas well. If the view does not currently have a element, then this method\nwill do nothing.\n\nIf you implement `willDestroyElement()` on your view, then this method will\nbe invoked on your view before your element is destroyed to give you a\nchance to clean up any event handlers, etc.\n\nIf you write a `willDestroyElement()` handler, you can assume that your\n`didInsertElement()` handler was called earlier for the same element.\n\nYou should not call or override this method yourself, but you may\nwant to implement the above callbacks.",
            "itemtype": "method",
            "name": "destroyElement",
            "return": {
                "description": "receiver",
                "type": "Ember.View"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 1155,
            "description": "Called when the element of the view is going to be destroyed. Override\nthis function to do any teardown that requires an element, like removing\nevent listeners.\n\nPlease note: any property changes made during this event will have no\neffect on object observers.",
            "itemtype": "event",
            "name": "willDestroyElement",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 1167,
            "description": "Called when the parentView property has changed.",
            "itemtype": "event",
            "name": "parentViewDidChange",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 1202,
            "description": "Tag name for the view's outer element. The tag name is only used when an\nelement is first created. If you change the `tagName` for an element, you\nmust destroy and recreate the view element.\n\nBy default, the render buffer will use a `<div>` tag for views.",
            "itemtype": "property",
            "name": "tagName",
            "type": "String",
            "default": "null",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 1218,
            "description": "The WAI-ARIA role of the control represented by this view. For example, a\nbutton may have a role of type 'button', or a pane may have a role of\ntype 'alertdialog'. This property is used by assistive software to help\nvisually challenged users navigate rich web applications.\n\nThe full list of valid WAI-ARIA roles is available at:\n[http://www.w3.org/TR/wai-aria/roles#roles_categorization](http://www.w3.org/TR/wai-aria/roles#roles_categorization)",
            "itemtype": "property",
            "name": "ariaRole",
            "type": "String",
            "default": "null",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 1237,
            "description": "Setup a view, but do not finish waking it up.\n\n* configure `childViews`\n* register the view with the global views hash, which is used for event\n  dispatch",
            "itemtype": "method",
            "name": "init",
            "access": "private",
            "tagname": "",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 1263,
            "description": "Removes the view from its `parentView`, if one is found. Otherwise\ndoes nothing.",
            "itemtype": "method",
            "name": "removeFromParent",
            "return": {
                "description": "receiver",
                "type": "Ember.View"
            },
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 1280,
            "description": "You must call `destroy` on a view to destroy the view (and all of its\nchild views). This will remove the view from any parent node, then make\nsure that the DOM element managed by the view can be released by the\nmemory manager.",
            "itemtype": "method",
            "name": "destroy",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 1307,
            "description": "Handle events from `Ember.EventDispatcher`",
            "itemtype": "method",
            "name": "handleEvent",
            "params": [
                {
                    "name": "eventName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/views/view.js",
            "line": 1395,
            "description": "Global views hash",
            "itemtype": "property",
            "name": "views",
            "static": 1,
            "type": "Hash",
            "class": "Ember.View",
            "module": "ember",
            "submodule": "ember-views",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-views/lib/main.js",
            "line": 53,
            "description": "Alias for jQuery",
            "itemtype": "method",
            "name": "$",
            "class": "Ember",
            "module": "ember",
            "submodule": "ember-views"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: version",
            "line": " packages/ember-metal/lib/core.js:8"
        },
        {
            "message": "Missing item type\nThe `ApplicationInstance` encapsulates all of the stateful aspects of a\nrunning `Application`.\n\nAt a high-level, we break application boot into two distinct phases:\n\n* Definition time, where all of the classes, templates, and other\n  dependencies are loaded (typically in the browser).\n* Run time, where we begin executing the application once everything\n  has loaded.\n\nDefinition time can be expensive and only needs to happen once since it is\nan idempotent operation. For example, between test runs and FastBoot\nrequests, the application stays the same. It is only the state that we want\nto reset.\n\nThat state is what the `ApplicationInstance` manages: it is responsible for\ncreating the container that contains all application state, and disposing of\nit once the particular test run or FastBoot request has finished.",
            "line": " packages/ember-application/lib/system/application-instance.js:12"
        },
        {
            "message": "Missing item type\nInstantiates and sets up the router, optionally overriding the default\nlocation. This is useful for manually starting the app in FastBoot or\ntesting environments, where trying to modify the URL would be\ninappropriate.",
            "line": " packages/ember-application/lib/system/application-instance.js:106"
        },
        {
            "message": "Missing item type\nThis hook is called by the root-most Route (a.k.a. the ApplicationRoute)\nwhen it has finished creating the root View. By default, we simply take the\nview and append it to the `rootElement` specified on the Application.\n\nIn cases like FastBoot and testing, we can override this hook and implement\ncustom behavior, such as serializing to a string and sending over an HTTP\nsocket rather than appending to DOM.",
            "line": " packages/ember-application/lib/system/application-instance.js:125"
        },
        {
            "message": "Missing item type\nTells the router to start routing. The router will ask the location for the\ncurrent URL of the page to determine the initial URL to start routing to.\nTo start the app at a specific URL, call `handleURL` instead.\n\nEnsure that you have called `setupRouter()` on the instance before using\nthis method.",
            "line": " packages/ember-application/lib/system/application-instance.js:141"
        },
        {
            "message": "Missing item type\nDirects the router to route to a particular URL. This is useful in tests,\nfor example, to tell the app to start at a particular URL. Ensure that you\nhave called `setupRouter()` before calling this method.",
            "line": " packages/ember-application/lib/system/application-instance.js:159"
        },
        {
            "message": "Missing item type",
            "line": " packages/ember-application/lib/system/application-instance.js:173"
        },
        {
            "message": "Missing item type",
            "line": " packages/ember-application/lib/system/application-instance.js:184"
        },
        {
            "message": "Missing item type\nPreviously we used `Ember.$.uuid`, however `$.uuid` has been removed from\njQuery master. We'll just bootstrap our own uuid now.",
            "line": " packages/ember-metal/lib/utils.js:22"
        },
        {
            "message": "Missing item type\nGenerates a universally unique identifier. This method\nis used internally by Ember for assisting with\nthe generation of GUID's and other unique identifiers\nsuch as `bind-attr` data attributes.",
            "line": " packages/ember-metal/lib/utils.js:31"
        },
        {
            "message": "Missing item type\nStrongly hint runtimes to intern the provided string.\n\nWhen do I need to use this function?\n\nFor the most part, never. Pre-mature optimization is bad, and often the\nruntime does exactly what you need it to, and more often the trade-off isn't\nworth it.\n\nWhy?\n\nRuntimes store strings in at least 2 different representations:\nRopes and Symbols (interned strings). The Rope provides a memory efficient\ndata-structure for strings created from concatenation or some other string\nmanipulation like splitting.\n\nUnfortunately checking equality of different ropes can be quite costly as\nruntimes must resort to clever string comparison algorithms. These\nalgorithms typically cost in proportion to the length of the string.\nLuckily, this is where the Symbols (interned strings) shine. As Symbols are\nunique by their string content, equality checks can be done by pointer\ncomparison.\n\nHow do I know if my string is a rope or symbol?\n\nTypically (warning general sweeping statement, but truthy in runtimes at\npresent) static strings created as part of the JS source are interned.\nStrings often used for comparisons can be interned at runtime if some\ncriteria are met.  One of these criteria can be the size of the entire rope.\nFor example, in chrome 38 a rope longer then 12 characters will not\nintern, nor will segments of that rope.\n\nSome numbers: http://jsperf.com/eval-vs-keys/8\n\nKnown Trick™",
            "line": " packages/ember-metal/lib/utils.js:58"
        },
        {
            "message": "Missing item type",
            "line": " packages/ember-metal/lib/utils.js:932"
        },
        {
            "message": "Missing item type",
            "line": " packages/ember-metal/lib/utils.js:950"
        },
        {
            "message": "Missing item type\nReturns a merged query params meta object for a given route.\nUseful for asking a route what its known query params are.",
            "line": " packages/ember-routing/lib/system/router.js:554"
        },
        {
            "message": "Missing item type",
            "line": " packages/ember-runtime/lib/mixins/controller.js:54"
        }
    ]
}